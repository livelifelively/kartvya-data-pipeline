import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from "graphql";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  /**
   * The DateTime scalar type represents date and time as a string in RFC3339 format.
   * For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
   */
  DateTime: { input: any; output: any };
  /**
   * The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
   * Int64 can represent values in range [-(2^63),(2^63 - 1)].
   */
  Int64: { input: any; output: any };
};

export type Account = {
  __typename?: "Account";
  accessToken?: Maybe<Scalars["String"]["output"]>;
  access_token?: Maybe<Scalars["String"]["output"]>;
  expires_at?: Maybe<Scalars["Int64"]["output"]>;
  id?: Maybe<Scalars["ID"]["output"]>;
  id_token?: Maybe<Scalars["String"]["output"]>;
  provider?: Maybe<Scalars["String"]["output"]>;
  providerAccountId?: Maybe<Scalars["String"]["output"]>;
  refreshToken?: Maybe<Scalars["String"]["output"]>;
  refresh_token?: Maybe<Scalars["String"]["output"]>;
  scope?: Maybe<Scalars["String"]["output"]>;
  session_state?: Maybe<Scalars["String"]["output"]>;
  token_type?: Maybe<Scalars["String"]["output"]>;
  type?: Maybe<Scalars["String"]["output"]>;
  user?: Maybe<User>;
};

export type AccountUserArgs = {
  filter?: InputMaybe<UserFilter>;
};

export type AccountAggregateResult = {
  __typename?: "AccountAggregateResult";
  accessTokenMax?: Maybe<Scalars["String"]["output"]>;
  accessTokenMin?: Maybe<Scalars["String"]["output"]>;
  access_tokenMax?: Maybe<Scalars["String"]["output"]>;
  access_tokenMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  expires_atAvg?: Maybe<Scalars["Float"]["output"]>;
  expires_atMax?: Maybe<Scalars["Int64"]["output"]>;
  expires_atMin?: Maybe<Scalars["Int64"]["output"]>;
  expires_atSum?: Maybe<Scalars["Int64"]["output"]>;
  id_tokenMax?: Maybe<Scalars["String"]["output"]>;
  id_tokenMin?: Maybe<Scalars["String"]["output"]>;
  providerAccountIdMax?: Maybe<Scalars["String"]["output"]>;
  providerAccountIdMin?: Maybe<Scalars["String"]["output"]>;
  providerMax?: Maybe<Scalars["String"]["output"]>;
  providerMin?: Maybe<Scalars["String"]["output"]>;
  refreshTokenMax?: Maybe<Scalars["String"]["output"]>;
  refreshTokenMin?: Maybe<Scalars["String"]["output"]>;
  refresh_tokenMax?: Maybe<Scalars["String"]["output"]>;
  refresh_tokenMin?: Maybe<Scalars["String"]["output"]>;
  scopeMax?: Maybe<Scalars["String"]["output"]>;
  scopeMin?: Maybe<Scalars["String"]["output"]>;
  session_stateMax?: Maybe<Scalars["String"]["output"]>;
  session_stateMin?: Maybe<Scalars["String"]["output"]>;
  token_typeMax?: Maybe<Scalars["String"]["output"]>;
  token_typeMin?: Maybe<Scalars["String"]["output"]>;
  typeMax?: Maybe<Scalars["String"]["output"]>;
  typeMin?: Maybe<Scalars["String"]["output"]>;
};

export type AccountFilter = {
  and?: InputMaybe<Array<InputMaybe<AccountFilter>>>;
  has?: InputMaybe<Array<InputMaybe<AccountHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<AccountFilter>;
  or?: InputMaybe<Array<InputMaybe<AccountFilter>>>;
  provider?: InputMaybe<StringHashFilter>;
  providerAccountId?: InputMaybe<StringHashFilter>;
};

export enum AccountHasFilter {
  AccessToken = "access_token",
  ExpiresAt = "expires_at",
  IdToken = "id_token",
  Provider = "provider",
  ProviderAccountId = "providerAccountId",
  RefreshToken = "refresh_token",
  Scope = "scope",
  SessionState = "session_state",
  TokenType = "token_type",
  Type = "type",
  User = "user",
}

export type AccountOrder = {
  asc?: InputMaybe<AccountOrderable>;
  desc?: InputMaybe<AccountOrderable>;
  then?: InputMaybe<AccountOrder>;
};

export enum AccountOrderable {
  AccessToken = "access_token",
  ExpiresAt = "expires_at",
  IdToken = "id_token",
  Provider = "provider",
  ProviderAccountId = "providerAccountId",
  RefreshToken = "refresh_token",
  Scope = "scope",
  SessionState = "session_state",
  TokenType = "token_type",
  Type = "type",
}

export type AccountPatch = {
  accessToken?: InputMaybe<Scalars["String"]["input"]>;
  access_token?: InputMaybe<Scalars["String"]["input"]>;
  expires_at?: InputMaybe<Scalars["Int64"]["input"]>;
  id_token?: InputMaybe<Scalars["String"]["input"]>;
  provider?: InputMaybe<Scalars["String"]["input"]>;
  providerAccountId?: InputMaybe<Scalars["String"]["input"]>;
  refreshToken?: InputMaybe<Scalars["String"]["input"]>;
  refresh_token?: InputMaybe<Scalars["String"]["input"]>;
  scope?: InputMaybe<Scalars["String"]["input"]>;
  session_state?: InputMaybe<Scalars["String"]["input"]>;
  token_type?: InputMaybe<Scalars["String"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
  user?: InputMaybe<UserRef>;
};

export type AccountRef = {
  accessToken?: InputMaybe<Scalars["String"]["input"]>;
  access_token?: InputMaybe<Scalars["String"]["input"]>;
  expires_at?: InputMaybe<Scalars["Int64"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  id_token?: InputMaybe<Scalars["String"]["input"]>;
  provider?: InputMaybe<Scalars["String"]["input"]>;
  providerAccountId?: InputMaybe<Scalars["String"]["input"]>;
  refreshToken?: InputMaybe<Scalars["String"]["input"]>;
  refresh_token?: InputMaybe<Scalars["String"]["input"]>;
  scope?: InputMaybe<Scalars["String"]["input"]>;
  session_state?: InputMaybe<Scalars["String"]["input"]>;
  token_type?: InputMaybe<Scalars["String"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
  user?: InputMaybe<UserRef>;
};

export type AddAccountInput = {
  accessToken?: InputMaybe<Scalars["String"]["input"]>;
  access_token?: InputMaybe<Scalars["String"]["input"]>;
  expires_at?: InputMaybe<Scalars["Int64"]["input"]>;
  id_token?: InputMaybe<Scalars["String"]["input"]>;
  provider?: InputMaybe<Scalars["String"]["input"]>;
  providerAccountId?: InputMaybe<Scalars["String"]["input"]>;
  refreshToken?: InputMaybe<Scalars["String"]["input"]>;
  refresh_token?: InputMaybe<Scalars["String"]["input"]>;
  scope?: InputMaybe<Scalars["String"]["input"]>;
  session_state?: InputMaybe<Scalars["String"]["input"]>;
  token_type?: InputMaybe<Scalars["String"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
  user?: InputMaybe<UserRef>;
};

export type AddAccountPayload = {
  __typename?: "AddAccountPayload";
  account?: Maybe<Array<Maybe<Account>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type AddAccountPayloadAccountArgs = {
  filter?: InputMaybe<AccountFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<AccountOrder>;
};

export type AddSessionInput = {
  expires?: InputMaybe<Scalars["DateTime"]["input"]>;
  sessionToken?: InputMaybe<Scalars["String"]["input"]>;
  user?: InputMaybe<UserRef>;
};

export type AddSessionPayload = {
  __typename?: "AddSessionPayload";
  numUids?: Maybe<Scalars["Int"]["output"]>;
  session?: Maybe<Array<Maybe<Session>>>;
};

export type AddSessionPayloadSessionArgs = {
  filter?: InputMaybe<SessionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<SessionOrder>;
};

export type AddUserInput = {
  accounts?: InputMaybe<Array<InputMaybe<AccountRef>>>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  emailVerified?: InputMaybe<Scalars["DateTime"]["input"]>;
  image?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  sessions?: InputMaybe<Array<InputMaybe<SessionRef>>>;
};

export type AddUserPayload = {
  __typename?: "AddUserPayload";
  numUids?: Maybe<Scalars["Int"]["output"]>;
  user?: Maybe<Array<Maybe<User>>>;
};

export type AddUserPayloadUserArgs = {
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<UserOrder>;
};

export type AddVerificationTokenInput = {
  expires?: InputMaybe<Scalars["DateTime"]["input"]>;
  identifier?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type AddVerificationTokenPayload = {
  __typename?: "AddVerificationTokenPayload";
  numUids?: Maybe<Scalars["Int"]["output"]>;
  verificationToken?: Maybe<Array<Maybe<VerificationToken>>>;
};

export type AddVerificationTokenPayloadVerificationTokenArgs = {
  filter?: InputMaybe<VerificationTokenFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<VerificationTokenOrder>;
};

export type Add_Country_Event_Input = {
  country?: InputMaybe<Array<InputMaybe<_Country_Ref>>>;
  datetime_from: _Date_Time_Ref;
  datetime_to?: InputMaybe<_Date_Time_Ref>;
  description: Scalars["String"]["input"];
  event_type: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  one_time_event?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type Add_Country_Event_Payload = {
  __typename?: "Add_Country_Event_Payload";
  _Country_Event_?: Maybe<Array<Maybe<_Country_Event_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Country_Event_Payload_Country_Event_Args = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type Add_Country_Government_Input = {
  active_government_system_type_official?: InputMaybe<_Government_System_Type_Ref>;
  governs_country?: InputMaybe<_Country_Ref>;
  india_government_system_active?: InputMaybe<_Indian_Government_System_Ref>;
  name_id: Scalars["String"]["input"];
  names: Array<_Name_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Country_Government_Payload = {
  __typename?: "Add_Country_Government_Payload";
  _Country_Government_?: Maybe<Array<Maybe<_Country_Government_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Country_Government_Payload_Country_Government_Args = {
  filter?: InputMaybe<_Country_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Government_Order>;
};

export type Add_Country_Input = {
  events?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  government?: InputMaybe<_Country_Government_Ref>;
  name_id: Scalars["String"]["input"];
  names: Array<_Name_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  region?: InputMaybe<Array<InputMaybe<_Country_Region_Ref>>>;
};

export type Add_Country_Payload = {
  __typename?: "Add_Country_Payload";
  _Country_?: Maybe<Array<Maybe<_Country_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Country_Payload_Country_Args = {
  filter?: InputMaybe<_Country_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Order>;
};

export type Add_Country_Region_Input = {
  country?: InputMaybe<_Country_Ref>;
  disestablished?: InputMaybe<_Country_Event_Ref>;
  established?: InputMaybe<_Country_Event_Ref>;
  geo_boundary_self_actual?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_boundary_self_official?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_boundary_world_official?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_district?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_loksabha_constituency?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_state_union_territory?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_vidhansabha_constituency?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_zonal_council?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Country_Region_Payload = {
  __typename?: "Add_Country_Region_Payload";
  _Country_Region_?: Maybe<Array<Maybe<_Country_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Country_Region_Payload_Country_Region_Args = {
  filter?: InputMaybe<_Country_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Region_Order>;
};

export type Add_Date_Time_Input = {
  date_time?: InputMaybe<Scalars["DateTime"]["input"]>;
  date_time_precision?: InputMaybe<Date_Time_Precision_Category>;
  from_datetime_country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  to_datetime_country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
};

export type Add_Date_Time_Payload = {
  __typename?: "Add_Date_Time_Payload";
  _Date_Time_?: Maybe<Array<Maybe<_Date_Time_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Date_Time_Payload_Date_Time_Args = {
  filter?: InputMaybe<_Date_Time_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Date_Time_Order>;
};

export type Add_Geo_Input = {
  area?: InputMaybe<MultiPolygonRef>;
  category?: InputMaybe<_Location_Or_Region_Category_>;
  country_boundary_actual?: InputMaybe<_Country_Region_Ref>;
  country_boundary_self_official?: InputMaybe<_Country_Region_Ref>;
  country_boundary_world_official?: InputMaybe<_Country_Region_Ref>;
  india_district_divisions?: InputMaybe<_Country_Region_Ref>;
  india_loksabha_constituency_divisions?: InputMaybe<_Country_Region_Ref>;
  india_state_union_territory_divisions?: InputMaybe<_Country_Region_Ref>;
  india_vidhansabha_constituency_divisions?: InputMaybe<_Country_Region_Ref>;
  india_zonal_council_divisions?: InputMaybe<_Country_Region_Ref>;
  indian_districts_boundaries?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Ref>>>;
  indian_loksabha_constituencies_boundaries?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Ref>>>;
  indian_states_union_territories_boundaries?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Ref>>>;
  indian_vidhansabha_constituencies_boundaries?: InputMaybe<
    Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Ref>>
  >;
  location?: InputMaybe<PointRef>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  precision?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Add_Geo_Payload = {
  __typename?: "Add_Geo_Payload";
  _Geo_?: Maybe<Array<Maybe<_Geo_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Geo_Payload_Geo_Args = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type Add_Government_System_Type_Input = {
  active_official_system_type_of?: InputMaybe<_Country_Government_Ref>;
  authority_concentration_type: Array<_Government_System_Types_Authority_Concentration_Ref>;
  authority_distribution_type: _Government_System_Types_Authority_Distribution_Ref;
  authority_source_type: Array<InputMaybe<_Government_System_Types_Authority_Source_Ref>>;
  authority_status_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Status_Ref>>>;
  autocratic_type?: InputMaybe<_Government_System_Types_Autocratic_Ref>;
  democracy_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Ref>>>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<_Country_Event_Ref>;
  economic_system_type: Array<_Government_System_Types_Economic_System_Ref>;
  established?: InputMaybe<_Country_Event_Ref>;
  head_of_state_or_government_system_type: _Government_System_Types_Head_Of_State_Or_GovernmentRef;
  monarchy_type?: InputMaybe<_Government_System_Types_Monarchy_Ref>;
  name_id: Scalars["String"]["input"];
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  oligarchy_type?: InputMaybe<_Government_System_Types_Oligarchy_Ref>;
  partisan_system_type?: InputMaybe<_Government_System_Types_Partisan_Systems_Ref>;
  religious_ideology_type: _Government_System_Types_Religion_Ref;
};

export type Add_Government_System_Type_Payload = {
  __typename?: "Add_Government_System_Type_Payload";
  _Government_System_Type_?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Type_Payload_Government_System_Type_Args = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type Add_Government_System_Types_Authority_Concentration_Input = {
  accountability_towards_people: Scalars["String"]["input"];
  authority_held_by: Scalars["String"]["input"];
  description: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_hierarchy?: InputMaybe<Array<Scalars["String"]["input"]>>;
  public_access_to_means_of_peaceful_power_transfer: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Authority_Concentration_Payload = {
  __typename?: "Add_Government_System_Types_Authority_Concentration_Payload";
  _Government_System_Types_Authority_Concentration_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Concentration_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Authority_Concentration_Payload_Government_System_Types_Authority_Concentration_Args =
  {
    filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
  };

export type Add_Government_System_Types_Authority_Distribution_Input = {
  central_authority_role: Scalars["String"]["input"];
  description: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  law_uniformity: Scalars["String"]["input"];
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_distribution: Scalars["String"]["input"];
  state_sovereignty: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Authority_Distribution_Payload = {
  __typename?: "Add_Government_System_Types_Authority_Distribution_Payload";
  _Government_System_Types_Authority_Distribution_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Distribution_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Authority_Distribution_Payload_Government_System_Types_Authority_Distribution_Args =
  {
    filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Authority_Distribution_Order>;
  };

export type Add_Government_System_Types_Authority_Source_Input = {
  description: Scalars["String"]["input"];
  governance_mechanisms: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_structure: Scalars["String"]["input"];
  role_of_leadership: Scalars["String"]["input"];
  source_of_legitimacy: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Authority_Source_Payload = {
  __typename?: "Add_Government_System_Types_Authority_Source_Payload";
  _Government_System_Types_Authority_Source_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Source_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Authority_Source_Payload_Government_System_Types_Authority_Source_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export type Add_Government_System_Types_Authority_Status_Input = {
  control_and_authority: Scalars["String"]["input"];
  description: Scalars["String"]["input"];
  governance_status: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  international_recognition: Scalars["String"]["input"];
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  objective_and_focus: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Authority_Status_Payload = {
  __typename?: "Add_Government_System_Types_Authority_Status_Payload";
  _Government_System_Types_Authority_Status_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Status_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Authority_Status_Payload_Government_System_Types_Authority_Status_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export type Add_Government_System_Types_Autocratic_Input = {
  description: Scalars["String"]["input"];
  formation_context: Scalars["String"]["input"];
  governance_style: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  leadership_origin: Scalars["String"]["input"];
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_consolidation: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Autocratic_Payload = {
  __typename?: "Add_Government_System_Types_Autocratic_Payload";
  _Government_System_Types_Autocratic_?: Maybe<Array<Maybe<_Government_System_Types_Autocratic_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Autocratic_Payload_Government_System_Types_Autocratic_Args = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Autocratic_Order>;
};

export type Add_Government_System_Types_Democracy_Input = {
  description: Scalars["String"]["input"];
  governance_focus: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  participation_level: Scalars["String"]["input"];
  selection_method: Scalars["String"]["input"];
  system_stability: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Democracy_Payload = {
  __typename?: "Add_Government_System_Types_Democracy_Payload";
  _Government_System_Types_Democracy_?: Maybe<Array<Maybe<_Government_System_Types_Democracy_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Democracy_Payload_Government_System_Types_Democracy_Args = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export type Add_Government_System_Types_Economic_System_Input = {
  description: Scalars["String"]["input"];
  economic_drivers: Scalars["String"]["input"];
  governance_approach: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  ownership_and_control: Scalars["String"]["input"];
  societal_structure: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Economic_System_Payload = {
  __typename?: "Add_Government_System_Types_Economic_System_Payload";
  _Government_System_Types_Economic_System_?: Maybe<Array<Maybe<_Government_System_Types_Economic_System_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Economic_System_Payload_Government_System_Types_Economic_System_Args = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export type Add_Government_System_Types_Head_Of_State_Or_GovernmentInput = {
  authority_scope: Scalars["String"]["input"];
  description: Scalars["String"]["input"];
  government_integration: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  leadership_structure: Scalars["String"]["input"];
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_distribution: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload = {
  __typename?: "Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload";
  _Government_System_Types_Head_Of_State_Or_Government?: Maybe<
    Array<Maybe<_Government_System_Types_Head_Of_State_Or_Government>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload_Government_System_Types_Head_Of_State_Or_GovernmentArgs =
  {
    filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrder>;
  };

export type Add_Government_System_Types_Monarchy_Input = {
  authority_level: Scalars["String"]["input"];
  constitutional_limitations: Scalars["String"]["input"];
  description: Scalars["String"]["input"];
  governing_powers_in: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_source: Scalars["String"]["input"];
  reign_term: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Monarchy_Payload = {
  __typename?: "Add_Government_System_Types_Monarchy_Payload";
  _Government_System_Types_Monarchy_?: Maybe<Array<Maybe<_Government_System_Types_Monarchy_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Monarchy_Payload_Government_System_Types_Monarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Monarchy_Order>;
};

export type Add_Government_System_Types_Oligarchy_Input = {
  description: Scalars["String"]["input"];
  governance_focus: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_basis: Scalars["String"]["input"];
  selection_mechanism: Scalars["String"]["input"];
  stability_and_order: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Oligarchy_Payload = {
  __typename?: "Add_Government_System_Types_Oligarchy_Payload";
  _Government_System_Types_Oligarchy_?: Maybe<Array<Maybe<_Government_System_Types_Oligarchy_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Oligarchy_Payload_Government_System_Types_Oligarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Oligarchy_Order>;
};

export type Add_Government_System_Types_Partisan_Systems_Input = {
  description: Scalars["String"]["input"];
  government_formation: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  party_influence: Scalars["String"]["input"];
  political_stability: Scalars["String"]["input"];
  representation: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Partisan_Systems_Payload = {
  __typename?: "Add_Government_System_Types_Partisan_Systems_Payload";
  _Government_System_Types_Partisan_Systems_?: Maybe<Array<Maybe<_Government_System_Types_Partisan_Systems_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Partisan_Systems_Payload_Government_System_Types_Partisan_Systems_Args = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Partisan_Systems_Order>;
};

export type Add_Government_System_Types_Religion_Input = {
  description: Scalars["String"]["input"];
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  legal_framework: Scalars["String"]["input"];
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  religious_freedom: Scalars["String"]["input"];
  religious_influence: Scalars["String"]["input"];
  state_support: Scalars["String"]["input"];
};

export type Add_Government_System_Types_Religion_Payload = {
  __typename?: "Add_Government_System_Types_Religion_Payload";
  _Government_System_Types_Religion_?: Maybe<Array<Maybe<_Government_System_Types_Religion_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Government_System_Types_Religion_Payload_Government_System_Types_Religion_Args = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Religion_Order>;
};

export type Add_Indian_Administrative_DivisionsInput = {
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
};

export type Add_Indian_Administrative_DivisionsPayload = {
  __typename?: "Add_Indian_Administrative_DivisionsPayload";
  _Indian_Administrative_Divisions?: Maybe<Array<Maybe<_Indian_Administrative_Divisions>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Administrative_DivisionsPayload_Indian_Administrative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Add_Indian_District_Input = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type Add_Indian_District_Payload = {
  __typename?: "Add_Indian_District_Payload";
  _Indian_District_?: Maybe<Array<Maybe<_Indian_District_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_District_Payload_Indian_District_Args = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type Add_Indian_District_Region_Input = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_District_Ref>;
};

export type Add_Indian_District_Region_Payload = {
  __typename?: "Add_Indian_District_Region_Payload";
  _Indian_District_Region_?: Maybe<Array<Maybe<_Indian_District_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_District_Region_Payload_Indian_District_Region_Args = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Region_Order>;
};

export type Add_Indian_Government_Official_Role_Input = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Indian_Government_Official_Role_Payload = {
  __typename?: "Add_Indian_Government_Official_Role_Payload";
  _Indian_Government_Official_Role_?: Maybe<Array<Maybe<_Indian_Government_Official_Role_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Government_Official_Role_Payload_Indian_Government_Official_Role_Args = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_Official_Role_Order>;
};

export type Add_Indian_Government_System_Input = {
  administrative_divisions?: InputMaybe<_Indian_Administrative_DivisionsRef>;
  cabinet_ministers?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  country?: InputMaybe<_Country_Government_Ref>;
  loksabha?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_ministers?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Ref>>>;
  union_governments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ref>>>;
};

export type Add_Indian_Government_System_Payload = {
  __typename?: "Add_Indian_Government_System_Payload";
  _Indian_Government_System_?: Maybe<Array<Maybe<_Indian_Government_System_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Government_System_Payload_Indian_Government_System_Args = {
  filter?: InputMaybe<_Indian_Government_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_System_Order>;
};

export type Add_Indian_Legal_Document_Input = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  document_type: _Indian_Legal_Document_Category_;
  name_id: Scalars["String"]["input"];
  names: Array<_Name_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Indian_Legal_Document_Payload = {
  __typename?: "Add_Indian_Legal_Document_Payload";
  _Indian_Legal_Document_?: Maybe<Array<Maybe<_Indian_Legal_Document_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Legal_Document_Payload_Indian_Legal_Document_Args = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Legal_Document_Order>;
};

export type Add_Indian_Legislative_DivisionsInput = {
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type Add_Indian_Legislative_DivisionsPayload = {
  __typename?: "Add_Indian_Legislative_DivisionsPayload";
  _Indian_Legislative_Divisions?: Maybe<Array<Maybe<_Indian_Legislative_Divisions>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Legislative_DivisionsPayload_Indian_Legislative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Legislative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Add_Indian_Loksabha_Constituency_Election_Candidate_Input = {
  candidate?: InputMaybe<_Indian_Politician_Ref>;
  candidate_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref>;
  constituency_election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_party?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>;
};

export type Add_Indian_Loksabha_Constituency_Election_Candidate_Payload = {
  __typename?: "Add_Indian_Loksabha_Constituency_Election_Candidate_Payload";
  _Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Constituency_Election_Candidate_Payload_Indian_Loksabha_Constituency_Election_Candidate_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
  };

export type Add_Indian_Loksabha_Constituency_Election_Input = {
  candidates?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  constituency?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  election_phase?: InputMaybe<_Indian_Loksabha_Election_Phase_Ref>;
  election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election_winner?: InputMaybe<_Indian_Loksabha_Member_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Indian_Loksabha_Constituency_Election_Payload = {
  __typename?: "Add_Indian_Loksabha_Constituency_Election_Payload";
  _Indian_Loksabha_Constituency_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Constituency_Election_Payload_Indian_Loksabha_Constituency_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input = {
  candidate?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  overall_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  votes_count?: InputMaybe<Scalars["Int"]["input"]>;
  votes_percentage?: InputMaybe<Scalars["Float"]["input"]>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload = {
  __typename?: "Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload";
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order>;
  };

export type Add_Indian_Loksabha_Constituency_Election_Result_Input = {
  candidate_result?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref>>>;
  candidates?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  constituency_election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  election_result?: InputMaybe<_Indian_Loksabha_Election_Result_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  total_voters?: InputMaybe<Scalars["Int"]["input"]>;
  voter_turnout?: InputMaybe<Scalars["Int"]["input"]>;
  voter_turnout_percentage?: InputMaybe<Scalars["Float"]["input"]>;
  winner?: InputMaybe<_Indian_Loksabha_Member_Ref>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_Payload = {
  __typename?: "Add_Indian_Loksabha_Constituency_Election_Result_Payload";
  _Indian_Loksabha_Constituency_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_Payload_Indian_Loksabha_Constituency_Election_Result_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Order>;
  };

export type Add_Indian_Loksabha_Constituency_Input = {
  constituency_number: Scalars["String"]["input"];
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  elections?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  loksabhas?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type Add_Indian_Loksabha_Constituency_Payload = {
  __typename?: "Add_Indian_Loksabha_Constituency_Payload";
  _Indian_Loksabha_Constituency_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Constituency_Payload_Indian_Loksabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type Add_Indian_Loksabha_Constituency_Region_Input = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
};

export type Add_Indian_Loksabha_Constituency_Region_Payload = {
  __typename?: "Add_Indian_Loksabha_Constituency_Region_Payload";
  _Indian_Loksabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Constituency_Region_Payload_Indian_Loksabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export type Add_Indian_Loksabha_Election_Input = {
  completed_on?: InputMaybe<_Date_Time_Ref>;
  constituency_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  participating_political_parties?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
  phases?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Phase_Ref>>>;
  pre_poll_coalitions?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref>>>;
  result?: InputMaybe<_Indian_Loksabha_Election_Result_Ref>;
  started_on?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Loksabha_Election_Payload = {
  __typename?: "Add_Indian_Loksabha_Election_Payload";
  _Indian_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Election_Payload_Indian_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export type Add_Indian_Loksabha_Election_Phase_Input = {
  constituency_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  election_date?: InputMaybe<_Date_Time_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Indian_Loksabha_Election_Phase_Payload = {
  __typename?: "Add_Indian_Loksabha_Election_Phase_Payload";
  _Indian_Loksabha_Election_Phase_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Phase_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Election_Phase_Payload_Indian_Loksabha_Election_Phase_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Phase_Order>;
};

export type Add_Indian_Loksabha_Election_Result_Input = {
  constituency_election_result?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>>>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  result_declaration_date?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Loksabha_Election_Result_Payload = {
  __typename?: "Add_Indian_Loksabha_Election_Result_Payload";
  _Indian_Loksabha_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Result_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Election_Result_Payload_Indian_Loksabha_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Result_Order>;
};

export type Add_Indian_Loksabha_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  elections?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Ref>>>;
  loksabha_number: Scalars["Int"]["input"];
  loksabha_sessions?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Session_Ref>>>;
  members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  term_end?: InputMaybe<_Date_Time_Ref>;
  term_start?: InputMaybe<_Date_Time_Ref>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
};

export type Add_Indian_Loksabha_Member_Input = {
  constituency?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
  constituency_election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  election_winning_political_party?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Loksabha_Member_Payload = {
  __typename?: "Add_Indian_Loksabha_Member_Payload";
  _Indian_Loksabha_Member_?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Member_Payload_Indian_Loksabha_Member_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type Add_Indian_Loksabha_Payload = {
  __typename?: "Add_Indian_Loksabha_Payload";
  _Indian_Loksabha_?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Payload_Indian_Loksabha_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type Add_Indian_Loksabha_Session_Input = {
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Indian_Loksabha_Session_Payload = {
  __typename?: "Add_Indian_Loksabha_Session_Payload";
  _Indian_Loksabha_Session_?: Maybe<Array<Maybe<_Indian_Loksabha_Session_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Loksabha_Session_Payload_Indian_Loksabha_Session_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Session_Order>;
};

export type Add_Indian_Political_Party_Input = {
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  is_national_party?: InputMaybe<Scalars["Boolean"]["input"]>;
  loksabha_elections?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
  members?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Ref>>>;
  name_id: Scalars["String"]["input"];
  names: Array<_Name_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Indian_Political_Party_Loksabha_Election_Input = {
  candidates_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  loksabha_election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_party?: InputMaybe<_Indian_Political_Party_Ref>;
};

export type Add_Indian_Political_Party_Loksabha_Election_Payload = {
  __typename?: "Add_Indian_Political_Party_Loksabha_Election_Payload";
  _Indian_Political_Party_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Political_Party_Loksabha_Election_Payload_Indian_Political_Party_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type Add_Indian_Political_Party_Member_Input = {
  member_from?: InputMaybe<_Date_Time_Ref>;
  member_to?: InputMaybe<_Date_Time_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  party?: InputMaybe<_Indian_Political_Party_Ref>;
  politician?: InputMaybe<_Indian_Politician_Ref>;
};

export type Add_Indian_Political_Party_Member_Payload = {
  __typename?: "Add_Indian_Political_Party_Member_Payload";
  _Indian_Political_Party_Member_?: Maybe<Array<Maybe<_Indian_Political_Party_Member_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Political_Party_Member_Payload_Indian_Political_Party_Member_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export type Add_Indian_Political_Party_Payload = {
  __typename?: "Add_Indian_Political_Party_Payload";
  _Indian_Political_Party_?: Maybe<Array<Maybe<_Indian_Political_Party_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Political_Party_Payload_Indian_Political_Party_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Order>;
};

export type Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input = {
  loksabha_election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_parties?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
};

export type Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload = {
  __typename?: "Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload";
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<
    Array<Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args =
  {
    filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order>;
  };

export type Add_Indian_Politician_Input = {
  cabinet_minister?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  loksabha_elections_contested?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  loksabha_member?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  person?: InputMaybe<_Person_Ref>;
  political_party_memberships?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Ref>>>;
  prime_minister?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Ref>>>;
};

export type Add_Indian_Politician_Payload = {
  __typename?: "Add_Indian_Politician_Payload";
  _Indian_Politician_?: Maybe<Array<Maybe<_Indian_Politician_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Politician_Payload_Indian_Politician_Args = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Politician_Order>;
};

export type Add_Indian_Prime_Minister_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  government?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ref>>>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Prime_Minister_Payload = {
  __typename?: "Add_Indian_Prime_Minister_Payload";
  _Indian_Prime_Minister_?: Maybe<Array<Maybe<_Indian_Prime_Minister_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Prime_Minister_Payload_Indian_Prime_Minister_Args = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export type Add_Indian_State_Union_Territory_Input = {
  category?: InputMaybe<_Indian_State_Or_Union_Territory_Category_>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type Add_Indian_State_Union_Territory_Payload = {
  __typename?: "Add_Indian_State_Union_Territory_Payload";
  _Indian_State_Union_Territory_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_State_Union_Territory_Payload_Indian_State_Union_Territory_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type Add_Indian_State_Union_Territory_Region_Input = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_State_Union_Territory_Ref>;
};

export type Add_Indian_State_Union_Territory_Region_Payload = {
  __typename?: "Add_Indian_State_Union_Territory_Region_Payload";
  _Indian_State_Union_Territory_Region_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_State_Union_Territory_Region_Payload_Indian_State_Union_Territory_Region_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export type Add_Indian_Union_Council_Of_Ministers_Input = {
  council_member_ministers?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>;
  government?: InputMaybe<_Indian_Union_Government_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Union_Council_Of_Ministers_Payload = {
  __typename?: "Add_Indian_Union_Council_Of_Ministers_Payload";
  _Indian_Union_Council_Of_Ministers_?: Maybe<Array<Maybe<_Indian_Union_Council_Of_Ministers_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Council_Of_Ministers_Payload_Indian_Union_Council_Of_Ministers_Args = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Council_Of_Ministers_Order>;
};

export type Add_Indian_Union_Government_Cabinet_Input = {
  cabinet_ministers?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  government?: InputMaybe<_Indian_Union_Government_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Union_Government_Cabinet_Minister_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Union_Government_Cabinet_Minister_Payload = {
  __typename?: "Add_Indian_Union_Government_Cabinet_Minister_Payload";
  _Indian_Union_Government_Cabinet_Minister_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Cabinet_Minister_Payload_Indian_Union_Government_Cabinet_Minister_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type Add_Indian_Union_Government_Cabinet_Payload = {
  __typename?: "Add_Indian_Union_Government_Cabinet_Payload";
  _Indian_Union_Government_Cabinet_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Cabinet_Payload_Indian_Union_Government_Cabinet_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Order>;
};

export type Add_Indian_Union_Government_Department_Input = {
  child_departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  name_id: Scalars["String"]["input"];
  names: Array<_Name_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  parent_department?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  policy_domain_departments_list?: InputMaybe<
    Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>>
  >;
  policy_domains?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
};

export type Add_Indian_Union_Government_Department_Payload = {
  __typename?: "Add_Indian_Union_Government_Department_Payload";
  _Indian_Union_Government_Department_?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Department_Payload_Indian_Union_Government_Department_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type Add_Indian_Union_Government_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
};

export type Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload = {
  __typename?: "Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload";
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args =
  {
    filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
  };

export type Add_Indian_Union_Government_Minister_Of_State_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type Add_Indian_Union_Government_Minister_Of_State_Payload = {
  __typename?: "Add_Indian_Union_Government_Minister_Of_State_Payload";
  _Indian_Union_Government_Minister_Of_State_?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Minister_Of_State_Payload_Indian_Union_Government_Minister_Of_State_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type Add_Indian_Union_Government_Ministry_Input = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  minister?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  name_id: Scalars["String"]["input"];
  names: Array<_Name_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  policy_domain_ministries_list?: InputMaybe<
    Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>>
  >;
  policy_domains?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type Add_Indian_Union_Government_Ministry_Payload = {
  __typename?: "Add_Indian_Union_Government_Ministry_Payload";
  _Indian_Union_Government_Ministry_?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Ministry_Payload_Indian_Union_Government_Ministry_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type Add_Indian_Union_Government_Payload = {
  __typename?: "Add_Indian_Union_Government_Payload";
  _Indian_Union_Government_?: Maybe<Array<Maybe<_Indian_Union_Government_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Union_Government_Payload_Indian_Union_Government_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Order>;
};

export type Add_Indian_Vidhansabha_Constituency_Input = {
  constituency_number: Scalars["String"]["input"];
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
};

export type Add_Indian_Vidhansabha_Constituency_Payload = {
  __typename?: "Add_Indian_Vidhansabha_Constituency_Payload";
  _Indian_Vidhansabha_Constituency_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Vidhansabha_Constituency_Payload_Indian_Vidhansabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type Add_Indian_Vidhansabha_Constituency_Region_Input = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_Vidhansabha_Constituency_Ref>;
};

export type Add_Indian_Vidhansabha_Constituency_Region_Payload = {
  __typename?: "Add_Indian_Vidhansabha_Constituency_Region_Payload";
  _Indian_Vidhansabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Indian_Vidhansabha_Constituency_Region_Payload_Indian_Vidhansabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export type Add_Language_Input = {
  name_en: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  scripts?: InputMaybe<Array<InputMaybe<_Script_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type Add_Language_Payload = {
  __typename?: "Add_Language_Payload";
  _Language_?: Maybe<Array<Maybe<_Language_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Language_Payload_Language_Args = {
  filter?: InputMaybe<_Language_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Order>;
};

export type Add_Language_Script_Input = {
  language: _Language_Ref;
  name_en: Scalars["String"]["input"];
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  script: _Script_Ref;
};

export type Add_Language_Script_Payload = {
  __typename?: "Add_Language_Script_Payload";
  _Language_Script_?: Maybe<Array<Maybe<_Language_Script_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Language_Script_Payload_Language_Script_Args = {
  filter?: InputMaybe<_Language_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Script_Order>;
};

export type Add_Name_Input = {
  case_sensitive?: InputMaybe<Scalars["Boolean"]["input"]>;
  country?: InputMaybe<Array<InputMaybe<_Country_Ref>>>;
  country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  country_government?: InputMaybe<Array<InputMaybe<_Country_Government_Ref>>>;
  government_system_type_authority_concentration?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Concentration_Ref>>
  >;
  government_system_type_authority_distribution?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Distribution_Ref>>
  >;
  government_system_type_authority_source?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Source_Ref>>
  >;
  government_system_type_authority_status?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Status_Ref>>
  >;
  government_system_type_autocratic?: InputMaybe<Array<InputMaybe<_Government_System_Types_Autocratic_Ref>>>;
  government_system_type_democracy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Ref>>>;
  government_system_type_economic_system?: InputMaybe<Array<InputMaybe<_Government_System_Types_Economic_System_Ref>>>;
  government_system_type_head_of_state_or_government?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentRef>>
  >;
  government_system_type_monarchy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Monarchy_Ref>>>;
  government_system_type_oligarchy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Oligarchy_Ref>>>;
  government_system_type_partisan_systems?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Partisan_Systems_Ref>>
  >;
  government_system_type_religion?: InputMaybe<Array<InputMaybe<_Government_System_Types_Religion_Ref>>>;
  indian_district?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  indian_government_official_role?: InputMaybe<Array<InputMaybe<_Indian_Government_Official_Role_Ref>>>;
  indian_legal_document?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_Ref>>>;
  indian_loksabha_constituency?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  indian_loksabha_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Ref>>>;
  indian_political_party?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Ref>>>;
  indian_state_union_territory?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  indian_union_government_department?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  indian_union_government_ministry?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  indian_union_parliament_loksabha?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  indian_vidhansabha_constituency?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
  language?: InputMaybe<Array<InputMaybe<_Language_Ref>>>;
  language_script?: InputMaybe<Array<InputMaybe<_Language_Script_Ref>>>;
  name: Scalars["String"]["input"];
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  person?: InputMaybe<Array<InputMaybe<_Person_Ref>>>;
  public_policy_domain?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  script?: InputMaybe<Array<InputMaybe<_Script_Ref>>>;
};

export type Add_Name_Payload = {
  __typename?: "Add_Name_Payload";
  _Name_?: Maybe<Array<Maybe<_Name_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Name_Payload_Name_Args = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type Add_Node_Update_Input = {
  comment?: InputMaybe<Scalars["String"]["input"]>;
  updated_on?: InputMaybe<Scalars["DateTime"]["input"]>;
};

export type Add_Node_Update_Payload = {
  __typename?: "Add_Node_Update_Payload";
  _Node_Update_?: Maybe<Array<Maybe<_Node_Update_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Node_Update_Payload_Node_Update_Args = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type Add_Person_Input = {
  born?: InputMaybe<_Date_Time_Ref>;
  died?: InputMaybe<_Date_Time_Ref>;
  indian_politician?: InputMaybe<_Indian_Politician_Ref>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type Add_Person_Payload = {
  __typename?: "Add_Person_Payload";
  _Person_?: Maybe<Array<Maybe<_Person_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Person_Payload_Person_Args = {
  filter?: InputMaybe<_Person_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Person_Order>;
};

export type Add_Public_Policy_Domain_Government_Ministries_Departments_Input = {
  indian_union_government_departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  indian_union_government_ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  name_id: Scalars["String"]["input"];
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  public_policy_domain?: InputMaybe<_Public_Policy_Domain_Ref>;
};

export type Add_Public_Policy_Domain_Government_Ministries_Departments_Payload = {
  __typename?: "Add_Public_Policy_Domain_Government_Ministries_Departments_Payload";
  _Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<
    Array<Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Public_Policy_Domain_Government_Ministries_Departments_Payload_Public_Policy_Domain_Government_Ministries_Departments_Args =
  {
    filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
  };

export type Add_Public_Policy_Domain_Input = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_ministries_departments?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>;
  name_id: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type Add_Public_Policy_Domain_Payload = {
  __typename?: "Add_Public_Policy_Domain_Payload";
  _Public_Policy_Domain_?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Public_Policy_Domain_Payload_Public_Policy_Domain_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type Add_Script_Input = {
  languages?: InputMaybe<Array<InputMaybe<_Language_Ref>>>;
  name_en: Scalars["String"]["input"];
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type Add_Script_Payload = {
  __typename?: "Add_Script_Payload";
  _Script_?: Maybe<Array<Maybe<_Script_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Add_Script_Payload_Script_Args = {
  filter?: InputMaybe<_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Script_Order>;
};

export type AuthRule = {
  and?: InputMaybe<Array<InputMaybe<AuthRule>>>;
  not?: InputMaybe<AuthRule>;
  or?: InputMaybe<Array<InputMaybe<AuthRule>>>;
  rule?: InputMaybe<Scalars["String"]["input"]>;
};

export type ContainsFilter = {
  point?: InputMaybe<PointRef>;
  polygon?: InputMaybe<PolygonRef>;
};

export type CustomHttp = {
  body?: InputMaybe<Scalars["String"]["input"]>;
  forwardHeaders?: InputMaybe<Array<Scalars["String"]["input"]>>;
  graphql?: InputMaybe<Scalars["String"]["input"]>;
  introspectionHeaders?: InputMaybe<Array<Scalars["String"]["input"]>>;
  method: HttpMethod;
  mode?: InputMaybe<Mode>;
  secretHeaders?: InputMaybe<Array<Scalars["String"]["input"]>>;
  skipIntrospection?: InputMaybe<Scalars["Boolean"]["input"]>;
  url: Scalars["String"]["input"];
};

export type DateTimeFilter = {
  between?: InputMaybe<DateTimeRange>;
  eq?: InputMaybe<Scalars["DateTime"]["input"]>;
  ge?: InputMaybe<Scalars["DateTime"]["input"]>;
  gt?: InputMaybe<Scalars["DateTime"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["DateTime"]["input"]>>>;
  le?: InputMaybe<Scalars["DateTime"]["input"]>;
  lt?: InputMaybe<Scalars["DateTime"]["input"]>;
};

export type DateTimeRange = {
  max: Scalars["DateTime"]["input"];
  min: Scalars["DateTime"]["input"];
};

export enum Date_Time_Precision_Category {
  Day = "Day",
  Hour = "Hour",
  Minute = "Minute",
  Month = "Month",
  Second = "Second",
  Year = "Year",
}

export type Date_Time_Precision_Category_Exact = {
  between?: InputMaybe<Date_Time_Precision_Category>;
  eq?: InputMaybe<Date_Time_Precision_Category>;
  ge?: InputMaybe<Date_Time_Precision_Category>;
  gt?: InputMaybe<Date_Time_Precision_Category>;
  in?: InputMaybe<Array<InputMaybe<Date_Time_Precision_Category>>>;
  le?: InputMaybe<Date_Time_Precision_Category>;
  lt?: InputMaybe<Date_Time_Precision_Category>;
};

export type DeleteAccountPayload = {
  __typename?: "DeleteAccountPayload";
  account?: Maybe<Array<Maybe<Account>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type DeleteAccountPayloadAccountArgs = {
  filter?: InputMaybe<AccountFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<AccountOrder>;
};

export type DeleteSessionPayload = {
  __typename?: "DeleteSessionPayload";
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
  session?: Maybe<Array<Maybe<Session>>>;
};

export type DeleteSessionPayloadSessionArgs = {
  filter?: InputMaybe<SessionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<SessionOrder>;
};

export type DeleteUserPayload = {
  __typename?: "DeleteUserPayload";
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
  user?: Maybe<Array<Maybe<User>>>;
};

export type DeleteUserPayloadUserArgs = {
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<UserOrder>;
};

export type DeleteVerificationTokenPayload = {
  __typename?: "DeleteVerificationTokenPayload";
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
  verificationToken?: Maybe<Array<Maybe<VerificationToken>>>;
};

export type DeleteVerificationTokenPayloadVerificationTokenArgs = {
  filter?: InputMaybe<VerificationTokenFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<VerificationTokenOrder>;
};

export type Delete_Country_Event_Payload = {
  __typename?: "Delete_Country_Event_Payload";
  _Country_Event_?: Maybe<Array<Maybe<_Country_Event_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Country_Event_Payload_Country_Event_Args = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type Delete_Country_Government_Payload = {
  __typename?: "Delete_Country_Government_Payload";
  _Country_Government_?: Maybe<Array<Maybe<_Country_Government_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Country_Government_Payload_Country_Government_Args = {
  filter?: InputMaybe<_Country_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Government_Order>;
};

export type Delete_Country_Payload = {
  __typename?: "Delete_Country_Payload";
  _Country_?: Maybe<Array<Maybe<_Country_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Country_Payload_Country_Args = {
  filter?: InputMaybe<_Country_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Order>;
};

export type Delete_Country_Region_Payload = {
  __typename?: "Delete_Country_Region_Payload";
  _Country_Region_?: Maybe<Array<Maybe<_Country_Region_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Country_Region_Payload_Country_Region_Args = {
  filter?: InputMaybe<_Country_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Region_Order>;
};

export type Delete_Date_Time_Payload = {
  __typename?: "Delete_Date_Time_Payload";
  _Date_Time_?: Maybe<Array<Maybe<_Date_Time_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Date_Time_Payload_Date_Time_Args = {
  filter?: InputMaybe<_Date_Time_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Date_Time_Order>;
};

export type Delete_Geo_Payload = {
  __typename?: "Delete_Geo_Payload";
  _Geo_?: Maybe<Array<Maybe<_Geo_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Geo_Payload_Geo_Args = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type Delete_Government_System_Type_Payload = {
  __typename?: "Delete_Government_System_Type_Payload";
  _Government_System_Type_?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Type_Payload_Government_System_Type_Args = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type Delete_Government_System_Types_Authority_Concentration_Payload = {
  __typename?: "Delete_Government_System_Types_Authority_Concentration_Payload";
  _Government_System_Types_Authority_Concentration_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Concentration_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Authority_Concentration_Payload_Government_System_Types_Authority_Concentration_Args =
  {
    filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
  };

export type Delete_Government_System_Types_Authority_Distribution_Payload = {
  __typename?: "Delete_Government_System_Types_Authority_Distribution_Payload";
  _Government_System_Types_Authority_Distribution_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Distribution_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Authority_Distribution_Payload_Government_System_Types_Authority_Distribution_Args =
  {
    filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Authority_Distribution_Order>;
  };

export type Delete_Government_System_Types_Authority_Source_Payload = {
  __typename?: "Delete_Government_System_Types_Authority_Source_Payload";
  _Government_System_Types_Authority_Source_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Source_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Authority_Source_Payload_Government_System_Types_Authority_Source_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export type Delete_Government_System_Types_Authority_Status_Payload = {
  __typename?: "Delete_Government_System_Types_Authority_Status_Payload";
  _Government_System_Types_Authority_Status_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Status_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Authority_Status_Payload_Government_System_Types_Authority_Status_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export type Delete_Government_System_Types_Autocratic_Payload = {
  __typename?: "Delete_Government_System_Types_Autocratic_Payload";
  _Government_System_Types_Autocratic_?: Maybe<Array<Maybe<_Government_System_Types_Autocratic_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Autocratic_Payload_Government_System_Types_Autocratic_Args = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Autocratic_Order>;
};

export type Delete_Government_System_Types_Democracy_Payload = {
  __typename?: "Delete_Government_System_Types_Democracy_Payload";
  _Government_System_Types_Democracy_?: Maybe<Array<Maybe<_Government_System_Types_Democracy_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Democracy_Payload_Government_System_Types_Democracy_Args = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export type Delete_Government_System_Types_Economic_System_Payload = {
  __typename?: "Delete_Government_System_Types_Economic_System_Payload";
  _Government_System_Types_Economic_System_?: Maybe<Array<Maybe<_Government_System_Types_Economic_System_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Economic_System_Payload_Government_System_Types_Economic_System_Args = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export type Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload = {
  __typename?: "Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload";
  _Government_System_Types_Head_Of_State_Or_Government?: Maybe<
    Array<Maybe<_Government_System_Types_Head_Of_State_Or_Government>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload_Government_System_Types_Head_Of_State_Or_GovernmentArgs =
  {
    filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrder>;
  };

export type Delete_Government_System_Types_Monarchy_Payload = {
  __typename?: "Delete_Government_System_Types_Monarchy_Payload";
  _Government_System_Types_Monarchy_?: Maybe<Array<Maybe<_Government_System_Types_Monarchy_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Monarchy_Payload_Government_System_Types_Monarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Monarchy_Order>;
};

export type Delete_Government_System_Types_Oligarchy_Payload = {
  __typename?: "Delete_Government_System_Types_Oligarchy_Payload";
  _Government_System_Types_Oligarchy_?: Maybe<Array<Maybe<_Government_System_Types_Oligarchy_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Oligarchy_Payload_Government_System_Types_Oligarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Oligarchy_Order>;
};

export type Delete_Government_System_Types_Partisan_Systems_Payload = {
  __typename?: "Delete_Government_System_Types_Partisan_Systems_Payload";
  _Government_System_Types_Partisan_Systems_?: Maybe<Array<Maybe<_Government_System_Types_Partisan_Systems_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Partisan_Systems_Payload_Government_System_Types_Partisan_Systems_Args = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Partisan_Systems_Order>;
};

export type Delete_Government_System_Types_Religion_Payload = {
  __typename?: "Delete_Government_System_Types_Religion_Payload";
  _Government_System_Types_Religion_?: Maybe<Array<Maybe<_Government_System_Types_Religion_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Government_System_Types_Religion_Payload_Government_System_Types_Religion_Args = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Religion_Order>;
};

export type Delete_Indian_Administrative_DivisionsPayload = {
  __typename?: "Delete_Indian_Administrative_DivisionsPayload";
  _Indian_Administrative_Divisions?: Maybe<Array<Maybe<_Indian_Administrative_Divisions>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Administrative_DivisionsPayload_Indian_Administrative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Delete_Indian_District_Payload = {
  __typename?: "Delete_Indian_District_Payload";
  _Indian_District_?: Maybe<Array<Maybe<_Indian_District_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_District_Payload_Indian_District_Args = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type Delete_Indian_District_Region_Payload = {
  __typename?: "Delete_Indian_District_Region_Payload";
  _Indian_District_Region_?: Maybe<Array<Maybe<_Indian_District_Region_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_District_Region_Payload_Indian_District_Region_Args = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Region_Order>;
};

export type Delete_Indian_Government_Official_Role_Payload = {
  __typename?: "Delete_Indian_Government_Official_Role_Payload";
  _Indian_Government_Official_Role_?: Maybe<Array<Maybe<_Indian_Government_Official_Role_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Government_Official_Role_Payload_Indian_Government_Official_Role_Args = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_Official_Role_Order>;
};

export type Delete_Indian_Government_System_Payload = {
  __typename?: "Delete_Indian_Government_System_Payload";
  _Indian_Government_System_?: Maybe<Array<Maybe<_Indian_Government_System_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Government_System_Payload_Indian_Government_System_Args = {
  filter?: InputMaybe<_Indian_Government_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_System_Order>;
};

export type Delete_Indian_Legal_Document_Payload = {
  __typename?: "Delete_Indian_Legal_Document_Payload";
  _Indian_Legal_Document_?: Maybe<Array<Maybe<_Indian_Legal_Document_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Legal_Document_Payload_Indian_Legal_Document_Args = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Legal_Document_Order>;
};

export type Delete_Indian_Legislative_DivisionsPayload = {
  __typename?: "Delete_Indian_Legislative_DivisionsPayload";
  _Indian_Legislative_Divisions?: Maybe<Array<Maybe<_Indian_Legislative_Divisions>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Legislative_DivisionsPayload_Indian_Legislative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Legislative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload = {
  __typename?: "Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload";
  _Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload_Indian_Loksabha_Constituency_Election_Candidate_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
  };

export type Delete_Indian_Loksabha_Constituency_Election_Payload = {
  __typename?: "Delete_Indian_Loksabha_Constituency_Election_Payload";
  _Indian_Loksabha_Constituency_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Payload_Indian_Loksabha_Constituency_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload = {
  __typename?: "Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload";
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order>;
  };

export type Delete_Indian_Loksabha_Constituency_Election_Result_Payload = {
  __typename?: "Delete_Indian_Loksabha_Constituency_Election_Result_Payload";
  _Indian_Loksabha_Constituency_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Result_Payload_Indian_Loksabha_Constituency_Election_Result_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Order>;
  };

export type Delete_Indian_Loksabha_Constituency_Payload = {
  __typename?: "Delete_Indian_Loksabha_Constituency_Payload";
  _Indian_Loksabha_Constituency_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Constituency_Payload_Indian_Loksabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type Delete_Indian_Loksabha_Constituency_Region_Payload = {
  __typename?: "Delete_Indian_Loksabha_Constituency_Region_Payload";
  _Indian_Loksabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Region_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Constituency_Region_Payload_Indian_Loksabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export type Delete_Indian_Loksabha_Election_Payload = {
  __typename?: "Delete_Indian_Loksabha_Election_Payload";
  _Indian_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Election_Payload_Indian_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export type Delete_Indian_Loksabha_Election_Phase_Payload = {
  __typename?: "Delete_Indian_Loksabha_Election_Phase_Payload";
  _Indian_Loksabha_Election_Phase_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Phase_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Election_Phase_Payload_Indian_Loksabha_Election_Phase_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Phase_Order>;
};

export type Delete_Indian_Loksabha_Election_Result_Payload = {
  __typename?: "Delete_Indian_Loksabha_Election_Result_Payload";
  _Indian_Loksabha_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Result_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Election_Result_Payload_Indian_Loksabha_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Result_Order>;
};

export type Delete_Indian_Loksabha_Member_Payload = {
  __typename?: "Delete_Indian_Loksabha_Member_Payload";
  _Indian_Loksabha_Member_?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Member_Payload_Indian_Loksabha_Member_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type Delete_Indian_Loksabha_Payload = {
  __typename?: "Delete_Indian_Loksabha_Payload";
  _Indian_Loksabha_?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Payload_Indian_Loksabha_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type Delete_Indian_Loksabha_Session_Payload = {
  __typename?: "Delete_Indian_Loksabha_Session_Payload";
  _Indian_Loksabha_Session_?: Maybe<Array<Maybe<_Indian_Loksabha_Session_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Loksabha_Session_Payload_Indian_Loksabha_Session_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Session_Order>;
};

export type Delete_Indian_Political_Party_Loksabha_Election_Payload = {
  __typename?: "Delete_Indian_Political_Party_Loksabha_Election_Payload";
  _Indian_Political_Party_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Political_Party_Loksabha_Election_Payload_Indian_Political_Party_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type Delete_Indian_Political_Party_Member_Payload = {
  __typename?: "Delete_Indian_Political_Party_Member_Payload";
  _Indian_Political_Party_Member_?: Maybe<Array<Maybe<_Indian_Political_Party_Member_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Political_Party_Member_Payload_Indian_Political_Party_Member_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export type Delete_Indian_Political_Party_Payload = {
  __typename?: "Delete_Indian_Political_Party_Payload";
  _Indian_Political_Party_?: Maybe<Array<Maybe<_Indian_Political_Party_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Political_Party_Payload_Indian_Political_Party_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Order>;
};

export type Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload = {
  __typename?: "Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload";
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<
    Array<Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args =
  {
    filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order>;
  };

export type Delete_Indian_Politician_Payload = {
  __typename?: "Delete_Indian_Politician_Payload";
  _Indian_Politician_?: Maybe<Array<Maybe<_Indian_Politician_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Politician_Payload_Indian_Politician_Args = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Politician_Order>;
};

export type Delete_Indian_Prime_Minister_Payload = {
  __typename?: "Delete_Indian_Prime_Minister_Payload";
  _Indian_Prime_Minister_?: Maybe<Array<Maybe<_Indian_Prime_Minister_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Prime_Minister_Payload_Indian_Prime_Minister_Args = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export type Delete_Indian_State_Union_Territory_Payload = {
  __typename?: "Delete_Indian_State_Union_Territory_Payload";
  _Indian_State_Union_Territory_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_State_Union_Territory_Payload_Indian_State_Union_Territory_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type Delete_Indian_State_Union_Territory_Region_Payload = {
  __typename?: "Delete_Indian_State_Union_Territory_Region_Payload";
  _Indian_State_Union_Territory_Region_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_Region_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_State_Union_Territory_Region_Payload_Indian_State_Union_Territory_Region_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export type Delete_Indian_Union_Council_Of_Ministers_Payload = {
  __typename?: "Delete_Indian_Union_Council_Of_Ministers_Payload";
  _Indian_Union_Council_Of_Ministers_?: Maybe<Array<Maybe<_Indian_Union_Council_Of_Ministers_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Council_Of_Ministers_Payload_Indian_Union_Council_Of_Ministers_Args = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Council_Of_Ministers_Order>;
};

export type Delete_Indian_Union_Government_Cabinet_Minister_Payload = {
  __typename?: "Delete_Indian_Union_Government_Cabinet_Minister_Payload";
  _Indian_Union_Government_Cabinet_Minister_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Cabinet_Minister_Payload_Indian_Union_Government_Cabinet_Minister_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type Delete_Indian_Union_Government_Cabinet_Payload = {
  __typename?: "Delete_Indian_Union_Government_Cabinet_Payload";
  _Indian_Union_Government_Cabinet_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Cabinet_Payload_Indian_Union_Government_Cabinet_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Order>;
};

export type Delete_Indian_Union_Government_Department_Payload = {
  __typename?: "Delete_Indian_Union_Government_Department_Payload";
  _Indian_Union_Government_Department_?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Department_Payload_Indian_Union_Government_Department_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload = {
  __typename?: "Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload";
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args =
  {
    filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
  };

export type Delete_Indian_Union_Government_Minister_Of_State_Payload = {
  __typename?: "Delete_Indian_Union_Government_Minister_Of_State_Payload";
  _Indian_Union_Government_Minister_Of_State_?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Minister_Of_State_Payload_Indian_Union_Government_Minister_Of_State_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type Delete_Indian_Union_Government_Ministry_Payload = {
  __typename?: "Delete_Indian_Union_Government_Ministry_Payload";
  _Indian_Union_Government_Ministry_?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Ministry_Payload_Indian_Union_Government_Ministry_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type Delete_Indian_Union_Government_Payload = {
  __typename?: "Delete_Indian_Union_Government_Payload";
  _Indian_Union_Government_?: Maybe<Array<Maybe<_Indian_Union_Government_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Union_Government_Payload_Indian_Union_Government_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Order>;
};

export type Delete_Indian_Vidhansabha_Constituency_Payload = {
  __typename?: "Delete_Indian_Vidhansabha_Constituency_Payload";
  _Indian_Vidhansabha_Constituency_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Vidhansabha_Constituency_Payload_Indian_Vidhansabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type Delete_Indian_Vidhansabha_Constituency_Region_Payload = {
  __typename?: "Delete_Indian_Vidhansabha_Constituency_Region_Payload";
  _Indian_Vidhansabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_Region_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Indian_Vidhansabha_Constituency_Region_Payload_Indian_Vidhansabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export type Delete_Language_Payload = {
  __typename?: "Delete_Language_Payload";
  _Language_?: Maybe<Array<Maybe<_Language_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Language_Payload_Language_Args = {
  filter?: InputMaybe<_Language_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Order>;
};

export type Delete_Language_Script_Payload = {
  __typename?: "Delete_Language_Script_Payload";
  _Language_Script_?: Maybe<Array<Maybe<_Language_Script_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Language_Script_Payload_Language_Script_Args = {
  filter?: InputMaybe<_Language_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Script_Order>;
};

export type Delete_Name_Payload = {
  __typename?: "Delete_Name_Payload";
  _Name_?: Maybe<Array<Maybe<_Name_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Name_Payload_Name_Args = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type Delete_Node_Update_Payload = {
  __typename?: "Delete_Node_Update_Payload";
  _Node_Update_?: Maybe<Array<Maybe<_Node_Update_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Node_Update_Payload_Node_Update_Args = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type Delete_Person_Payload = {
  __typename?: "Delete_Person_Payload";
  _Person_?: Maybe<Array<Maybe<_Person_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Person_Payload_Person_Args = {
  filter?: InputMaybe<_Person_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Person_Order>;
};

export type Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload = {
  __typename?: "Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload";
  _Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<
    Array<Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>>
  >;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload_Public_Policy_Domain_Government_Ministries_Departments_Args =
  {
    filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
  };

export type Delete_Public_Policy_Domain_Payload = {
  __typename?: "Delete_Public_Policy_Domain_Payload";
  _Public_Policy_Domain_?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Public_Policy_Domain_Payload_Public_Policy_Domain_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type Delete_Script_Payload = {
  __typename?: "Delete_Script_Payload";
  _Script_?: Maybe<Array<Maybe<_Script_>>>;
  msg?: Maybe<Scalars["String"]["output"]>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Delete_Script_Payload_Script_Args = {
  filter?: InputMaybe<_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Script_Order>;
};

export type DgraphDefault = {
  value?: InputMaybe<Scalars["String"]["input"]>;
};

export enum DgraphIndex {
  Bool = "bool",
  Day = "day",
  Exact = "exact",
  Float = "float",
  Fulltext = "fulltext",
  Geo = "geo",
  Hash = "hash",
  Hnsw = "hnsw",
  Hour = "hour",
  Int = "int",
  Int64 = "int64",
  Month = "month",
  Regexp = "regexp",
  Term = "term",
  Trigram = "trigram",
  Year = "year",
}

export type FloatFilter = {
  between?: InputMaybe<FloatRange>;
  eq?: InputMaybe<Scalars["Float"]["input"]>;
  ge?: InputMaybe<Scalars["Float"]["input"]>;
  gt?: InputMaybe<Scalars["Float"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Float"]["input"]>>>;
  le?: InputMaybe<Scalars["Float"]["input"]>;
  lt?: InputMaybe<Scalars["Float"]["input"]>;
};

export type FloatRange = {
  max: Scalars["Float"]["input"];
  min: Scalars["Float"]["input"];
};

export type GenerateMutationParams = {
  add?: InputMaybe<Scalars["Boolean"]["input"]>;
  delete?: InputMaybe<Scalars["Boolean"]["input"]>;
  update?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type GenerateQueryParams = {
  aggregate?: InputMaybe<Scalars["Boolean"]["input"]>;
  get?: InputMaybe<Scalars["Boolean"]["input"]>;
  password?: InputMaybe<Scalars["Boolean"]["input"]>;
  query?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export enum HttpMethod {
  Delete = "DELETE",
  Get = "GET",
  Patch = "PATCH",
  Post = "POST",
  Put = "PUT",
}

export type Int64Filter = {
  between?: InputMaybe<Int64Range>;
  eq?: InputMaybe<Scalars["Int64"]["input"]>;
  ge?: InputMaybe<Scalars["Int64"]["input"]>;
  gt?: InputMaybe<Scalars["Int64"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Int64"]["input"]>>>;
  le?: InputMaybe<Scalars["Int64"]["input"]>;
  lt?: InputMaybe<Scalars["Int64"]["input"]>;
};

export type Int64Range = {
  max: Scalars["Int64"]["input"];
  min: Scalars["Int64"]["input"];
};

export type IntFilter = {
  between?: InputMaybe<IntRange>;
  eq?: InputMaybe<Scalars["Int"]["input"]>;
  ge?: InputMaybe<Scalars["Int"]["input"]>;
  gt?: InputMaybe<Scalars["Int"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Int"]["input"]>>>;
  le?: InputMaybe<Scalars["Int"]["input"]>;
  lt?: InputMaybe<Scalars["Int"]["input"]>;
};

export type IntRange = {
  max: Scalars["Int"]["input"];
  min: Scalars["Int"]["input"];
};

export type IntersectsFilter = {
  multiPolygon?: InputMaybe<MultiPolygonRef>;
  polygon?: InputMaybe<PolygonRef>;
};

export enum Mode {
  Batch = "BATCH",
  Single = "SINGLE",
}

export type MultiPolygon = {
  __typename?: "MultiPolygon";
  polygons: Array<Polygon>;
};

export type MultiPolygonRef = {
  polygons: Array<PolygonRef>;
};

export type Mutation = {
  __typename?: "Mutation";
  addAccount?: Maybe<AddAccountPayload>;
  addSession?: Maybe<AddSessionPayload>;
  addUser?: Maybe<AddUserPayload>;
  addVerificationToken?: Maybe<AddVerificationTokenPayload>;
  add_Country_?: Maybe<Add_Country_Payload>;
  add_Country_Event_?: Maybe<Add_Country_Event_Payload>;
  add_Country_Government_?: Maybe<Add_Country_Government_Payload>;
  add_Country_Region_?: Maybe<Add_Country_Region_Payload>;
  add_Date_Time_?: Maybe<Add_Date_Time_Payload>;
  add_Geo_?: Maybe<Add_Geo_Payload>;
  add_Government_System_Type_?: Maybe<Add_Government_System_Type_Payload>;
  add_Government_System_Types_Authority_Concentration_?: Maybe<Add_Government_System_Types_Authority_Concentration_Payload>;
  add_Government_System_Types_Authority_Distribution_?: Maybe<Add_Government_System_Types_Authority_Distribution_Payload>;
  add_Government_System_Types_Authority_Source_?: Maybe<Add_Government_System_Types_Authority_Source_Payload>;
  add_Government_System_Types_Authority_Status_?: Maybe<Add_Government_System_Types_Authority_Status_Payload>;
  add_Government_System_Types_Autocratic_?: Maybe<Add_Government_System_Types_Autocratic_Payload>;
  add_Government_System_Types_Democracy_?: Maybe<Add_Government_System_Types_Democracy_Payload>;
  add_Government_System_Types_Economic_System_?: Maybe<Add_Government_System_Types_Economic_System_Payload>;
  add_Government_System_Types_Head_Of_State_Or_Government?: Maybe<Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload>;
  add_Government_System_Types_Monarchy_?: Maybe<Add_Government_System_Types_Monarchy_Payload>;
  add_Government_System_Types_Oligarchy_?: Maybe<Add_Government_System_Types_Oligarchy_Payload>;
  add_Government_System_Types_Partisan_Systems_?: Maybe<Add_Government_System_Types_Partisan_Systems_Payload>;
  add_Government_System_Types_Religion_?: Maybe<Add_Government_System_Types_Religion_Payload>;
  add_Indian_Administrative_Divisions?: Maybe<Add_Indian_Administrative_DivisionsPayload>;
  add_Indian_District_?: Maybe<Add_Indian_District_Payload>;
  add_Indian_District_Region_?: Maybe<Add_Indian_District_Region_Payload>;
  add_Indian_Government_Official_Role_?: Maybe<Add_Indian_Government_Official_Role_Payload>;
  add_Indian_Government_System_?: Maybe<Add_Indian_Government_System_Payload>;
  add_Indian_Legal_Document_?: Maybe<Add_Indian_Legal_Document_Payload>;
  add_Indian_Legislative_Divisions?: Maybe<Add_Indian_Legislative_DivisionsPayload>;
  add_Indian_Loksabha_?: Maybe<Add_Indian_Loksabha_Payload>;
  add_Indian_Loksabha_Constituency_?: Maybe<Add_Indian_Loksabha_Constituency_Payload>;
  add_Indian_Loksabha_Constituency_Election_?: Maybe<Add_Indian_Loksabha_Constituency_Election_Payload>;
  add_Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<Add_Indian_Loksabha_Constituency_Election_Candidate_Payload>;
  add_Indian_Loksabha_Constituency_Election_Result_?: Maybe<Add_Indian_Loksabha_Constituency_Election_Result_Payload>;
  add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload>;
  add_Indian_Loksabha_Constituency_Region_?: Maybe<Add_Indian_Loksabha_Constituency_Region_Payload>;
  add_Indian_Loksabha_Election_?: Maybe<Add_Indian_Loksabha_Election_Payload>;
  add_Indian_Loksabha_Election_Phase_?: Maybe<Add_Indian_Loksabha_Election_Phase_Payload>;
  add_Indian_Loksabha_Election_Result_?: Maybe<Add_Indian_Loksabha_Election_Result_Payload>;
  add_Indian_Loksabha_Member_?: Maybe<Add_Indian_Loksabha_Member_Payload>;
  add_Indian_Loksabha_Session_?: Maybe<Add_Indian_Loksabha_Session_Payload>;
  add_Indian_Political_Party_?: Maybe<Add_Indian_Political_Party_Payload>;
  add_Indian_Political_Party_Loksabha_Election_?: Maybe<Add_Indian_Political_Party_Loksabha_Election_Payload>;
  add_Indian_Political_Party_Member_?: Maybe<Add_Indian_Political_Party_Member_Payload>;
  add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload>;
  add_Indian_Politician_?: Maybe<Add_Indian_Politician_Payload>;
  add_Indian_Prime_Minister_?: Maybe<Add_Indian_Prime_Minister_Payload>;
  add_Indian_State_Union_Territory_?: Maybe<Add_Indian_State_Union_Territory_Payload>;
  add_Indian_State_Union_Territory_Region_?: Maybe<Add_Indian_State_Union_Territory_Region_Payload>;
  add_Indian_Union_Council_Of_Ministers_?: Maybe<Add_Indian_Union_Council_Of_Ministers_Payload>;
  add_Indian_Union_Government_?: Maybe<Add_Indian_Union_Government_Payload>;
  add_Indian_Union_Government_Cabinet_?: Maybe<Add_Indian_Union_Government_Cabinet_Payload>;
  add_Indian_Union_Government_Cabinet_Minister_?: Maybe<Add_Indian_Union_Government_Cabinet_Minister_Payload>;
  add_Indian_Union_Government_Department_?: Maybe<Add_Indian_Union_Government_Department_Payload>;
  add_Indian_Union_Government_Minister_Of_State_?: Maybe<Add_Indian_Union_Government_Minister_Of_State_Payload>;
  add_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload>;
  add_Indian_Union_Government_Ministry_?: Maybe<Add_Indian_Union_Government_Ministry_Payload>;
  add_Indian_Vidhansabha_Constituency_?: Maybe<Add_Indian_Vidhansabha_Constituency_Payload>;
  add_Indian_Vidhansabha_Constituency_Region_?: Maybe<Add_Indian_Vidhansabha_Constituency_Region_Payload>;
  add_Language_?: Maybe<Add_Language_Payload>;
  add_Language_Script_?: Maybe<Add_Language_Script_Payload>;
  add_Name_?: Maybe<Add_Name_Payload>;
  add_Node_Update_?: Maybe<Add_Node_Update_Payload>;
  add_Person_?: Maybe<Add_Person_Payload>;
  add_Public_Policy_Domain_?: Maybe<Add_Public_Policy_Domain_Payload>;
  add_Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<Add_Public_Policy_Domain_Government_Ministries_Departments_Payload>;
  add_Script_?: Maybe<Add_Script_Payload>;
  deleteAccount?: Maybe<DeleteAccountPayload>;
  deleteSession?: Maybe<DeleteSessionPayload>;
  deleteUser?: Maybe<DeleteUserPayload>;
  deleteVerificationToken?: Maybe<DeleteVerificationTokenPayload>;
  delete_Country_?: Maybe<Delete_Country_Payload>;
  delete_Country_Event_?: Maybe<Delete_Country_Event_Payload>;
  delete_Country_Government_?: Maybe<Delete_Country_Government_Payload>;
  delete_Country_Region_?: Maybe<Delete_Country_Region_Payload>;
  delete_Date_Time_?: Maybe<Delete_Date_Time_Payload>;
  delete_Geo_?: Maybe<Delete_Geo_Payload>;
  delete_Government_System_Type_?: Maybe<Delete_Government_System_Type_Payload>;
  delete_Government_System_Types_Authority_Concentration_?: Maybe<Delete_Government_System_Types_Authority_Concentration_Payload>;
  delete_Government_System_Types_Authority_Distribution_?: Maybe<Delete_Government_System_Types_Authority_Distribution_Payload>;
  delete_Government_System_Types_Authority_Source_?: Maybe<Delete_Government_System_Types_Authority_Source_Payload>;
  delete_Government_System_Types_Authority_Status_?: Maybe<Delete_Government_System_Types_Authority_Status_Payload>;
  delete_Government_System_Types_Autocratic_?: Maybe<Delete_Government_System_Types_Autocratic_Payload>;
  delete_Government_System_Types_Democracy_?: Maybe<Delete_Government_System_Types_Democracy_Payload>;
  delete_Government_System_Types_Economic_System_?: Maybe<Delete_Government_System_Types_Economic_System_Payload>;
  delete_Government_System_Types_Head_Of_State_Or_Government?: Maybe<Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload>;
  delete_Government_System_Types_Monarchy_?: Maybe<Delete_Government_System_Types_Monarchy_Payload>;
  delete_Government_System_Types_Oligarchy_?: Maybe<Delete_Government_System_Types_Oligarchy_Payload>;
  delete_Government_System_Types_Partisan_Systems_?: Maybe<Delete_Government_System_Types_Partisan_Systems_Payload>;
  delete_Government_System_Types_Religion_?: Maybe<Delete_Government_System_Types_Religion_Payload>;
  delete_Indian_Administrative_Divisions?: Maybe<Delete_Indian_Administrative_DivisionsPayload>;
  delete_Indian_District_?: Maybe<Delete_Indian_District_Payload>;
  delete_Indian_District_Region_?: Maybe<Delete_Indian_District_Region_Payload>;
  delete_Indian_Government_Official_Role_?: Maybe<Delete_Indian_Government_Official_Role_Payload>;
  delete_Indian_Government_System_?: Maybe<Delete_Indian_Government_System_Payload>;
  delete_Indian_Legal_Document_?: Maybe<Delete_Indian_Legal_Document_Payload>;
  delete_Indian_Legislative_Divisions?: Maybe<Delete_Indian_Legislative_DivisionsPayload>;
  delete_Indian_Loksabha_?: Maybe<Delete_Indian_Loksabha_Payload>;
  delete_Indian_Loksabha_Constituency_?: Maybe<Delete_Indian_Loksabha_Constituency_Payload>;
  delete_Indian_Loksabha_Constituency_Election_?: Maybe<Delete_Indian_Loksabha_Constituency_Election_Payload>;
  delete_Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload>;
  delete_Indian_Loksabha_Constituency_Election_Result_?: Maybe<Delete_Indian_Loksabha_Constituency_Election_Result_Payload>;
  delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload>;
  delete_Indian_Loksabha_Constituency_Region_?: Maybe<Delete_Indian_Loksabha_Constituency_Region_Payload>;
  delete_Indian_Loksabha_Election_?: Maybe<Delete_Indian_Loksabha_Election_Payload>;
  delete_Indian_Loksabha_Election_Phase_?: Maybe<Delete_Indian_Loksabha_Election_Phase_Payload>;
  delete_Indian_Loksabha_Election_Result_?: Maybe<Delete_Indian_Loksabha_Election_Result_Payload>;
  delete_Indian_Loksabha_Member_?: Maybe<Delete_Indian_Loksabha_Member_Payload>;
  delete_Indian_Loksabha_Session_?: Maybe<Delete_Indian_Loksabha_Session_Payload>;
  delete_Indian_Political_Party_?: Maybe<Delete_Indian_Political_Party_Payload>;
  delete_Indian_Political_Party_Loksabha_Election_?: Maybe<Delete_Indian_Political_Party_Loksabha_Election_Payload>;
  delete_Indian_Political_Party_Member_?: Maybe<Delete_Indian_Political_Party_Member_Payload>;
  delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload>;
  delete_Indian_Politician_?: Maybe<Delete_Indian_Politician_Payload>;
  delete_Indian_Prime_Minister_?: Maybe<Delete_Indian_Prime_Minister_Payload>;
  delete_Indian_State_Union_Territory_?: Maybe<Delete_Indian_State_Union_Territory_Payload>;
  delete_Indian_State_Union_Territory_Region_?: Maybe<Delete_Indian_State_Union_Territory_Region_Payload>;
  delete_Indian_Union_Council_Of_Ministers_?: Maybe<Delete_Indian_Union_Council_Of_Ministers_Payload>;
  delete_Indian_Union_Government_?: Maybe<Delete_Indian_Union_Government_Payload>;
  delete_Indian_Union_Government_Cabinet_?: Maybe<Delete_Indian_Union_Government_Cabinet_Payload>;
  delete_Indian_Union_Government_Cabinet_Minister_?: Maybe<Delete_Indian_Union_Government_Cabinet_Minister_Payload>;
  delete_Indian_Union_Government_Department_?: Maybe<Delete_Indian_Union_Government_Department_Payload>;
  delete_Indian_Union_Government_Minister_Of_State_?: Maybe<Delete_Indian_Union_Government_Minister_Of_State_Payload>;
  delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload>;
  delete_Indian_Union_Government_Ministry_?: Maybe<Delete_Indian_Union_Government_Ministry_Payload>;
  delete_Indian_Vidhansabha_Constituency_?: Maybe<Delete_Indian_Vidhansabha_Constituency_Payload>;
  delete_Indian_Vidhansabha_Constituency_Region_?: Maybe<Delete_Indian_Vidhansabha_Constituency_Region_Payload>;
  delete_Language_?: Maybe<Delete_Language_Payload>;
  delete_Language_Script_?: Maybe<Delete_Language_Script_Payload>;
  delete_Name_?: Maybe<Delete_Name_Payload>;
  delete_Node_Update_?: Maybe<Delete_Node_Update_Payload>;
  delete_Person_?: Maybe<Delete_Person_Payload>;
  delete_Public_Policy_Domain_?: Maybe<Delete_Public_Policy_Domain_Payload>;
  delete_Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload>;
  delete_Script_?: Maybe<Delete_Script_Payload>;
  updateAccount?: Maybe<UpdateAccountPayload>;
  updateSession?: Maybe<UpdateSessionPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
  updateVerificationToken?: Maybe<UpdateVerificationTokenPayload>;
  update_Country_?: Maybe<Update_Country_Payload>;
  update_Country_Event_?: Maybe<Update_Country_Event_Payload>;
  update_Country_Government_?: Maybe<Update_Country_Government_Payload>;
  update_Country_Region_?: Maybe<Update_Country_Region_Payload>;
  update_Date_Time_?: Maybe<Update_Date_Time_Payload>;
  update_Geo_?: Maybe<Update_Geo_Payload>;
  update_Government_System_Type_?: Maybe<Update_Government_System_Type_Payload>;
  update_Government_System_Types_Authority_Concentration_?: Maybe<Update_Government_System_Types_Authority_Concentration_Payload>;
  update_Government_System_Types_Authority_Distribution_?: Maybe<Update_Government_System_Types_Authority_Distribution_Payload>;
  update_Government_System_Types_Authority_Source_?: Maybe<Update_Government_System_Types_Authority_Source_Payload>;
  update_Government_System_Types_Authority_Status_?: Maybe<Update_Government_System_Types_Authority_Status_Payload>;
  update_Government_System_Types_Autocratic_?: Maybe<Update_Government_System_Types_Autocratic_Payload>;
  update_Government_System_Types_Democracy_?: Maybe<Update_Government_System_Types_Democracy_Payload>;
  update_Government_System_Types_Economic_System_?: Maybe<Update_Government_System_Types_Economic_System_Payload>;
  update_Government_System_Types_Head_Of_State_Or_Government?: Maybe<Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload>;
  update_Government_System_Types_Monarchy_?: Maybe<Update_Government_System_Types_Monarchy_Payload>;
  update_Government_System_Types_Oligarchy_?: Maybe<Update_Government_System_Types_Oligarchy_Payload>;
  update_Government_System_Types_Partisan_Systems_?: Maybe<Update_Government_System_Types_Partisan_Systems_Payload>;
  update_Government_System_Types_Religion_?: Maybe<Update_Government_System_Types_Religion_Payload>;
  update_Indian_Administrative_Divisions?: Maybe<Update_Indian_Administrative_DivisionsPayload>;
  update_Indian_District_?: Maybe<Update_Indian_District_Payload>;
  update_Indian_District_Region_?: Maybe<Update_Indian_District_Region_Payload>;
  update_Indian_Government_Official_Role_?: Maybe<Update_Indian_Government_Official_Role_Payload>;
  update_Indian_Government_System_?: Maybe<Update_Indian_Government_System_Payload>;
  update_Indian_Legal_Document_?: Maybe<Update_Indian_Legal_Document_Payload>;
  update_Indian_Legislative_Divisions?: Maybe<Update_Indian_Legislative_DivisionsPayload>;
  update_Indian_Loksabha_?: Maybe<Update_Indian_Loksabha_Payload>;
  update_Indian_Loksabha_Constituency_?: Maybe<Update_Indian_Loksabha_Constituency_Payload>;
  update_Indian_Loksabha_Constituency_Election_?: Maybe<Update_Indian_Loksabha_Constituency_Election_Payload>;
  update_Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<Update_Indian_Loksabha_Constituency_Election_Candidate_Payload>;
  update_Indian_Loksabha_Constituency_Election_Result_?: Maybe<Update_Indian_Loksabha_Constituency_Election_Result_Payload>;
  update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload>;
  update_Indian_Loksabha_Constituency_Region_?: Maybe<Update_Indian_Loksabha_Constituency_Region_Payload>;
  update_Indian_Loksabha_Election_?: Maybe<Update_Indian_Loksabha_Election_Payload>;
  update_Indian_Loksabha_Election_Phase_?: Maybe<Update_Indian_Loksabha_Election_Phase_Payload>;
  update_Indian_Loksabha_Election_Result_?: Maybe<Update_Indian_Loksabha_Election_Result_Payload>;
  update_Indian_Loksabha_Member_?: Maybe<Update_Indian_Loksabha_Member_Payload>;
  update_Indian_Loksabha_Session_?: Maybe<Update_Indian_Loksabha_Session_Payload>;
  update_Indian_Political_Party_?: Maybe<Update_Indian_Political_Party_Payload>;
  update_Indian_Political_Party_Loksabha_Election_?: Maybe<Update_Indian_Political_Party_Loksabha_Election_Payload>;
  update_Indian_Political_Party_Member_?: Maybe<Update_Indian_Political_Party_Member_Payload>;
  update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload>;
  update_Indian_Politician_?: Maybe<Update_Indian_Politician_Payload>;
  update_Indian_Prime_Minister_?: Maybe<Update_Indian_Prime_Minister_Payload>;
  update_Indian_State_Union_Territory_?: Maybe<Update_Indian_State_Union_Territory_Payload>;
  update_Indian_State_Union_Territory_Region_?: Maybe<Update_Indian_State_Union_Territory_Region_Payload>;
  update_Indian_Union_Council_Of_Ministers_?: Maybe<Update_Indian_Union_Council_Of_Ministers_Payload>;
  update_Indian_Union_Government_?: Maybe<Update_Indian_Union_Government_Payload>;
  update_Indian_Union_Government_Cabinet_?: Maybe<Update_Indian_Union_Government_Cabinet_Payload>;
  update_Indian_Union_Government_Cabinet_Minister_?: Maybe<Update_Indian_Union_Government_Cabinet_Minister_Payload>;
  update_Indian_Union_Government_Department_?: Maybe<Update_Indian_Union_Government_Department_Payload>;
  update_Indian_Union_Government_Minister_Of_State_?: Maybe<Update_Indian_Union_Government_Minister_Of_State_Payload>;
  update_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload>;
  update_Indian_Union_Government_Ministry_?: Maybe<Update_Indian_Union_Government_Ministry_Payload>;
  update_Indian_Vidhansabha_Constituency_?: Maybe<Update_Indian_Vidhansabha_Constituency_Payload>;
  update_Indian_Vidhansabha_Constituency_Region_?: Maybe<Update_Indian_Vidhansabha_Constituency_Region_Payload>;
  update_Language_?: Maybe<Update_Language_Payload>;
  update_Language_Script_?: Maybe<Update_Language_Script_Payload>;
  update_Name_?: Maybe<Update_Name_Payload>;
  update_Node_Update_?: Maybe<Update_Node_Update_Payload>;
  update_Person_?: Maybe<Update_Person_Payload>;
  update_Public_Policy_Domain_?: Maybe<Update_Public_Policy_Domain_Payload>;
  update_Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<Update_Public_Policy_Domain_Government_Ministries_Departments_Payload>;
  update_Script_?: Maybe<Update_Script_Payload>;
};

export type MutationAddAccountArgs = {
  input: Array<AddAccountInput>;
};

export type MutationAddSessionArgs = {
  input: Array<AddSessionInput>;
};

export type MutationAddUserArgs = {
  input: Array<AddUserInput>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAddVerificationTokenArgs = {
  input: Array<AddVerificationTokenInput>;
};

export type MutationAdd_Country_Args = {
  input: Array<Add_Country_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Country_Event_Args = {
  input: Array<Add_Country_Event_Input>;
};

export type MutationAdd_Country_Government_Args = {
  input: Array<Add_Country_Government_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Country_Region_Args = {
  input: Array<Add_Country_Region_Input>;
};

export type MutationAdd_Date_Time_Args = {
  input: Array<Add_Date_Time_Input>;
};

export type MutationAdd_Geo_Args = {
  input: Array<Add_Geo_Input>;
};

export type MutationAdd_Government_System_Type_Args = {
  input: Array<Add_Government_System_Type_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Authority_Concentration_Args = {
  input: Array<Add_Government_System_Types_Authority_Concentration_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Authority_Distribution_Args = {
  input: Array<Add_Government_System_Types_Authority_Distribution_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Authority_Source_Args = {
  input: Array<Add_Government_System_Types_Authority_Source_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Authority_Status_Args = {
  input: Array<Add_Government_System_Types_Authority_Status_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Autocratic_Args = {
  input: Array<Add_Government_System_Types_Autocratic_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Democracy_Args = {
  input: Array<Add_Government_System_Types_Democracy_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Economic_System_Args = {
  input: Array<Add_Government_System_Types_Economic_System_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Head_Of_State_Or_GovernmentArgs = {
  input: Array<Add_Government_System_Types_Head_Of_State_Or_GovernmentInput>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Monarchy_Args = {
  input: Array<Add_Government_System_Types_Monarchy_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Oligarchy_Args = {
  input: Array<Add_Government_System_Types_Oligarchy_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Partisan_Systems_Args = {
  input: Array<Add_Government_System_Types_Partisan_Systems_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Government_System_Types_Religion_Args = {
  input: Array<Add_Government_System_Types_Religion_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Administrative_DivisionsArgs = {
  input: Array<Add_Indian_Administrative_DivisionsInput>;
};

export type MutationAdd_Indian_District_Args = {
  input: Array<Add_Indian_District_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_District_Region_Args = {
  input: Array<Add_Indian_District_Region_Input>;
};

export type MutationAdd_Indian_Government_Official_Role_Args = {
  input: Array<Add_Indian_Government_Official_Role_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Government_System_Args = {
  input: Array<Add_Indian_Government_System_Input>;
};

export type MutationAdd_Indian_Legal_Document_Args = {
  input: Array<Add_Indian_Legal_Document_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Legislative_DivisionsArgs = {
  input: Array<Add_Indian_Legislative_DivisionsInput>;
};

export type MutationAdd_Indian_Loksabha_Args = {
  input: Array<Add_Indian_Loksabha_Input>;
};

export type MutationAdd_Indian_Loksabha_Constituency_Args = {
  input: Array<Add_Indian_Loksabha_Constituency_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Loksabha_Constituency_Election_Args = {
  input: Array<Add_Indian_Loksabha_Constituency_Election_Input>;
};

export type MutationAdd_Indian_Loksabha_Constituency_Election_Candidate_Args = {
  input: Array<Add_Indian_Loksabha_Constituency_Election_Candidate_Input>;
};

export type MutationAdd_Indian_Loksabha_Constituency_Election_Result_Args = {
  input: Array<Add_Indian_Loksabha_Constituency_Election_Result_Input>;
};

export type MutationAdd_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args = {
  input: Array<Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input>;
};

export type MutationAdd_Indian_Loksabha_Constituency_Region_Args = {
  input: Array<Add_Indian_Loksabha_Constituency_Region_Input>;
};

export type MutationAdd_Indian_Loksabha_Election_Args = {
  input: Array<Add_Indian_Loksabha_Election_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Loksabha_Election_Phase_Args = {
  input: Array<Add_Indian_Loksabha_Election_Phase_Input>;
};

export type MutationAdd_Indian_Loksabha_Election_Result_Args = {
  input: Array<Add_Indian_Loksabha_Election_Result_Input>;
};

export type MutationAdd_Indian_Loksabha_Member_Args = {
  input: Array<Add_Indian_Loksabha_Member_Input>;
};

export type MutationAdd_Indian_Loksabha_Session_Args = {
  input: Array<Add_Indian_Loksabha_Session_Input>;
};

export type MutationAdd_Indian_Political_Party_Args = {
  input: Array<Add_Indian_Political_Party_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Political_Party_Loksabha_Election_Args = {
  input: Array<Add_Indian_Political_Party_Loksabha_Election_Input>;
};

export type MutationAdd_Indian_Political_Party_Member_Args = {
  input: Array<Add_Indian_Political_Party_Member_Input>;
};

export type MutationAdd_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args = {
  input: Array<Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input>;
};

export type MutationAdd_Indian_Politician_Args = {
  input: Array<Add_Indian_Politician_Input>;
};

export type MutationAdd_Indian_Prime_Minister_Args = {
  input: Array<Add_Indian_Prime_Minister_Input>;
};

export type MutationAdd_Indian_State_Union_Territory_Args = {
  input: Array<Add_Indian_State_Union_Territory_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_State_Union_Territory_Region_Args = {
  input: Array<Add_Indian_State_Union_Territory_Region_Input>;
};

export type MutationAdd_Indian_Union_Council_Of_Ministers_Args = {
  input: Array<Add_Indian_Union_Council_Of_Ministers_Input>;
};

export type MutationAdd_Indian_Union_Government_Args = {
  input: Array<Add_Indian_Union_Government_Input>;
};

export type MutationAdd_Indian_Union_Government_Cabinet_Args = {
  input: Array<Add_Indian_Union_Government_Cabinet_Input>;
};

export type MutationAdd_Indian_Union_Government_Cabinet_Minister_Args = {
  input: Array<Add_Indian_Union_Government_Cabinet_Minister_Input>;
};

export type MutationAdd_Indian_Union_Government_Department_Args = {
  input: Array<Add_Indian_Union_Government_Department_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Union_Government_Minister_Of_State_Args = {
  input: Array<Add_Indian_Union_Government_Minister_Of_State_Input>;
};

export type MutationAdd_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args = {
  input: Array<Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input>;
};

export type MutationAdd_Indian_Union_Government_Ministry_Args = {
  input: Array<Add_Indian_Union_Government_Ministry_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Vidhansabha_Constituency_Args = {
  input: Array<Add_Indian_Vidhansabha_Constituency_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Indian_Vidhansabha_Constituency_Region_Args = {
  input: Array<Add_Indian_Vidhansabha_Constituency_Region_Input>;
};

export type MutationAdd_Language_Args = {
  input: Array<Add_Language_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Language_Script_Args = {
  input: Array<Add_Language_Script_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Name_Args = {
  input: Array<Add_Name_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Node_Update_Args = {
  input: Array<Add_Node_Update_Input>;
};

export type MutationAdd_Person_Args = {
  input: Array<Add_Person_Input>;
};

export type MutationAdd_Public_Policy_Domain_Args = {
  input: Array<Add_Public_Policy_Domain_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Public_Policy_Domain_Government_Ministries_Departments_Args = {
  input: Array<Add_Public_Policy_Domain_Government_Ministries_Departments_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationAdd_Script_Args = {
  input: Array<Add_Script_Input>;
  upsert?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type MutationDeleteAccountArgs = {
  filter: AccountFilter;
};

export type MutationDeleteSessionArgs = {
  filter: SessionFilter;
};

export type MutationDeleteUserArgs = {
  filter: UserFilter;
};

export type MutationDeleteVerificationTokenArgs = {
  filter: VerificationTokenFilter;
};

export type MutationDelete_Country_Args = {
  filter: _Country_Filter;
};

export type MutationDelete_Country_Event_Args = {
  filter: _Country_Event_Filter;
};

export type MutationDelete_Country_Government_Args = {
  filter: _Country_Government_Filter;
};

export type MutationDelete_Country_Region_Args = {
  filter: _Country_Region_Filter;
};

export type MutationDelete_Date_Time_Args = {
  filter: _Date_Time_Filter;
};

export type MutationDelete_Geo_Args = {
  filter: _Geo_Filter;
};

export type MutationDelete_Government_System_Type_Args = {
  filter: _Government_System_Type_Filter;
};

export type MutationDelete_Government_System_Types_Authority_Concentration_Args = {
  filter: _Government_System_Types_Authority_Concentration_Filter;
};

export type MutationDelete_Government_System_Types_Authority_Distribution_Args = {
  filter: _Government_System_Types_Authority_Distribution_Filter;
};

export type MutationDelete_Government_System_Types_Authority_Source_Args = {
  filter: _Government_System_Types_Authority_Source_Filter;
};

export type MutationDelete_Government_System_Types_Authority_Status_Args = {
  filter: _Government_System_Types_Authority_Status_Filter;
};

export type MutationDelete_Government_System_Types_Autocratic_Args = {
  filter: _Government_System_Types_Autocratic_Filter;
};

export type MutationDelete_Government_System_Types_Democracy_Args = {
  filter: _Government_System_Types_Democracy_Filter;
};

export type MutationDelete_Government_System_Types_Economic_System_Args = {
  filter: _Government_System_Types_Economic_System_Filter;
};

export type MutationDelete_Government_System_Types_Head_Of_State_Or_GovernmentArgs = {
  filter: _Government_System_Types_Head_Of_State_Or_GovernmentFilter;
};

export type MutationDelete_Government_System_Types_Monarchy_Args = {
  filter: _Government_System_Types_Monarchy_Filter;
};

export type MutationDelete_Government_System_Types_Oligarchy_Args = {
  filter: _Government_System_Types_Oligarchy_Filter;
};

export type MutationDelete_Government_System_Types_Partisan_Systems_Args = {
  filter: _Government_System_Types_Partisan_Systems_Filter;
};

export type MutationDelete_Government_System_Types_Religion_Args = {
  filter: _Government_System_Types_Religion_Filter;
};

export type MutationDelete_Indian_Administrative_DivisionsArgs = {
  filter: _Indian_Administrative_DivisionsFilter;
};

export type MutationDelete_Indian_District_Args = {
  filter: _Indian_District_Filter;
};

export type MutationDelete_Indian_District_Region_Args = {
  filter: _Indian_District_Region_Filter;
};

export type MutationDelete_Indian_Government_Official_Role_Args = {
  filter: _Indian_Government_Official_Role_Filter;
};

export type MutationDelete_Indian_Government_System_Args = {
  filter: _Indian_Government_System_Filter;
};

export type MutationDelete_Indian_Legal_Document_Args = {
  filter: _Indian_Legal_Document_Filter;
};

export type MutationDelete_Indian_Legislative_DivisionsArgs = {
  filter: _Indian_Legislative_DivisionsFilter;
};

export type MutationDelete_Indian_Loksabha_Args = {
  filter: _Indian_Loksabha_Filter;
};

export type MutationDelete_Indian_Loksabha_Constituency_Args = {
  filter: _Indian_Loksabha_Constituency_Filter;
};

export type MutationDelete_Indian_Loksabha_Constituency_Election_Args = {
  filter: _Indian_Loksabha_Constituency_Election_Filter;
};

export type MutationDelete_Indian_Loksabha_Constituency_Election_Candidate_Args = {
  filter: _Indian_Loksabha_Constituency_Election_Candidate_Filter;
};

export type MutationDelete_Indian_Loksabha_Constituency_Election_Result_Args = {
  filter: _Indian_Loksabha_Constituency_Election_Result_Filter;
};

export type MutationDelete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args = {
  filter: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter;
};

export type MutationDelete_Indian_Loksabha_Constituency_Region_Args = {
  filter: _Indian_Loksabha_Constituency_Region_Filter;
};

export type MutationDelete_Indian_Loksabha_Election_Args = {
  filter: _Indian_Loksabha_Election_Filter;
};

export type MutationDelete_Indian_Loksabha_Election_Phase_Args = {
  filter: _Indian_Loksabha_Election_Phase_Filter;
};

export type MutationDelete_Indian_Loksabha_Election_Result_Args = {
  filter: _Indian_Loksabha_Election_Result_Filter;
};

export type MutationDelete_Indian_Loksabha_Member_Args = {
  filter: _Indian_Loksabha_Member_Filter;
};

export type MutationDelete_Indian_Loksabha_Session_Args = {
  filter: _Indian_Loksabha_Session_Filter;
};

export type MutationDelete_Indian_Political_Party_Args = {
  filter: _Indian_Political_Party_Filter;
};

export type MutationDelete_Indian_Political_Party_Loksabha_Election_Args = {
  filter: _Indian_Political_Party_Loksabha_Election_Filter;
};

export type MutationDelete_Indian_Political_Party_Member_Args = {
  filter: _Indian_Political_Party_Member_Filter;
};

export type MutationDelete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args = {
  filter: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter;
};

export type MutationDelete_Indian_Politician_Args = {
  filter: _Indian_Politician_Filter;
};

export type MutationDelete_Indian_Prime_Minister_Args = {
  filter: _Indian_Prime_Minister_Filter;
};

export type MutationDelete_Indian_State_Union_Territory_Args = {
  filter: _Indian_State_Union_Territory_Filter;
};

export type MutationDelete_Indian_State_Union_Territory_Region_Args = {
  filter: _Indian_State_Union_Territory_Region_Filter;
};

export type MutationDelete_Indian_Union_Council_Of_Ministers_Args = {
  filter: _Indian_Union_Council_Of_Ministers_Filter;
};

export type MutationDelete_Indian_Union_Government_Args = {
  filter: _Indian_Union_Government_Filter;
};

export type MutationDelete_Indian_Union_Government_Cabinet_Args = {
  filter: _Indian_Union_Government_Cabinet_Filter;
};

export type MutationDelete_Indian_Union_Government_Cabinet_Minister_Args = {
  filter: _Indian_Union_Government_Cabinet_Minister_Filter;
};

export type MutationDelete_Indian_Union_Government_Department_Args = {
  filter: _Indian_Union_Government_Department_Filter;
};

export type MutationDelete_Indian_Union_Government_Minister_Of_State_Args = {
  filter: _Indian_Union_Government_Minister_Of_State_Filter;
};

export type MutationDelete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args = {
  filter: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter;
};

export type MutationDelete_Indian_Union_Government_Ministry_Args = {
  filter: _Indian_Union_Government_Ministry_Filter;
};

export type MutationDelete_Indian_Vidhansabha_Constituency_Args = {
  filter: _Indian_Vidhansabha_Constituency_Filter;
};

export type MutationDelete_Indian_Vidhansabha_Constituency_Region_Args = {
  filter: _Indian_Vidhansabha_Constituency_Region_Filter;
};

export type MutationDelete_Language_Args = {
  filter: _Language_Filter;
};

export type MutationDelete_Language_Script_Args = {
  filter: _Language_Script_Filter;
};

export type MutationDelete_Name_Args = {
  filter: _Name_Filter;
};

export type MutationDelete_Node_Update_Args = {
  filter: _Node_Update_Filter;
};

export type MutationDelete_Person_Args = {
  filter: _Person_Filter;
};

export type MutationDelete_Public_Policy_Domain_Args = {
  filter: _Public_Policy_Domain_Filter;
};

export type MutationDelete_Public_Policy_Domain_Government_Ministries_Departments_Args = {
  filter: _Public_Policy_Domain_Government_Ministries_Departments_Filter;
};

export type MutationDelete_Script_Args = {
  filter: _Script_Filter;
};

export type MutationUpdateAccountArgs = {
  input: UpdateAccountInput;
};

export type MutationUpdateSessionArgs = {
  input: UpdateSessionInput;
};

export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type MutationUpdateVerificationTokenArgs = {
  input: UpdateVerificationTokenInput;
};

export type MutationUpdate_Country_Args = {
  input: Update_Country_Input;
};

export type MutationUpdate_Country_Event_Args = {
  input: Update_Country_Event_Input;
};

export type MutationUpdate_Country_Government_Args = {
  input: Update_Country_Government_Input;
};

export type MutationUpdate_Country_Region_Args = {
  input: Update_Country_Region_Input;
};

export type MutationUpdate_Date_Time_Args = {
  input: Update_Date_Time_Input;
};

export type MutationUpdate_Geo_Args = {
  input: Update_Geo_Input;
};

export type MutationUpdate_Government_System_Type_Args = {
  input: Update_Government_System_Type_Input;
};

export type MutationUpdate_Government_System_Types_Authority_Concentration_Args = {
  input: Update_Government_System_Types_Authority_Concentration_Input;
};

export type MutationUpdate_Government_System_Types_Authority_Distribution_Args = {
  input: Update_Government_System_Types_Authority_Distribution_Input;
};

export type MutationUpdate_Government_System_Types_Authority_Source_Args = {
  input: Update_Government_System_Types_Authority_Source_Input;
};

export type MutationUpdate_Government_System_Types_Authority_Status_Args = {
  input: Update_Government_System_Types_Authority_Status_Input;
};

export type MutationUpdate_Government_System_Types_Autocratic_Args = {
  input: Update_Government_System_Types_Autocratic_Input;
};

export type MutationUpdate_Government_System_Types_Democracy_Args = {
  input: Update_Government_System_Types_Democracy_Input;
};

export type MutationUpdate_Government_System_Types_Economic_System_Args = {
  input: Update_Government_System_Types_Economic_System_Input;
};

export type MutationUpdate_Government_System_Types_Head_Of_State_Or_GovernmentArgs = {
  input: Update_Government_System_Types_Head_Of_State_Or_GovernmentInput;
};

export type MutationUpdate_Government_System_Types_Monarchy_Args = {
  input: Update_Government_System_Types_Monarchy_Input;
};

export type MutationUpdate_Government_System_Types_Oligarchy_Args = {
  input: Update_Government_System_Types_Oligarchy_Input;
};

export type MutationUpdate_Government_System_Types_Partisan_Systems_Args = {
  input: Update_Government_System_Types_Partisan_Systems_Input;
};

export type MutationUpdate_Government_System_Types_Religion_Args = {
  input: Update_Government_System_Types_Religion_Input;
};

export type MutationUpdate_Indian_Administrative_DivisionsArgs = {
  input: Update_Indian_Administrative_DivisionsInput;
};

export type MutationUpdate_Indian_District_Args = {
  input: Update_Indian_District_Input;
};

export type MutationUpdate_Indian_District_Region_Args = {
  input: Update_Indian_District_Region_Input;
};

export type MutationUpdate_Indian_Government_Official_Role_Args = {
  input: Update_Indian_Government_Official_Role_Input;
};

export type MutationUpdate_Indian_Government_System_Args = {
  input: Update_Indian_Government_System_Input;
};

export type MutationUpdate_Indian_Legal_Document_Args = {
  input: Update_Indian_Legal_Document_Input;
};

export type MutationUpdate_Indian_Legislative_DivisionsArgs = {
  input: Update_Indian_Legislative_DivisionsInput;
};

export type MutationUpdate_Indian_Loksabha_Args = {
  input: Update_Indian_Loksabha_Input;
};

export type MutationUpdate_Indian_Loksabha_Constituency_Args = {
  input: Update_Indian_Loksabha_Constituency_Input;
};

export type MutationUpdate_Indian_Loksabha_Constituency_Election_Args = {
  input: Update_Indian_Loksabha_Constituency_Election_Input;
};

export type MutationUpdate_Indian_Loksabha_Constituency_Election_Candidate_Args = {
  input: Update_Indian_Loksabha_Constituency_Election_Candidate_Input;
};

export type MutationUpdate_Indian_Loksabha_Constituency_Election_Result_Args = {
  input: Update_Indian_Loksabha_Constituency_Election_Result_Input;
};

export type MutationUpdate_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args = {
  input: Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input;
};

export type MutationUpdate_Indian_Loksabha_Constituency_Region_Args = {
  input: Update_Indian_Loksabha_Constituency_Region_Input;
};

export type MutationUpdate_Indian_Loksabha_Election_Args = {
  input: Update_Indian_Loksabha_Election_Input;
};

export type MutationUpdate_Indian_Loksabha_Election_Phase_Args = {
  input: Update_Indian_Loksabha_Election_Phase_Input;
};

export type MutationUpdate_Indian_Loksabha_Election_Result_Args = {
  input: Update_Indian_Loksabha_Election_Result_Input;
};

export type MutationUpdate_Indian_Loksabha_Member_Args = {
  input: Update_Indian_Loksabha_Member_Input;
};

export type MutationUpdate_Indian_Loksabha_Session_Args = {
  input: Update_Indian_Loksabha_Session_Input;
};

export type MutationUpdate_Indian_Political_Party_Args = {
  input: Update_Indian_Political_Party_Input;
};

export type MutationUpdate_Indian_Political_Party_Loksabha_Election_Args = {
  input: Update_Indian_Political_Party_Loksabha_Election_Input;
};

export type MutationUpdate_Indian_Political_Party_Member_Args = {
  input: Update_Indian_Political_Party_Member_Input;
};

export type MutationUpdate_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args = {
  input: Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input;
};

export type MutationUpdate_Indian_Politician_Args = {
  input: Update_Indian_Politician_Input;
};

export type MutationUpdate_Indian_Prime_Minister_Args = {
  input: Update_Indian_Prime_Minister_Input;
};

export type MutationUpdate_Indian_State_Union_Territory_Args = {
  input: Update_Indian_State_Union_Territory_Input;
};

export type MutationUpdate_Indian_State_Union_Territory_Region_Args = {
  input: Update_Indian_State_Union_Territory_Region_Input;
};

export type MutationUpdate_Indian_Union_Council_Of_Ministers_Args = {
  input: Update_Indian_Union_Council_Of_Ministers_Input;
};

export type MutationUpdate_Indian_Union_Government_Args = {
  input: Update_Indian_Union_Government_Input;
};

export type MutationUpdate_Indian_Union_Government_Cabinet_Args = {
  input: Update_Indian_Union_Government_Cabinet_Input;
};

export type MutationUpdate_Indian_Union_Government_Cabinet_Minister_Args = {
  input: Update_Indian_Union_Government_Cabinet_Minister_Input;
};

export type MutationUpdate_Indian_Union_Government_Department_Args = {
  input: Update_Indian_Union_Government_Department_Input;
};

export type MutationUpdate_Indian_Union_Government_Minister_Of_State_Args = {
  input: Update_Indian_Union_Government_Minister_Of_State_Input;
};

export type MutationUpdate_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args = {
  input: Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input;
};

export type MutationUpdate_Indian_Union_Government_Ministry_Args = {
  input: Update_Indian_Union_Government_Ministry_Input;
};

export type MutationUpdate_Indian_Vidhansabha_Constituency_Args = {
  input: Update_Indian_Vidhansabha_Constituency_Input;
};

export type MutationUpdate_Indian_Vidhansabha_Constituency_Region_Args = {
  input: Update_Indian_Vidhansabha_Constituency_Region_Input;
};

export type MutationUpdate_Language_Args = {
  input: Update_Language_Input;
};

export type MutationUpdate_Language_Script_Args = {
  input: Update_Language_Script_Input;
};

export type MutationUpdate_Name_Args = {
  input: Update_Name_Input;
};

export type MutationUpdate_Node_Update_Args = {
  input: Update_Node_Update_Input;
};

export type MutationUpdate_Person_Args = {
  input: Update_Person_Input;
};

export type MutationUpdate_Public_Policy_Domain_Args = {
  input: Update_Public_Policy_Domain_Input;
};

export type MutationUpdate_Public_Policy_Domain_Government_Ministries_Departments_Args = {
  input: Update_Public_Policy_Domain_Government_Ministries_Departments_Input;
};

export type MutationUpdate_Script_Args = {
  input: Update_Script_Input;
};

export type NearFilter = {
  coordinate: PointRef;
  distance: Scalars["Float"]["input"];
};

export type Point = {
  __typename?: "Point";
  latitude: Scalars["Float"]["output"];
  longitude: Scalars["Float"]["output"];
};

export type PointGeoFilter = {
  near?: InputMaybe<NearFilter>;
  within?: InputMaybe<WithinFilter>;
};

export type PointList = {
  __typename?: "PointList";
  points: Array<Point>;
};

export type PointListRef = {
  points: Array<PointRef>;
};

export type PointRef = {
  latitude: Scalars["Float"]["input"];
  longitude: Scalars["Float"]["input"];
};

export type Polygon = {
  __typename?: "Polygon";
  coordinates: Array<PointList>;
};

export type PolygonGeoFilter = {
  contains?: InputMaybe<ContainsFilter>;
  intersects?: InputMaybe<IntersectsFilter>;
  near?: InputMaybe<NearFilter>;
  within?: InputMaybe<WithinFilter>;
};

export type PolygonRef = {
  coordinates: Array<PointListRef>;
};

export type Query = {
  __typename?: "Query";
  aggregateAccount?: Maybe<AccountAggregateResult>;
  aggregateSession?: Maybe<SessionAggregateResult>;
  aggregateUser?: Maybe<UserAggregateResult>;
  aggregateVerificationToken?: Maybe<VerificationTokenAggregateResult>;
  aggregate_Country_?: Maybe<_Country_AggregateResult>;
  aggregate_Country_Event_?: Maybe<_Country_Event_AggregateResult>;
  aggregate_Country_Government_?: Maybe<_Country_Government_AggregateResult>;
  aggregate_Country_Region_?: Maybe<_Country_Region_AggregateResult>;
  aggregate_Date_Time_?: Maybe<_Date_Time_AggregateResult>;
  aggregate_Geo_?: Maybe<_Geo_AggregateResult>;
  aggregate_Government_System_Type_?: Maybe<_Government_System_Type_AggregateResult>;
  aggregate_Government_System_Types_Authority_Concentration_?: Maybe<_Government_System_Types_Authority_Concentration_AggregateResult>;
  aggregate_Government_System_Types_Authority_Distribution_?: Maybe<_Government_System_Types_Authority_Distribution_AggregateResult>;
  aggregate_Government_System_Types_Authority_Source_?: Maybe<_Government_System_Types_Authority_Source_AggregateResult>;
  aggregate_Government_System_Types_Authority_Status_?: Maybe<_Government_System_Types_Authority_Status_AggregateResult>;
  aggregate_Government_System_Types_Autocratic_?: Maybe<_Government_System_Types_Autocratic_AggregateResult>;
  aggregate_Government_System_Types_Democracy_?: Maybe<_Government_System_Types_Democracy_AggregateResult>;
  aggregate_Government_System_Types_Economic_System_?: Maybe<_Government_System_Types_Economic_System_AggregateResult>;
  aggregate_Government_System_Types_Head_Of_State_Or_Government?: Maybe<_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult>;
  aggregate_Government_System_Types_Monarchy_?: Maybe<_Government_System_Types_Monarchy_AggregateResult>;
  aggregate_Government_System_Types_Oligarchy_?: Maybe<_Government_System_Types_Oligarchy_AggregateResult>;
  aggregate_Government_System_Types_Partisan_Systems_?: Maybe<_Government_System_Types_Partisan_Systems_AggregateResult>;
  aggregate_Government_System_Types_Religion_?: Maybe<_Government_System_Types_Religion_AggregateResult>;
  aggregate_Indian_Administrative_Divisions?: Maybe<_Indian_Administrative_DivisionsAggregateResult>;
  aggregate_Indian_District_?: Maybe<_Indian_District_AggregateResult>;
  aggregate_Indian_District_Region_?: Maybe<_Indian_District_Region_AggregateResult>;
  aggregate_Indian_Government_Official_Role_?: Maybe<_Indian_Government_Official_Role_AggregateResult>;
  aggregate_Indian_Government_System_?: Maybe<_Indian_Government_System_AggregateResult>;
  aggregate_Indian_Legal_Document_?: Maybe<_Indian_Legal_Document_AggregateResult>;
  aggregate_Indian_Legislative_Divisions?: Maybe<_Indian_Legislative_DivisionsAggregateResult>;
  aggregate_Indian_Loksabha_?: Maybe<_Indian_Loksabha_AggregateResult>;
  aggregate_Indian_Loksabha_Constituency_?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  aggregate_Indian_Loksabha_Constituency_Election_?: Maybe<_Indian_Loksabha_Constituency_Election_AggregateResult>;
  aggregate_Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult>;
  aggregate_Indian_Loksabha_Constituency_Election_Result_?: Maybe<_Indian_Loksabha_Constituency_Election_Result_AggregateResult>;
  aggregate_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult>;
  aggregate_Indian_Loksabha_Constituency_Region_?: Maybe<_Indian_Loksabha_Constituency_Region_AggregateResult>;
  aggregate_Indian_Loksabha_Election_?: Maybe<_Indian_Loksabha_Election_AggregateResult>;
  aggregate_Indian_Loksabha_Election_Phase_?: Maybe<_Indian_Loksabha_Election_Phase_AggregateResult>;
  aggregate_Indian_Loksabha_Election_Result_?: Maybe<_Indian_Loksabha_Election_Result_AggregateResult>;
  aggregate_Indian_Loksabha_Member_?: Maybe<_Indian_Loksabha_Member_AggregateResult>;
  aggregate_Indian_Loksabha_Session_?: Maybe<_Indian_Loksabha_Session_AggregateResult>;
  aggregate_Indian_Political_Party_?: Maybe<_Indian_Political_Party_AggregateResult>;
  aggregate_Indian_Political_Party_Loksabha_Election_?: Maybe<_Indian_Political_Party_Loksabha_Election_AggregateResult>;
  aggregate_Indian_Political_Party_Member_?: Maybe<_Indian_Political_Party_Member_AggregateResult>;
  aggregate_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult>;
  aggregate_Indian_Politician_?: Maybe<_Indian_Politician_AggregateResult>;
  aggregate_Indian_Prime_Minister_?: Maybe<_Indian_Prime_Minister_AggregateResult>;
  aggregate_Indian_State_Union_Territory_?: Maybe<_Indian_State_Union_Territory_AggregateResult>;
  aggregate_Indian_State_Union_Territory_Region_?: Maybe<_Indian_State_Union_Territory_Region_AggregateResult>;
  aggregate_Indian_Union_Council_Of_Ministers_?: Maybe<_Indian_Union_Council_Of_Ministers_AggregateResult>;
  aggregate_Indian_Union_Government_?: Maybe<_Indian_Union_Government_AggregateResult>;
  aggregate_Indian_Union_Government_Cabinet_?: Maybe<_Indian_Union_Government_Cabinet_AggregateResult>;
  aggregate_Indian_Union_Government_Cabinet_Minister_?: Maybe<_Indian_Union_Government_Cabinet_Minister_AggregateResult>;
  aggregate_Indian_Union_Government_Department_?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  aggregate_Indian_Union_Government_Minister_Of_State_?: Maybe<_Indian_Union_Government_Minister_Of_State_AggregateResult>;
  aggregate_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult>;
  aggregate_Indian_Union_Government_Ministry_?: Maybe<_Indian_Union_Government_Ministry_AggregateResult>;
  aggregate_Indian_Vidhansabha_Constituency_?: Maybe<_Indian_Vidhansabha_Constituency_AggregateResult>;
  aggregate_Indian_Vidhansabha_Constituency_Region_?: Maybe<_Indian_Vidhansabha_Constituency_Region_AggregateResult>;
  aggregate_Language_?: Maybe<_Language_AggregateResult>;
  aggregate_Language_Script_?: Maybe<_Language_Script_AggregateResult>;
  aggregate_Name_?: Maybe<_Name_AggregateResult>;
  aggregate_Node_Update_?: Maybe<_Node_Update_AggregateResult>;
  aggregate_Person_?: Maybe<_Person_AggregateResult>;
  aggregate_Public_Policy_Domain_?: Maybe<_Public_Policy_Domain_AggregateResult>;
  aggregate_Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult>;
  aggregate_Script_?: Maybe<_Script_AggregateResult>;
  getAccount?: Maybe<Account>;
  getSession?: Maybe<Session>;
  getUser?: Maybe<User>;
  getVerificationToken?: Maybe<VerificationToken>;
  get_Country_?: Maybe<_Country_>;
  get_Country_Event_?: Maybe<_Country_Event_>;
  get_Country_Government_?: Maybe<_Country_Government_>;
  get_Country_Region_?: Maybe<_Country_Region_>;
  get_Date_Time_?: Maybe<_Date_Time_>;
  get_Geo_?: Maybe<_Geo_>;
  get_Government_System_Type_?: Maybe<_Government_System_Type_>;
  get_Government_System_Types_Authority_Concentration_?: Maybe<_Government_System_Types_Authority_Concentration_>;
  get_Government_System_Types_Authority_Distribution_?: Maybe<_Government_System_Types_Authority_Distribution_>;
  get_Government_System_Types_Authority_Source_?: Maybe<_Government_System_Types_Authority_Source_>;
  get_Government_System_Types_Authority_Status_?: Maybe<_Government_System_Types_Authority_Status_>;
  get_Government_System_Types_Autocratic_?: Maybe<_Government_System_Types_Autocratic_>;
  get_Government_System_Types_Democracy_?: Maybe<_Government_System_Types_Democracy_>;
  get_Government_System_Types_Economic_System_?: Maybe<_Government_System_Types_Economic_System_>;
  get_Government_System_Types_Head_Of_State_Or_Government?: Maybe<_Government_System_Types_Head_Of_State_Or_Government>;
  get_Government_System_Types_Monarchy_?: Maybe<_Government_System_Types_Monarchy_>;
  get_Government_System_Types_Oligarchy_?: Maybe<_Government_System_Types_Oligarchy_>;
  get_Government_System_Types_Partisan_Systems_?: Maybe<_Government_System_Types_Partisan_Systems_>;
  get_Government_System_Types_Religion_?: Maybe<_Government_System_Types_Religion_>;
  get_Indian_Administrative_Divisions?: Maybe<_Indian_Administrative_Divisions>;
  get_Indian_District_?: Maybe<_Indian_District_>;
  get_Indian_District_Region_?: Maybe<_Indian_District_Region_>;
  get_Indian_Government_Official_Role_?: Maybe<_Indian_Government_Official_Role_>;
  get_Indian_Government_System_?: Maybe<_Indian_Government_System_>;
  get_Indian_Legal_Document_?: Maybe<_Indian_Legal_Document_>;
  get_Indian_Legislative_Divisions?: Maybe<_Indian_Legislative_Divisions>;
  get_Indian_Loksabha_?: Maybe<_Indian_Loksabha_>;
  get_Indian_Loksabha_Constituency_?: Maybe<_Indian_Loksabha_Constituency_>;
  get_Indian_Loksabha_Constituency_Election_?: Maybe<_Indian_Loksabha_Constituency_Election_>;
  get_Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>;
  get_Indian_Loksabha_Constituency_Election_Result_?: Maybe<_Indian_Loksabha_Constituency_Election_Result_>;
  get_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>;
  get_Indian_Loksabha_Constituency_Region_?: Maybe<_Indian_Loksabha_Constituency_Region_>;
  get_Indian_Loksabha_Election_?: Maybe<_Indian_Loksabha_Election_>;
  get_Indian_Loksabha_Election_Phase_?: Maybe<_Indian_Loksabha_Election_Phase_>;
  get_Indian_Loksabha_Election_Result_?: Maybe<_Indian_Loksabha_Election_Result_>;
  get_Indian_Loksabha_Member_?: Maybe<_Indian_Loksabha_Member_>;
  get_Indian_Loksabha_Session_?: Maybe<_Indian_Loksabha_Session_>;
  get_Indian_Political_Party_?: Maybe<_Indian_Political_Party_>;
  get_Indian_Political_Party_Loksabha_Election_?: Maybe<_Indian_Political_Party_Loksabha_Election_>;
  get_Indian_Political_Party_Member_?: Maybe<_Indian_Political_Party_Member_>;
  get_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>;
  get_Indian_Politician_?: Maybe<_Indian_Politician_>;
  get_Indian_Prime_Minister_?: Maybe<_Indian_Prime_Minister_>;
  get_Indian_State_Union_Territory_?: Maybe<_Indian_State_Union_Territory_>;
  get_Indian_State_Union_Territory_Region_?: Maybe<_Indian_State_Union_Territory_Region_>;
  get_Indian_Union_Council_Of_Ministers_?: Maybe<_Indian_Union_Council_Of_Ministers_>;
  get_Indian_Union_Government_?: Maybe<_Indian_Union_Government_>;
  get_Indian_Union_Government_Cabinet_?: Maybe<_Indian_Union_Government_Cabinet_>;
  get_Indian_Union_Government_Cabinet_Minister_?: Maybe<_Indian_Union_Government_Cabinet_Minister_>;
  get_Indian_Union_Government_Department_?: Maybe<_Indian_Union_Government_Department_>;
  get_Indian_Union_Government_Minister_Of_State_?: Maybe<_Indian_Union_Government_Minister_Of_State_>;
  get_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>;
  get_Indian_Union_Government_Ministry_?: Maybe<_Indian_Union_Government_Ministry_>;
  get_Indian_Vidhansabha_Constituency_?: Maybe<_Indian_Vidhansabha_Constituency_>;
  get_Indian_Vidhansabha_Constituency_Region_?: Maybe<_Indian_Vidhansabha_Constituency_Region_>;
  get_Language_?: Maybe<_Language_>;
  get_Language_Script_?: Maybe<_Language_Script_>;
  get_Name_?: Maybe<_Name_>;
  get_Node_Update_?: Maybe<_Node_Update_>;
  get_Person_?: Maybe<_Person_>;
  get_Public_Policy_Domain_?: Maybe<_Public_Policy_Domain_>;
  get_Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>;
  get_Script_?: Maybe<_Script_>;
  queryAccount?: Maybe<Array<Maybe<Account>>>;
  querySession?: Maybe<Array<Maybe<Session>>>;
  queryUser?: Maybe<Array<Maybe<User>>>;
  queryVerificationToken?: Maybe<Array<Maybe<VerificationToken>>>;
  query_Country_?: Maybe<Array<Maybe<_Country_>>>;
  query_Country_Event_?: Maybe<Array<Maybe<_Country_Event_>>>;
  query_Country_Government_?: Maybe<Array<Maybe<_Country_Government_>>>;
  query_Country_Region_?: Maybe<Array<Maybe<_Country_Region_>>>;
  query_Date_Time_?: Maybe<Array<Maybe<_Date_Time_>>>;
  query_Geo_?: Maybe<Array<Maybe<_Geo_>>>;
  query_Government_System_Type_?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  query_Government_System_Types_Authority_Concentration_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Concentration_>>
  >;
  query_Government_System_Types_Authority_Distribution_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Distribution_>>
  >;
  query_Government_System_Types_Authority_Source_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Source_>>>;
  query_Government_System_Types_Authority_Status_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Status_>>>;
  query_Government_System_Types_Autocratic_?: Maybe<Array<Maybe<_Government_System_Types_Autocratic_>>>;
  query_Government_System_Types_Democracy_?: Maybe<Array<Maybe<_Government_System_Types_Democracy_>>>;
  query_Government_System_Types_Economic_System_?: Maybe<Array<Maybe<_Government_System_Types_Economic_System_>>>;
  query_Government_System_Types_Head_Of_State_Or_Government?: Maybe<
    Array<Maybe<_Government_System_Types_Head_Of_State_Or_Government>>
  >;
  query_Government_System_Types_Monarchy_?: Maybe<Array<Maybe<_Government_System_Types_Monarchy_>>>;
  query_Government_System_Types_Oligarchy_?: Maybe<Array<Maybe<_Government_System_Types_Oligarchy_>>>;
  query_Government_System_Types_Partisan_Systems_?: Maybe<Array<Maybe<_Government_System_Types_Partisan_Systems_>>>;
  query_Government_System_Types_Religion_?: Maybe<Array<Maybe<_Government_System_Types_Religion_>>>;
  query_Indian_Administrative_Divisions?: Maybe<Array<Maybe<_Indian_Administrative_Divisions>>>;
  query_Indian_District_?: Maybe<Array<Maybe<_Indian_District_>>>;
  query_Indian_District_Region_?: Maybe<Array<Maybe<_Indian_District_Region_>>>;
  query_Indian_Government_Official_Role_?: Maybe<Array<Maybe<_Indian_Government_Official_Role_>>>;
  query_Indian_Government_System_?: Maybe<Array<Maybe<_Indian_Government_System_>>>;
  query_Indian_Legal_Document_?: Maybe<Array<Maybe<_Indian_Legal_Document_>>>;
  query_Indian_Legislative_Divisions?: Maybe<Array<Maybe<_Indian_Legislative_Divisions>>>;
  query_Indian_Loksabha_?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  query_Indian_Loksabha_Constituency_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  query_Indian_Loksabha_Constituency_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  query_Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>
  >;
  query_Indian_Loksabha_Constituency_Election_Result_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_>>
  >;
  query_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>>
  >;
  query_Indian_Loksabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Region_>>>;
  query_Indian_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_>>>;
  query_Indian_Loksabha_Election_Phase_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Phase_>>>;
  query_Indian_Loksabha_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Result_>>>;
  query_Indian_Loksabha_Member_?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  query_Indian_Loksabha_Session_?: Maybe<Array<Maybe<_Indian_Loksabha_Session_>>>;
  query_Indian_Political_Party_?: Maybe<Array<Maybe<_Indian_Political_Party_>>>;
  query_Indian_Political_Party_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  query_Indian_Political_Party_Member_?: Maybe<Array<Maybe<_Indian_Political_Party_Member_>>>;
  query_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<
    Array<Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>>
  >;
  query_Indian_Politician_?: Maybe<Array<Maybe<_Indian_Politician_>>>;
  query_Indian_Prime_Minister_?: Maybe<Array<Maybe<_Indian_Prime_Minister_>>>;
  query_Indian_State_Union_Territory_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  query_Indian_State_Union_Territory_Region_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_Region_>>>;
  query_Indian_Union_Council_Of_Ministers_?: Maybe<Array<Maybe<_Indian_Union_Council_Of_Ministers_>>>;
  query_Indian_Union_Government_?: Maybe<Array<Maybe<_Indian_Union_Government_>>>;
  query_Indian_Union_Government_Cabinet_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_>>>;
  query_Indian_Union_Government_Cabinet_Minister_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  query_Indian_Union_Government_Department_?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  query_Indian_Union_Government_Minister_Of_State_?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  query_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  query_Indian_Union_Government_Ministry_?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  query_Indian_Vidhansabha_Constituency_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  query_Indian_Vidhansabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_Region_>>>;
  query_Language_?: Maybe<Array<Maybe<_Language_>>>;
  query_Language_Script_?: Maybe<Array<Maybe<_Language_Script_>>>;
  query_Name_?: Maybe<Array<Maybe<_Name_>>>;
  query_Node_Update_?: Maybe<Array<Maybe<_Node_Update_>>>;
  query_Person_?: Maybe<Array<Maybe<_Person_>>>;
  query_Public_Policy_Domain_?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  query_Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<
    Array<Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>>
  >;
  query_Script_?: Maybe<Array<Maybe<_Script_>>>;
};

export type QueryAggregateAccountArgs = {
  filter?: InputMaybe<AccountFilter>;
};

export type QueryAggregateSessionArgs = {
  filter?: InputMaybe<SessionFilter>;
};

export type QueryAggregateUserArgs = {
  filter?: InputMaybe<UserFilter>;
};

export type QueryAggregateVerificationTokenArgs = {
  filter?: InputMaybe<VerificationTokenFilter>;
};

export type QueryAggregate_Country_Args = {
  filter?: InputMaybe<_Country_Filter>;
};

export type QueryAggregate_Country_Event_Args = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type QueryAggregate_Country_Government_Args = {
  filter?: InputMaybe<_Country_Government_Filter>;
};

export type QueryAggregate_Country_Region_Args = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type QueryAggregate_Date_Time_Args = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type QueryAggregate_Geo_Args = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type QueryAggregate_Government_System_Type_Args = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type QueryAggregate_Government_System_Types_Authority_Concentration_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
};

export type QueryAggregate_Government_System_Types_Authority_Distribution_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
};

export type QueryAggregate_Government_System_Types_Authority_Source_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
};

export type QueryAggregate_Government_System_Types_Authority_Status_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
};

export type QueryAggregate_Government_System_Types_Autocratic_Args = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
};

export type QueryAggregate_Government_System_Types_Democracy_Args = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
};

export type QueryAggregate_Government_System_Types_Economic_System_Args = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
};

export type QueryAggregate_Government_System_Types_Head_Of_State_Or_GovernmentArgs = {
  filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
};

export type QueryAggregate_Government_System_Types_Monarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
};

export type QueryAggregate_Government_System_Types_Oligarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
};

export type QueryAggregate_Government_System_Types_Partisan_Systems_Args = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
};

export type QueryAggregate_Government_System_Types_Religion_Args = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
};

export type QueryAggregate_Indian_Administrative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
};

export type QueryAggregate_Indian_District_Args = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type QueryAggregate_Indian_District_Region_Args = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
};

export type QueryAggregate_Indian_Government_Official_Role_Args = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
};

export type QueryAggregate_Indian_Government_System_Args = {
  filter?: InputMaybe<_Indian_Government_System_Filter>;
};

export type QueryAggregate_Indian_Legal_Document_Args = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
};

export type QueryAggregate_Indian_Legislative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Legislative_DivisionsFilter>;
};

export type QueryAggregate_Indian_Loksabha_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Constituency_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Constituency_Election_Candidate_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Constituency_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Election_Phase_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Member_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type QueryAggregate_Indian_Loksabha_Session_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
};

export type QueryAggregate_Indian_Political_Party_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
};

export type QueryAggregate_Indian_Political_Party_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
};

export type QueryAggregate_Indian_Political_Party_Member_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
};

export type QueryAggregate_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
};

export type QueryAggregate_Indian_Politician_Args = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type QueryAggregate_Indian_Prime_Minister_Args = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type QueryAggregate_Indian_State_Union_Territory_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type QueryAggregate_Indian_State_Union_Territory_Region_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
};

export type QueryAggregate_Indian_Union_Council_Of_Ministers_Args = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Cabinet_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Cabinet_Minister_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Department_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Minister_Of_State_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
};

export type QueryAggregate_Indian_Union_Government_Ministry_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type QueryAggregate_Indian_Vidhansabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type QueryAggregate_Indian_Vidhansabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
};

export type QueryAggregate_Language_Args = {
  filter?: InputMaybe<_Language_Filter>;
};

export type QueryAggregate_Language_Script_Args = {
  filter?: InputMaybe<_Language_Script_Filter>;
};

export type QueryAggregate_Name_Args = {
  filter?: InputMaybe<_Name_Filter>;
};

export type QueryAggregate_Node_Update_Args = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type QueryAggregate_Person_Args = {
  filter?: InputMaybe<_Person_Filter>;
};

export type QueryAggregate_Public_Policy_Domain_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
};

export type QueryAggregate_Public_Policy_Domain_Government_Ministries_Departments_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
};

export type QueryAggregate_Script_Args = {
  filter?: InputMaybe<_Script_Filter>;
};

export type QueryGetAccountArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryGetSessionArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryGetUserArgs = {
  email?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryGetVerificationTokenArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Country_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Country_Event_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Country_Government_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Country_Region_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Date_Time_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Geo_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Government_System_Type_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Authority_Concentration_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Authority_Distribution_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Authority_Source_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Authority_Status_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Autocratic_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Democracy_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Economic_System_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Head_Of_State_Or_GovernmentArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Monarchy_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Oligarchy_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Partisan_Systems_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Government_System_Types_Religion_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Administrative_DivisionsArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_District_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_District_Region_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Government_Official_Role_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Government_System_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Legal_Document_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Legislative_DivisionsArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Constituency_Args = {
  constituency_number?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Loksabha_Constituency_Election_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Constituency_Election_Candidate_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Constituency_Election_Result_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Constituency_Region_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Election_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Loksabha_Election_Phase_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Election_Result_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Member_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Loksabha_Session_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Political_Party_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Political_Party_Loksabha_Election_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Political_Party_Member_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Politician_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Prime_Minister_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_State_Union_Territory_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_State_Union_Territory_Region_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Council_Of_Ministers_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Government_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Government_Cabinet_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Government_Cabinet_Minister_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Government_Department_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Union_Government_Minister_Of_State_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Indian_Union_Government_Ministry_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Vidhansabha_Constituency_Args = {
  constituency_number?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Indian_Vidhansabha_Constituency_Region_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Language_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Language_Script_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Name_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Node_Update_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Person_Args = {
  id: Scalars["ID"]["input"];
};

export type QueryGet_Public_Policy_Domain_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Public_Policy_Domain_Government_Ministries_Departments_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGet_Script_Args = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryQueryAccountArgs = {
  filter?: InputMaybe<AccountFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<AccountOrder>;
};

export type QueryQuerySessionArgs = {
  filter?: InputMaybe<SessionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<SessionOrder>;
};

export type QueryQueryUserArgs = {
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<UserOrder>;
};

export type QueryQueryVerificationTokenArgs = {
  filter?: InputMaybe<VerificationTokenFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<VerificationTokenOrder>;
};

export type QueryQuery_Country_Args = {
  filter?: InputMaybe<_Country_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Order>;
};

export type QueryQuery_Country_Event_Args = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type QueryQuery_Country_Government_Args = {
  filter?: InputMaybe<_Country_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Government_Order>;
};

export type QueryQuery_Country_Region_Args = {
  filter?: InputMaybe<_Country_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Region_Order>;
};

export type QueryQuery_Date_Time_Args = {
  filter?: InputMaybe<_Date_Time_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Date_Time_Order>;
};

export type QueryQuery_Geo_Args = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type QueryQuery_Government_System_Type_Args = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type QueryQuery_Government_System_Types_Authority_Concentration_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
};

export type QueryQuery_Government_System_Types_Authority_Distribution_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Distribution_Order>;
};

export type QueryQuery_Government_System_Types_Authority_Source_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export type QueryQuery_Government_System_Types_Authority_Status_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export type QueryQuery_Government_System_Types_Autocratic_Args = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Autocratic_Order>;
};

export type QueryQuery_Government_System_Types_Democracy_Args = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export type QueryQuery_Government_System_Types_Economic_System_Args = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export type QueryQuery_Government_System_Types_Head_Of_State_Or_GovernmentArgs = {
  filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrder>;
};

export type QueryQuery_Government_System_Types_Monarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Monarchy_Order>;
};

export type QueryQuery_Government_System_Types_Oligarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Oligarchy_Order>;
};

export type QueryQuery_Government_System_Types_Partisan_Systems_Args = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Partisan_Systems_Order>;
};

export type QueryQuery_Government_System_Types_Religion_Args = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Religion_Order>;
};

export type QueryQuery_Indian_Administrative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type QueryQuery_Indian_District_Args = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type QueryQuery_Indian_District_Region_Args = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Region_Order>;
};

export type QueryQuery_Indian_Government_Official_Role_Args = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_Official_Role_Order>;
};

export type QueryQuery_Indian_Government_System_Args = {
  filter?: InputMaybe<_Indian_Government_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_System_Order>;
};

export type QueryQuery_Indian_Legal_Document_Args = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Legal_Document_Order>;
};

export type QueryQuery_Indian_Legislative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Legislative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type QueryQuery_Indian_Loksabha_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type QueryQuery_Indian_Loksabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type QueryQuery_Indian_Loksabha_Constituency_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type QueryQuery_Indian_Loksabha_Constituency_Election_Candidate_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
};

export type QueryQuery_Indian_Loksabha_Constituency_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Order>;
};

export type QueryQuery_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order>;
};

export type QueryQuery_Indian_Loksabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export type QueryQuery_Indian_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export type QueryQuery_Indian_Loksabha_Election_Phase_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Phase_Order>;
};

export type QueryQuery_Indian_Loksabha_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Result_Order>;
};

export type QueryQuery_Indian_Loksabha_Member_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type QueryQuery_Indian_Loksabha_Session_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Session_Order>;
};

export type QueryQuery_Indian_Political_Party_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Order>;
};

export type QueryQuery_Indian_Political_Party_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type QueryQuery_Indian_Political_Party_Member_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export type QueryQuery_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order>;
};

export type QueryQuery_Indian_Politician_Args = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Politician_Order>;
};

export type QueryQuery_Indian_Prime_Minister_Args = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export type QueryQuery_Indian_State_Union_Territory_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type QueryQuery_Indian_State_Union_Territory_Region_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export type QueryQuery_Indian_Union_Council_Of_Ministers_Args = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Council_Of_Ministers_Order>;
};

export type QueryQuery_Indian_Union_Government_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Order>;
};

export type QueryQuery_Indian_Union_Government_Cabinet_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Order>;
};

export type QueryQuery_Indian_Union_Government_Cabinet_Minister_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type QueryQuery_Indian_Union_Government_Department_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type QueryQuery_Indian_Union_Government_Minister_Of_State_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type QueryQuery_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
};

export type QueryQuery_Indian_Union_Government_Ministry_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type QueryQuery_Indian_Vidhansabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type QueryQuery_Indian_Vidhansabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export type QueryQuery_Language_Args = {
  filter?: InputMaybe<_Language_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Order>;
};

export type QueryQuery_Language_Script_Args = {
  filter?: InputMaybe<_Language_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Script_Order>;
};

export type QueryQuery_Name_Args = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type QueryQuery_Node_Update_Args = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type QueryQuery_Person_Args = {
  filter?: InputMaybe<_Person_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Person_Order>;
};

export type QueryQuery_Public_Policy_Domain_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type QueryQuery_Public_Policy_Domain_Government_Ministries_Departments_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
};

export type QueryQuery_Script_Args = {
  filter?: InputMaybe<_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Script_Order>;
};

export type Session = {
  __typename?: "Session";
  expires?: Maybe<Scalars["DateTime"]["output"]>;
  id?: Maybe<Scalars["ID"]["output"]>;
  sessionToken?: Maybe<Scalars["String"]["output"]>;
  user?: Maybe<User>;
};

export type SessionUserArgs = {
  filter?: InputMaybe<UserFilter>;
};

export type SessionAggregateResult = {
  __typename?: "SessionAggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  expiresMax?: Maybe<Scalars["DateTime"]["output"]>;
  expiresMin?: Maybe<Scalars["DateTime"]["output"]>;
  sessionTokenMax?: Maybe<Scalars["String"]["output"]>;
  sessionTokenMin?: Maybe<Scalars["String"]["output"]>;
};

export type SessionFilter = {
  and?: InputMaybe<Array<InputMaybe<SessionFilter>>>;
  has?: InputMaybe<Array<InputMaybe<SessionHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<SessionFilter>;
  or?: InputMaybe<Array<InputMaybe<SessionFilter>>>;
  sessionToken?: InputMaybe<StringHashFilter>;
};

export enum SessionHasFilter {
  Expires = "expires",
  SessionToken = "sessionToken",
  User = "user",
}

export type SessionOrder = {
  asc?: InputMaybe<SessionOrderable>;
  desc?: InputMaybe<SessionOrderable>;
  then?: InputMaybe<SessionOrder>;
};

export enum SessionOrderable {
  Expires = "expires",
  SessionToken = "sessionToken",
}

export type SessionPatch = {
  expires?: InputMaybe<Scalars["DateTime"]["input"]>;
  sessionToken?: InputMaybe<Scalars["String"]["input"]>;
  user?: InputMaybe<UserRef>;
};

export type SessionRef = {
  expires?: InputMaybe<Scalars["DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  sessionToken?: InputMaybe<Scalars["String"]["input"]>;
  user?: InputMaybe<UserRef>;
};

export type StringExactFilter = {
  between?: InputMaybe<StringRange>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  ge?: InputMaybe<Scalars["String"]["input"]>;
  gt?: InputMaybe<Scalars["String"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
  le?: InputMaybe<Scalars["String"]["input"]>;
  lt?: InputMaybe<Scalars["String"]["input"]>;
};

export type StringExactFilter_StringFullTextFilter_StringTermFilter = {
  allofterms?: InputMaybe<Scalars["String"]["input"]>;
  alloftext?: InputMaybe<Scalars["String"]["input"]>;
  anyofterms?: InputMaybe<Scalars["String"]["input"]>;
  anyoftext?: InputMaybe<Scalars["String"]["input"]>;
  between?: InputMaybe<StringRange>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  ge?: InputMaybe<Scalars["String"]["input"]>;
  gt?: InputMaybe<Scalars["String"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
  le?: InputMaybe<Scalars["String"]["input"]>;
  lt?: InputMaybe<Scalars["String"]["input"]>;
};

export type StringFullTextFilter = {
  alloftext?: InputMaybe<Scalars["String"]["input"]>;
  anyoftext?: InputMaybe<Scalars["String"]["input"]>;
};

export type StringFullTextFilter_StringHashFilter_StringTermFilter = {
  allofterms?: InputMaybe<Scalars["String"]["input"]>;
  alloftext?: InputMaybe<Scalars["String"]["input"]>;
  anyofterms?: InputMaybe<Scalars["String"]["input"]>;
  anyoftext?: InputMaybe<Scalars["String"]["input"]>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
};

export type StringHashFilter = {
  eq?: InputMaybe<Scalars["String"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
};

export type StringRange = {
  max: Scalars["String"]["input"];
  min: Scalars["String"]["input"];
};

export type StringRegExpFilter = {
  regexp?: InputMaybe<Scalars["String"]["input"]>;
};

export type StringTermFilter = {
  allofterms?: InputMaybe<Scalars["String"]["input"]>;
  anyofterms?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAccountInput = {
  filter: AccountFilter;
  remove?: InputMaybe<AccountPatch>;
  set?: InputMaybe<AccountPatch>;
};

export type UpdateAccountPayload = {
  __typename?: "UpdateAccountPayload";
  account?: Maybe<Array<Maybe<Account>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type UpdateAccountPayloadAccountArgs = {
  filter?: InputMaybe<AccountFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<AccountOrder>;
};

export type UpdateSessionInput = {
  filter: SessionFilter;
  remove?: InputMaybe<SessionPatch>;
  set?: InputMaybe<SessionPatch>;
};

export type UpdateSessionPayload = {
  __typename?: "UpdateSessionPayload";
  numUids?: Maybe<Scalars["Int"]["output"]>;
  session?: Maybe<Array<Maybe<Session>>>;
};

export type UpdateSessionPayloadSessionArgs = {
  filter?: InputMaybe<SessionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<SessionOrder>;
};

export type UpdateUserInput = {
  filter: UserFilter;
  remove?: InputMaybe<UserPatch>;
  set?: InputMaybe<UserPatch>;
};

export type UpdateUserPayload = {
  __typename?: "UpdateUserPayload";
  numUids?: Maybe<Scalars["Int"]["output"]>;
  user?: Maybe<Array<Maybe<User>>>;
};

export type UpdateUserPayloadUserArgs = {
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<UserOrder>;
};

export type UpdateVerificationTokenInput = {
  filter: VerificationTokenFilter;
  remove?: InputMaybe<VerificationTokenPatch>;
  set?: InputMaybe<VerificationTokenPatch>;
};

export type UpdateVerificationTokenPayload = {
  __typename?: "UpdateVerificationTokenPayload";
  numUids?: Maybe<Scalars["Int"]["output"]>;
  verificationToken?: Maybe<Array<Maybe<VerificationToken>>>;
};

export type UpdateVerificationTokenPayloadVerificationTokenArgs = {
  filter?: InputMaybe<VerificationTokenFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<VerificationTokenOrder>;
};

export type Update_Country_Event_Input = {
  filter: _Country_Event_Filter;
  remove?: InputMaybe<_Country_Event_Patch>;
  set?: InputMaybe<_Country_Event_Patch>;
};

export type Update_Country_Event_Payload = {
  __typename?: "Update_Country_Event_Payload";
  _Country_Event_?: Maybe<Array<Maybe<_Country_Event_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Country_Event_Payload_Country_Event_Args = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type Update_Country_Government_Input = {
  filter: _Country_Government_Filter;
  remove?: InputMaybe<_Country_Government_Patch>;
  set?: InputMaybe<_Country_Government_Patch>;
};

export type Update_Country_Government_Payload = {
  __typename?: "Update_Country_Government_Payload";
  _Country_Government_?: Maybe<Array<Maybe<_Country_Government_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Country_Government_Payload_Country_Government_Args = {
  filter?: InputMaybe<_Country_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Government_Order>;
};

export type Update_Country_Input = {
  filter: _Country_Filter;
  remove?: InputMaybe<_Country_Patch>;
  set?: InputMaybe<_Country_Patch>;
};

export type Update_Country_Payload = {
  __typename?: "Update_Country_Payload";
  _Country_?: Maybe<Array<Maybe<_Country_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Country_Payload_Country_Args = {
  filter?: InputMaybe<_Country_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Order>;
};

export type Update_Country_Region_Input = {
  filter: _Country_Region_Filter;
  remove?: InputMaybe<_Country_Region_Patch>;
  set?: InputMaybe<_Country_Region_Patch>;
};

export type Update_Country_Region_Payload = {
  __typename?: "Update_Country_Region_Payload";
  _Country_Region_?: Maybe<Array<Maybe<_Country_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Country_Region_Payload_Country_Region_Args = {
  filter?: InputMaybe<_Country_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Region_Order>;
};

export type Update_Date_Time_Input = {
  filter: _Date_Time_Filter;
  remove?: InputMaybe<_Date_Time_Patch>;
  set?: InputMaybe<_Date_Time_Patch>;
};

export type Update_Date_Time_Payload = {
  __typename?: "Update_Date_Time_Payload";
  _Date_Time_?: Maybe<Array<Maybe<_Date_Time_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Date_Time_Payload_Date_Time_Args = {
  filter?: InputMaybe<_Date_Time_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Date_Time_Order>;
};

export type Update_Geo_Input = {
  filter: _Geo_Filter;
  remove?: InputMaybe<_Geo_Patch>;
  set?: InputMaybe<_Geo_Patch>;
};

export type Update_Geo_Payload = {
  __typename?: "Update_Geo_Payload";
  _Geo_?: Maybe<Array<Maybe<_Geo_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Geo_Payload_Geo_Args = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type Update_Government_System_Type_Input = {
  filter: _Government_System_Type_Filter;
  remove?: InputMaybe<_Government_System_Type_Patch>;
  set?: InputMaybe<_Government_System_Type_Patch>;
};

export type Update_Government_System_Type_Payload = {
  __typename?: "Update_Government_System_Type_Payload";
  _Government_System_Type_?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Type_Payload_Government_System_Type_Args = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type Update_Government_System_Types_Authority_Concentration_Input = {
  filter: _Government_System_Types_Authority_Concentration_Filter;
  remove?: InputMaybe<_Government_System_Types_Authority_Concentration_Patch>;
  set?: InputMaybe<_Government_System_Types_Authority_Concentration_Patch>;
};

export type Update_Government_System_Types_Authority_Concentration_Payload = {
  __typename?: "Update_Government_System_Types_Authority_Concentration_Payload";
  _Government_System_Types_Authority_Concentration_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Concentration_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Authority_Concentration_Payload_Government_System_Types_Authority_Concentration_Args =
  {
    filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
  };

export type Update_Government_System_Types_Authority_Distribution_Input = {
  filter: _Government_System_Types_Authority_Distribution_Filter;
  remove?: InputMaybe<_Government_System_Types_Authority_Distribution_Patch>;
  set?: InputMaybe<_Government_System_Types_Authority_Distribution_Patch>;
};

export type Update_Government_System_Types_Authority_Distribution_Payload = {
  __typename?: "Update_Government_System_Types_Authority_Distribution_Payload";
  _Government_System_Types_Authority_Distribution_?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Distribution_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Authority_Distribution_Payload_Government_System_Types_Authority_Distribution_Args =
  {
    filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Authority_Distribution_Order>;
  };

export type Update_Government_System_Types_Authority_Source_Input = {
  filter: _Government_System_Types_Authority_Source_Filter;
  remove?: InputMaybe<_Government_System_Types_Authority_Source_Patch>;
  set?: InputMaybe<_Government_System_Types_Authority_Source_Patch>;
};

export type Update_Government_System_Types_Authority_Source_Payload = {
  __typename?: "Update_Government_System_Types_Authority_Source_Payload";
  _Government_System_Types_Authority_Source_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Source_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Authority_Source_Payload_Government_System_Types_Authority_Source_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export type Update_Government_System_Types_Authority_Status_Input = {
  filter: _Government_System_Types_Authority_Status_Filter;
  remove?: InputMaybe<_Government_System_Types_Authority_Status_Patch>;
  set?: InputMaybe<_Government_System_Types_Authority_Status_Patch>;
};

export type Update_Government_System_Types_Authority_Status_Payload = {
  __typename?: "Update_Government_System_Types_Authority_Status_Payload";
  _Government_System_Types_Authority_Status_?: Maybe<Array<Maybe<_Government_System_Types_Authority_Status_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Authority_Status_Payload_Government_System_Types_Authority_Status_Args = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export type Update_Government_System_Types_Autocratic_Input = {
  filter: _Government_System_Types_Autocratic_Filter;
  remove?: InputMaybe<_Government_System_Types_Autocratic_Patch>;
  set?: InputMaybe<_Government_System_Types_Autocratic_Patch>;
};

export type Update_Government_System_Types_Autocratic_Payload = {
  __typename?: "Update_Government_System_Types_Autocratic_Payload";
  _Government_System_Types_Autocratic_?: Maybe<Array<Maybe<_Government_System_Types_Autocratic_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Autocratic_Payload_Government_System_Types_Autocratic_Args = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Autocratic_Order>;
};

export type Update_Government_System_Types_Democracy_Input = {
  filter: _Government_System_Types_Democracy_Filter;
  remove?: InputMaybe<_Government_System_Types_Democracy_Patch>;
  set?: InputMaybe<_Government_System_Types_Democracy_Patch>;
};

export type Update_Government_System_Types_Democracy_Payload = {
  __typename?: "Update_Government_System_Types_Democracy_Payload";
  _Government_System_Types_Democracy_?: Maybe<Array<Maybe<_Government_System_Types_Democracy_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Democracy_Payload_Government_System_Types_Democracy_Args = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export type Update_Government_System_Types_Economic_System_Input = {
  filter: _Government_System_Types_Economic_System_Filter;
  remove?: InputMaybe<_Government_System_Types_Economic_System_Patch>;
  set?: InputMaybe<_Government_System_Types_Economic_System_Patch>;
};

export type Update_Government_System_Types_Economic_System_Payload = {
  __typename?: "Update_Government_System_Types_Economic_System_Payload";
  _Government_System_Types_Economic_System_?: Maybe<Array<Maybe<_Government_System_Types_Economic_System_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Economic_System_Payload_Government_System_Types_Economic_System_Args = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export type Update_Government_System_Types_Head_Of_State_Or_GovernmentInput = {
  filter: _Government_System_Types_Head_Of_State_Or_GovernmentFilter;
  remove?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentPatch>;
  set?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentPatch>;
};

export type Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload = {
  __typename?: "Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload";
  _Government_System_Types_Head_Of_State_Or_Government?: Maybe<
    Array<Maybe<_Government_System_Types_Head_Of_State_Or_Government>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload_Government_System_Types_Head_Of_State_Or_GovernmentArgs =
  {
    filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrder>;
  };

export type Update_Government_System_Types_Monarchy_Input = {
  filter: _Government_System_Types_Monarchy_Filter;
  remove?: InputMaybe<_Government_System_Types_Monarchy_Patch>;
  set?: InputMaybe<_Government_System_Types_Monarchy_Patch>;
};

export type Update_Government_System_Types_Monarchy_Payload = {
  __typename?: "Update_Government_System_Types_Monarchy_Payload";
  _Government_System_Types_Monarchy_?: Maybe<Array<Maybe<_Government_System_Types_Monarchy_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Monarchy_Payload_Government_System_Types_Monarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Monarchy_Order>;
};

export type Update_Government_System_Types_Oligarchy_Input = {
  filter: _Government_System_Types_Oligarchy_Filter;
  remove?: InputMaybe<_Government_System_Types_Oligarchy_Patch>;
  set?: InputMaybe<_Government_System_Types_Oligarchy_Patch>;
};

export type Update_Government_System_Types_Oligarchy_Payload = {
  __typename?: "Update_Government_System_Types_Oligarchy_Payload";
  _Government_System_Types_Oligarchy_?: Maybe<Array<Maybe<_Government_System_Types_Oligarchy_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Oligarchy_Payload_Government_System_Types_Oligarchy_Args = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Oligarchy_Order>;
};

export type Update_Government_System_Types_Partisan_Systems_Input = {
  filter: _Government_System_Types_Partisan_Systems_Filter;
  remove?: InputMaybe<_Government_System_Types_Partisan_Systems_Patch>;
  set?: InputMaybe<_Government_System_Types_Partisan_Systems_Patch>;
};

export type Update_Government_System_Types_Partisan_Systems_Payload = {
  __typename?: "Update_Government_System_Types_Partisan_Systems_Payload";
  _Government_System_Types_Partisan_Systems_?: Maybe<Array<Maybe<_Government_System_Types_Partisan_Systems_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Partisan_Systems_Payload_Government_System_Types_Partisan_Systems_Args = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Partisan_Systems_Order>;
};

export type Update_Government_System_Types_Religion_Input = {
  filter: _Government_System_Types_Religion_Filter;
  remove?: InputMaybe<_Government_System_Types_Religion_Patch>;
  set?: InputMaybe<_Government_System_Types_Religion_Patch>;
};

export type Update_Government_System_Types_Religion_Payload = {
  __typename?: "Update_Government_System_Types_Religion_Payload";
  _Government_System_Types_Religion_?: Maybe<Array<Maybe<_Government_System_Types_Religion_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Government_System_Types_Religion_Payload_Government_System_Types_Religion_Args = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Religion_Order>;
};

export type Update_Indian_Administrative_DivisionsInput = {
  filter: _Indian_Administrative_DivisionsFilter;
  remove?: InputMaybe<_Indian_Administrative_DivisionsPatch>;
  set?: InputMaybe<_Indian_Administrative_DivisionsPatch>;
};

export type Update_Indian_Administrative_DivisionsPayload = {
  __typename?: "Update_Indian_Administrative_DivisionsPayload";
  _Indian_Administrative_Divisions?: Maybe<Array<Maybe<_Indian_Administrative_Divisions>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Administrative_DivisionsPayload_Indian_Administrative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Update_Indian_District_Input = {
  filter: _Indian_District_Filter;
  remove?: InputMaybe<_Indian_District_Patch>;
  set?: InputMaybe<_Indian_District_Patch>;
};

export type Update_Indian_District_Payload = {
  __typename?: "Update_Indian_District_Payload";
  _Indian_District_?: Maybe<Array<Maybe<_Indian_District_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_District_Payload_Indian_District_Args = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type Update_Indian_District_Region_Input = {
  filter: _Indian_District_Region_Filter;
  remove?: InputMaybe<_Indian_District_Region_Patch>;
  set?: InputMaybe<_Indian_District_Region_Patch>;
};

export type Update_Indian_District_Region_Payload = {
  __typename?: "Update_Indian_District_Region_Payload";
  _Indian_District_Region_?: Maybe<Array<Maybe<_Indian_District_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_District_Region_Payload_Indian_District_Region_Args = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Region_Order>;
};

export type Update_Indian_Government_Official_Role_Input = {
  filter: _Indian_Government_Official_Role_Filter;
  remove?: InputMaybe<_Indian_Government_Official_Role_Patch>;
  set?: InputMaybe<_Indian_Government_Official_Role_Patch>;
};

export type Update_Indian_Government_Official_Role_Payload = {
  __typename?: "Update_Indian_Government_Official_Role_Payload";
  _Indian_Government_Official_Role_?: Maybe<Array<Maybe<_Indian_Government_Official_Role_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Government_Official_Role_Payload_Indian_Government_Official_Role_Args = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_Official_Role_Order>;
};

export type Update_Indian_Government_System_Input = {
  filter: _Indian_Government_System_Filter;
  remove?: InputMaybe<_Indian_Government_System_Patch>;
  set?: InputMaybe<_Indian_Government_System_Patch>;
};

export type Update_Indian_Government_System_Payload = {
  __typename?: "Update_Indian_Government_System_Payload";
  _Indian_Government_System_?: Maybe<Array<Maybe<_Indian_Government_System_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Government_System_Payload_Indian_Government_System_Args = {
  filter?: InputMaybe<_Indian_Government_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_System_Order>;
};

export type Update_Indian_Legal_Document_Input = {
  filter: _Indian_Legal_Document_Filter;
  remove?: InputMaybe<_Indian_Legal_Document_Patch>;
  set?: InputMaybe<_Indian_Legal_Document_Patch>;
};

export type Update_Indian_Legal_Document_Payload = {
  __typename?: "Update_Indian_Legal_Document_Payload";
  _Indian_Legal_Document_?: Maybe<Array<Maybe<_Indian_Legal_Document_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Legal_Document_Payload_Indian_Legal_Document_Args = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Legal_Document_Order>;
};

export type Update_Indian_Legislative_DivisionsInput = {
  filter: _Indian_Legislative_DivisionsFilter;
  remove?: InputMaybe<_Indian_Legislative_DivisionsPatch>;
  set?: InputMaybe<_Indian_Legislative_DivisionsPatch>;
};

export type Update_Indian_Legislative_DivisionsPayload = {
  __typename?: "Update_Indian_Legislative_DivisionsPayload";
  _Indian_Legislative_Divisions?: Maybe<Array<Maybe<_Indian_Legislative_Divisions>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Legislative_DivisionsPayload_Indian_Legislative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Legislative_DivisionsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Update_Indian_Loksabha_Constituency_Election_Candidate_Input = {
  filter: _Indian_Loksabha_Constituency_Election_Candidate_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Patch>;
};

export type Update_Indian_Loksabha_Constituency_Election_Candidate_Payload = {
  __typename?: "Update_Indian_Loksabha_Constituency_Election_Candidate_Payload";
  _Indian_Loksabha_Constituency_Election_Candidate_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Constituency_Election_Candidate_Payload_Indian_Loksabha_Constituency_Election_Candidate_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
  };

export type Update_Indian_Loksabha_Constituency_Election_Input = {
  filter: _Indian_Loksabha_Constituency_Election_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Constituency_Election_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Constituency_Election_Patch>;
};

export type Update_Indian_Loksabha_Constituency_Election_Payload = {
  __typename?: "Update_Indian_Loksabha_Constituency_Election_Payload";
  _Indian_Loksabha_Constituency_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Constituency_Election_Payload_Indian_Loksabha_Constituency_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input = {
  filter: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload = {
  __typename?: "Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload";
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Maybe<
    Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order>;
  };

export type Update_Indian_Loksabha_Constituency_Election_Result_Input = {
  filter: _Indian_Loksabha_Constituency_Election_Result_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Patch>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_Payload = {
  __typename?: "Update_Indian_Loksabha_Constituency_Election_Result_Payload";
  _Indian_Loksabha_Constituency_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_Payload_Indian_Loksabha_Constituency_Election_Result_Args =
  {
    filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Order>;
  };

export type Update_Indian_Loksabha_Constituency_Input = {
  filter: _Indian_Loksabha_Constituency_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Constituency_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Constituency_Patch>;
};

export type Update_Indian_Loksabha_Constituency_Payload = {
  __typename?: "Update_Indian_Loksabha_Constituency_Payload";
  _Indian_Loksabha_Constituency_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Constituency_Payload_Indian_Loksabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type Update_Indian_Loksabha_Constituency_Region_Input = {
  filter: _Indian_Loksabha_Constituency_Region_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Constituency_Region_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Constituency_Region_Patch>;
};

export type Update_Indian_Loksabha_Constituency_Region_Payload = {
  __typename?: "Update_Indian_Loksabha_Constituency_Region_Payload";
  _Indian_Loksabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Constituency_Region_Payload_Indian_Loksabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export type Update_Indian_Loksabha_Election_Input = {
  filter: _Indian_Loksabha_Election_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Election_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Election_Patch>;
};

export type Update_Indian_Loksabha_Election_Payload = {
  __typename?: "Update_Indian_Loksabha_Election_Payload";
  _Indian_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Election_Payload_Indian_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export type Update_Indian_Loksabha_Election_Phase_Input = {
  filter: _Indian_Loksabha_Election_Phase_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Election_Phase_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Election_Phase_Patch>;
};

export type Update_Indian_Loksabha_Election_Phase_Payload = {
  __typename?: "Update_Indian_Loksabha_Election_Phase_Payload";
  _Indian_Loksabha_Election_Phase_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Phase_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Election_Phase_Payload_Indian_Loksabha_Election_Phase_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Phase_Order>;
};

export type Update_Indian_Loksabha_Election_Result_Input = {
  filter: _Indian_Loksabha_Election_Result_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Election_Result_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Election_Result_Patch>;
};

export type Update_Indian_Loksabha_Election_Result_Payload = {
  __typename?: "Update_Indian_Loksabha_Election_Result_Payload";
  _Indian_Loksabha_Election_Result_?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Result_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Election_Result_Payload_Indian_Loksabha_Election_Result_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Result_Order>;
};

export type Update_Indian_Loksabha_Input = {
  filter: _Indian_Loksabha_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Patch>;
};

export type Update_Indian_Loksabha_Member_Input = {
  filter: _Indian_Loksabha_Member_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Member_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Member_Patch>;
};

export type Update_Indian_Loksabha_Member_Payload = {
  __typename?: "Update_Indian_Loksabha_Member_Payload";
  _Indian_Loksabha_Member_?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Member_Payload_Indian_Loksabha_Member_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type Update_Indian_Loksabha_Payload = {
  __typename?: "Update_Indian_Loksabha_Payload";
  _Indian_Loksabha_?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Payload_Indian_Loksabha_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type Update_Indian_Loksabha_Session_Input = {
  filter: _Indian_Loksabha_Session_Filter;
  remove?: InputMaybe<_Indian_Loksabha_Session_Patch>;
  set?: InputMaybe<_Indian_Loksabha_Session_Patch>;
};

export type Update_Indian_Loksabha_Session_Payload = {
  __typename?: "Update_Indian_Loksabha_Session_Payload";
  _Indian_Loksabha_Session_?: Maybe<Array<Maybe<_Indian_Loksabha_Session_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Loksabha_Session_Payload_Indian_Loksabha_Session_Args = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Session_Order>;
};

export type Update_Indian_Political_Party_Input = {
  filter: _Indian_Political_Party_Filter;
  remove?: InputMaybe<_Indian_Political_Party_Patch>;
  set?: InputMaybe<_Indian_Political_Party_Patch>;
};

export type Update_Indian_Political_Party_Loksabha_Election_Input = {
  filter: _Indian_Political_Party_Loksabha_Election_Filter;
  remove?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Patch>;
  set?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Patch>;
};

export type Update_Indian_Political_Party_Loksabha_Election_Payload = {
  __typename?: "Update_Indian_Political_Party_Loksabha_Election_Payload";
  _Indian_Political_Party_Loksabha_Election_?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Political_Party_Loksabha_Election_Payload_Indian_Political_Party_Loksabha_Election_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type Update_Indian_Political_Party_Member_Input = {
  filter: _Indian_Political_Party_Member_Filter;
  remove?: InputMaybe<_Indian_Political_Party_Member_Patch>;
  set?: InputMaybe<_Indian_Political_Party_Member_Patch>;
};

export type Update_Indian_Political_Party_Member_Payload = {
  __typename?: "Update_Indian_Political_Party_Member_Payload";
  _Indian_Political_Party_Member_?: Maybe<Array<Maybe<_Indian_Political_Party_Member_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Political_Party_Member_Payload_Indian_Political_Party_Member_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export type Update_Indian_Political_Party_Payload = {
  __typename?: "Update_Indian_Political_Party_Payload";
  _Indian_Political_Party_?: Maybe<Array<Maybe<_Indian_Political_Party_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Political_Party_Payload_Indian_Political_Party_Args = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Order>;
};

export type Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input = {
  filter: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter;
  remove?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch>;
  set?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch>;
};

export type Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload = {
  __typename?: "Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload";
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Maybe<
    Array<Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args =
  {
    filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order>;
  };

export type Update_Indian_Politician_Input = {
  filter: _Indian_Politician_Filter;
  remove?: InputMaybe<_Indian_Politician_Patch>;
  set?: InputMaybe<_Indian_Politician_Patch>;
};

export type Update_Indian_Politician_Payload = {
  __typename?: "Update_Indian_Politician_Payload";
  _Indian_Politician_?: Maybe<Array<Maybe<_Indian_Politician_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Politician_Payload_Indian_Politician_Args = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Politician_Order>;
};

export type Update_Indian_Prime_Minister_Input = {
  filter: _Indian_Prime_Minister_Filter;
  remove?: InputMaybe<_Indian_Prime_Minister_Patch>;
  set?: InputMaybe<_Indian_Prime_Minister_Patch>;
};

export type Update_Indian_Prime_Minister_Payload = {
  __typename?: "Update_Indian_Prime_Minister_Payload";
  _Indian_Prime_Minister_?: Maybe<Array<Maybe<_Indian_Prime_Minister_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Prime_Minister_Payload_Indian_Prime_Minister_Args = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export type Update_Indian_State_Union_Territory_Input = {
  filter: _Indian_State_Union_Territory_Filter;
  remove?: InputMaybe<_Indian_State_Union_Territory_Patch>;
  set?: InputMaybe<_Indian_State_Union_Territory_Patch>;
};

export type Update_Indian_State_Union_Territory_Payload = {
  __typename?: "Update_Indian_State_Union_Territory_Payload";
  _Indian_State_Union_Territory_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_State_Union_Territory_Payload_Indian_State_Union_Territory_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type Update_Indian_State_Union_Territory_Region_Input = {
  filter: _Indian_State_Union_Territory_Region_Filter;
  remove?: InputMaybe<_Indian_State_Union_Territory_Region_Patch>;
  set?: InputMaybe<_Indian_State_Union_Territory_Region_Patch>;
};

export type Update_Indian_State_Union_Territory_Region_Payload = {
  __typename?: "Update_Indian_State_Union_Territory_Region_Payload";
  _Indian_State_Union_Territory_Region_?: Maybe<Array<Maybe<_Indian_State_Union_Territory_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_State_Union_Territory_Region_Payload_Indian_State_Union_Territory_Region_Args = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export type Update_Indian_Union_Council_Of_Ministers_Input = {
  filter: _Indian_Union_Council_Of_Ministers_Filter;
  remove?: InputMaybe<_Indian_Union_Council_Of_Ministers_Patch>;
  set?: InputMaybe<_Indian_Union_Council_Of_Ministers_Patch>;
};

export type Update_Indian_Union_Council_Of_Ministers_Payload = {
  __typename?: "Update_Indian_Union_Council_Of_Ministers_Payload";
  _Indian_Union_Council_Of_Ministers_?: Maybe<Array<Maybe<_Indian_Union_Council_Of_Ministers_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Council_Of_Ministers_Payload_Indian_Union_Council_Of_Ministers_Args = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Council_Of_Ministers_Order>;
};

export type Update_Indian_Union_Government_Cabinet_Input = {
  filter: _Indian_Union_Government_Cabinet_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Cabinet_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Cabinet_Patch>;
};

export type Update_Indian_Union_Government_Cabinet_Minister_Input = {
  filter: _Indian_Union_Government_Cabinet_Minister_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Patch>;
};

export type Update_Indian_Union_Government_Cabinet_Minister_Payload = {
  __typename?: "Update_Indian_Union_Government_Cabinet_Minister_Payload";
  _Indian_Union_Government_Cabinet_Minister_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Cabinet_Minister_Payload_Indian_Union_Government_Cabinet_Minister_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type Update_Indian_Union_Government_Cabinet_Payload = {
  __typename?: "Update_Indian_Union_Government_Cabinet_Payload";
  _Indian_Union_Government_Cabinet_?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Cabinet_Payload_Indian_Union_Government_Cabinet_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Order>;
};

export type Update_Indian_Union_Government_Department_Input = {
  filter: _Indian_Union_Government_Department_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Department_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Department_Patch>;
};

export type Update_Indian_Union_Government_Department_Payload = {
  __typename?: "Update_Indian_Union_Government_Department_Payload";
  _Indian_Union_Government_Department_?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Department_Payload_Indian_Union_Government_Department_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type Update_Indian_Union_Government_Input = {
  filter: _Indian_Union_Government_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Patch>;
};

export type Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input = {
  filter: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch>;
};

export type Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload = {
  __typename?: "Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload";
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args =
  {
    filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
  };

export type Update_Indian_Union_Government_Minister_Of_State_Input = {
  filter: _Indian_Union_Government_Minister_Of_State_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Patch>;
};

export type Update_Indian_Union_Government_Minister_Of_State_Payload = {
  __typename?: "Update_Indian_Union_Government_Minister_Of_State_Payload";
  _Indian_Union_Government_Minister_Of_State_?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Minister_Of_State_Payload_Indian_Union_Government_Minister_Of_State_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type Update_Indian_Union_Government_Ministry_Input = {
  filter: _Indian_Union_Government_Ministry_Filter;
  remove?: InputMaybe<_Indian_Union_Government_Ministry_Patch>;
  set?: InputMaybe<_Indian_Union_Government_Ministry_Patch>;
};

export type Update_Indian_Union_Government_Ministry_Payload = {
  __typename?: "Update_Indian_Union_Government_Ministry_Payload";
  _Indian_Union_Government_Ministry_?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Ministry_Payload_Indian_Union_Government_Ministry_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type Update_Indian_Union_Government_Payload = {
  __typename?: "Update_Indian_Union_Government_Payload";
  _Indian_Union_Government_?: Maybe<Array<Maybe<_Indian_Union_Government_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Union_Government_Payload_Indian_Union_Government_Args = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Order>;
};

export type Update_Indian_Vidhansabha_Constituency_Input = {
  filter: _Indian_Vidhansabha_Constituency_Filter;
  remove?: InputMaybe<_Indian_Vidhansabha_Constituency_Patch>;
  set?: InputMaybe<_Indian_Vidhansabha_Constituency_Patch>;
};

export type Update_Indian_Vidhansabha_Constituency_Payload = {
  __typename?: "Update_Indian_Vidhansabha_Constituency_Payload";
  _Indian_Vidhansabha_Constituency_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Vidhansabha_Constituency_Payload_Indian_Vidhansabha_Constituency_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type Update_Indian_Vidhansabha_Constituency_Region_Input = {
  filter: _Indian_Vidhansabha_Constituency_Region_Filter;
  remove?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Patch>;
  set?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Patch>;
};

export type Update_Indian_Vidhansabha_Constituency_Region_Payload = {
  __typename?: "Update_Indian_Vidhansabha_Constituency_Region_Payload";
  _Indian_Vidhansabha_Constituency_Region_?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_Region_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Indian_Vidhansabha_Constituency_Region_Payload_Indian_Vidhansabha_Constituency_Region_Args = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export type Update_Language_Input = {
  filter: _Language_Filter;
  remove?: InputMaybe<_Language_Patch>;
  set?: InputMaybe<_Language_Patch>;
};

export type Update_Language_Payload = {
  __typename?: "Update_Language_Payload";
  _Language_?: Maybe<Array<Maybe<_Language_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Language_Payload_Language_Args = {
  filter?: InputMaybe<_Language_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Order>;
};

export type Update_Language_Script_Input = {
  filter: _Language_Script_Filter;
  remove?: InputMaybe<_Language_Script_Patch>;
  set?: InputMaybe<_Language_Script_Patch>;
};

export type Update_Language_Script_Payload = {
  __typename?: "Update_Language_Script_Payload";
  _Language_Script_?: Maybe<Array<Maybe<_Language_Script_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Language_Script_Payload_Language_Script_Args = {
  filter?: InputMaybe<_Language_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Script_Order>;
};

export type Update_Name_Input = {
  filter: _Name_Filter;
  remove?: InputMaybe<_Name_Patch>;
  set?: InputMaybe<_Name_Patch>;
};

export type Update_Name_Payload = {
  __typename?: "Update_Name_Payload";
  _Name_?: Maybe<Array<Maybe<_Name_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Name_Payload_Name_Args = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type Update_Node_Update_Input = {
  filter: _Node_Update_Filter;
  remove?: InputMaybe<_Node_Update_Patch>;
  set?: InputMaybe<_Node_Update_Patch>;
};

export type Update_Node_Update_Payload = {
  __typename?: "Update_Node_Update_Payload";
  _Node_Update_?: Maybe<Array<Maybe<_Node_Update_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Node_Update_Payload_Node_Update_Args = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type Update_Person_Input = {
  filter: _Person_Filter;
  remove?: InputMaybe<_Person_Patch>;
  set?: InputMaybe<_Person_Patch>;
};

export type Update_Person_Payload = {
  __typename?: "Update_Person_Payload";
  _Person_?: Maybe<Array<Maybe<_Person_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Person_Payload_Person_Args = {
  filter?: InputMaybe<_Person_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Person_Order>;
};

export type Update_Public_Policy_Domain_Government_Ministries_Departments_Input = {
  filter: _Public_Policy_Domain_Government_Ministries_Departments_Filter;
  remove?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Patch>;
  set?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Patch>;
};

export type Update_Public_Policy_Domain_Government_Ministries_Departments_Payload = {
  __typename?: "Update_Public_Policy_Domain_Government_Ministries_Departments_Payload";
  _Public_Policy_Domain_Government_Ministries_Departments_?: Maybe<
    Array<Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>>
  >;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Public_Policy_Domain_Government_Ministries_Departments_Payload_Public_Policy_Domain_Government_Ministries_Departments_Args =
  {
    filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
    first?: InputMaybe<Scalars["Int"]["input"]>;
    offset?: InputMaybe<Scalars["Int"]["input"]>;
    order?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
  };

export type Update_Public_Policy_Domain_Input = {
  filter: _Public_Policy_Domain_Filter;
  remove?: InputMaybe<_Public_Policy_Domain_Patch>;
  set?: InputMaybe<_Public_Policy_Domain_Patch>;
};

export type Update_Public_Policy_Domain_Payload = {
  __typename?: "Update_Public_Policy_Domain_Payload";
  _Public_Policy_Domain_?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Public_Policy_Domain_Payload_Public_Policy_Domain_Args = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type Update_Script_Input = {
  filter: _Script_Filter;
  remove?: InputMaybe<_Script_Patch>;
  set?: InputMaybe<_Script_Patch>;
};

export type Update_Script_Payload = {
  __typename?: "Update_Script_Payload";
  _Script_?: Maybe<Array<Maybe<_Script_>>>;
  numUids?: Maybe<Scalars["Int"]["output"]>;
};

export type Update_Script_Payload_Script_Args = {
  filter?: InputMaybe<_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Script_Order>;
};

export type User = {
  __typename?: "User";
  accounts?: Maybe<Array<Maybe<Account>>>;
  accountsAggregate?: Maybe<AccountAggregateResult>;
  email?: Maybe<Scalars["String"]["output"]>;
  emailVerified?: Maybe<Scalars["DateTime"]["output"]>;
  id?: Maybe<Scalars["ID"]["output"]>;
  image?: Maybe<Scalars["String"]["output"]>;
  name?: Maybe<Scalars["String"]["output"]>;
  sessions?: Maybe<Array<Maybe<Session>>>;
  sessionsAggregate?: Maybe<SessionAggregateResult>;
};

export type UserAccountsArgs = {
  filter?: InputMaybe<AccountFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<AccountOrder>;
};

export type UserAccountsAggregateArgs = {
  filter?: InputMaybe<AccountFilter>;
};

export type UserSessionsArgs = {
  filter?: InputMaybe<SessionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<SessionOrder>;
};

export type UserSessionsAggregateArgs = {
  filter?: InputMaybe<SessionFilter>;
};

export type UserAggregateResult = {
  __typename?: "UserAggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  emailMax?: Maybe<Scalars["String"]["output"]>;
  emailMin?: Maybe<Scalars["String"]["output"]>;
  emailVerifiedMax?: Maybe<Scalars["DateTime"]["output"]>;
  emailVerifiedMin?: Maybe<Scalars["DateTime"]["output"]>;
  imageMax?: Maybe<Scalars["String"]["output"]>;
  imageMin?: Maybe<Scalars["String"]["output"]>;
  nameMax?: Maybe<Scalars["String"]["output"]>;
  nameMin?: Maybe<Scalars["String"]["output"]>;
};

export type UserFilter = {
  and?: InputMaybe<Array<InputMaybe<UserFilter>>>;
  email?: InputMaybe<StringHashFilter>;
  has?: InputMaybe<Array<InputMaybe<UserHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<UserFilter>;
  or?: InputMaybe<Array<InputMaybe<UserFilter>>>;
};

export enum UserHasFilter {
  Accounts = "accounts",
  Email = "email",
  EmailVerified = "emailVerified",
  Image = "image",
  Name = "name",
  Sessions = "sessions",
}

export type UserOrder = {
  asc?: InputMaybe<UserOrderable>;
  desc?: InputMaybe<UserOrderable>;
  then?: InputMaybe<UserOrder>;
};

export enum UserOrderable {
  Email = "email",
  EmailVerified = "emailVerified",
  Image = "image",
  Name = "name",
}

export type UserPatch = {
  accounts?: InputMaybe<Array<InputMaybe<AccountRef>>>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  emailVerified?: InputMaybe<Scalars["DateTime"]["input"]>;
  image?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  sessions?: InputMaybe<Array<InputMaybe<SessionRef>>>;
};

export type UserRef = {
  accounts?: InputMaybe<Array<InputMaybe<AccountRef>>>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  emailVerified?: InputMaybe<Scalars["DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  image?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  sessions?: InputMaybe<Array<InputMaybe<SessionRef>>>;
};

export type VerificationToken = {
  __typename?: "VerificationToken";
  expires?: Maybe<Scalars["DateTime"]["output"]>;
  id?: Maybe<Scalars["ID"]["output"]>;
  identifier?: Maybe<Scalars["String"]["output"]>;
  token?: Maybe<Scalars["String"]["output"]>;
};

export type VerificationTokenAggregateResult = {
  __typename?: "VerificationTokenAggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  expiresMax?: Maybe<Scalars["DateTime"]["output"]>;
  expiresMin?: Maybe<Scalars["DateTime"]["output"]>;
  identifierMax?: Maybe<Scalars["String"]["output"]>;
  identifierMin?: Maybe<Scalars["String"]["output"]>;
  tokenMax?: Maybe<Scalars["String"]["output"]>;
  tokenMin?: Maybe<Scalars["String"]["output"]>;
};

export type VerificationTokenFilter = {
  and?: InputMaybe<Array<InputMaybe<VerificationTokenFilter>>>;
  has?: InputMaybe<Array<InputMaybe<VerificationTokenHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  identifier?: InputMaybe<StringHashFilter>;
  not?: InputMaybe<VerificationTokenFilter>;
  or?: InputMaybe<Array<InputMaybe<VerificationTokenFilter>>>;
  token?: InputMaybe<StringHashFilter>;
};

export enum VerificationTokenHasFilter {
  Expires = "expires",
  Identifier = "identifier",
  Token = "token",
}

export type VerificationTokenOrder = {
  asc?: InputMaybe<VerificationTokenOrderable>;
  desc?: InputMaybe<VerificationTokenOrderable>;
  then?: InputMaybe<VerificationTokenOrder>;
};

export enum VerificationTokenOrderable {
  Expires = "expires",
  Identifier = "identifier",
  Token = "token",
}

export type VerificationTokenPatch = {
  expires?: InputMaybe<Scalars["DateTime"]["input"]>;
  identifier?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type VerificationTokenRef = {
  expires?: InputMaybe<Scalars["DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  identifier?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type WithinFilter = {
  polygon: PolygonRef;
};

export type _Country_ = {
  __typename?: "_Country_";
  events?: Maybe<Array<Maybe<_Country_Event_>>>;
  eventsAggregate?: Maybe<_Country_Event_AggregateResult>;
  government?: Maybe<_Country_Government_>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names: Array<_Name_>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  region?: Maybe<Array<Maybe<_Country_Region_>>>;
  regionAggregate?: Maybe<_Country_Region_AggregateResult>;
};

export type _Country_EventsArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type _Country_EventsAggregateArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Country_GovernmentArgs = {
  filter?: InputMaybe<_Country_Government_Filter>;
};

export type _Country_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Country_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Country_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Country_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Country_RegionArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Region_Order>;
};

export type _Country_RegionAggregateArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Country_AggregateResult = {
  __typename?: "_Country_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Country_Event_ = {
  __typename?: "_Country_Event_";
  country?: Maybe<Array<Maybe<_Country_>>>;
  countryAggregate?: Maybe<_Country_AggregateResult>;
  datetime_from: _Date_Time_;
  datetime_to?: Maybe<_Date_Time_>;
  description: Scalars["String"]["output"];
  event_type: Scalars["String"]["output"];
  id: Scalars["ID"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  one_time_event?: Maybe<Scalars["Boolean"]["output"]>;
};

export type _Country_Event_CountryArgs = {
  filter?: InputMaybe<_Country_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Order>;
};

export type _Country_Event_CountryAggregateArgs = {
  filter?: InputMaybe<_Country_Filter>;
};

export type _Country_Event_Datetime_FromArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Country_Event_Datetime_ToArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Country_Event_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Country_Event_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Country_Event_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Country_Event_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Country_Event_AggregateResult = {
  __typename?: "_Country_Event_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  event_typeMax?: Maybe<Scalars["String"]["output"]>;
  event_typeMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Country_Event_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Country_Event_Filter>>>;
  description?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  event_type?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  has?: InputMaybe<Array<InputMaybe<_Country_Event_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Country_Event_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Country_Event_Filter>>>;
};

export enum _Country_Event_HasFilter {
  Country = "country",
  DatetimeFrom = "datetime_from",
  DatetimeTo = "datetime_to",
  Description = "description",
  EventType = "event_type",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  OneTimeEvent = "one_time_event",
}

export type _Country_Event_Order = {
  asc?: InputMaybe<_Country_Event_Orderable>;
  desc?: InputMaybe<_Country_Event_Orderable>;
  then?: InputMaybe<_Country_Event_Order>;
};

export enum _Country_Event_Orderable {
  Description = "description",
  EventType = "event_type",
  NodeCreatedOn = "node_created_on",
}

export type _Country_Event_Patch = {
  country?: InputMaybe<Array<InputMaybe<_Country_Ref>>>;
  datetime_from?: InputMaybe<_Date_Time_Ref>;
  datetime_to?: InputMaybe<_Date_Time_Ref>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  event_type?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  one_time_event?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type _Country_Event_Ref = {
  country?: InputMaybe<Array<InputMaybe<_Country_Ref>>>;
  datetime_from?: InputMaybe<_Date_Time_Ref>;
  datetime_to?: InputMaybe<_Date_Time_Ref>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  event_type?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  one_time_event?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type _Country_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Country_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Country_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Country_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Country_Filter>>>;
};

export type _Country_Government_ = {
  __typename?: "_Country_Government_";
  active_government_system_type_official?: Maybe<_Government_System_Type_>;
  governs_country?: Maybe<_Country_>;
  id: Scalars["ID"]["output"];
  india_government_system_active?: Maybe<_Indian_Government_System_>;
  name_id: Scalars["String"]["output"];
  names: Array<_Name_>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Country_Government_Active_Government_System_Type_OfficialArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Country_Government_Governs_CountryArgs = {
  filter?: InputMaybe<_Country_Filter>;
};

export type _Country_Government_India_Government_System_ActiveArgs = {
  filter?: InputMaybe<_Indian_Government_System_Filter>;
};

export type _Country_Government_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Country_Government_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Country_Government_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Country_Government_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Country_Government_AggregateResult = {
  __typename?: "_Country_Government_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Country_Government_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Country_Government_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Country_Government_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Country_Government_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Country_Government_Filter>>>;
};

export enum _Country_Government_HasFilter {
  ActiveGovernmentSystemTypeOfficial = "active_government_system_type_official",
  GovernsCountry = "governs_country",
  IndiaGovernmentSystemActive = "india_government_system_active",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Country_Government_Order = {
  asc?: InputMaybe<_Country_Government_Orderable>;
  desc?: InputMaybe<_Country_Government_Orderable>;
  then?: InputMaybe<_Country_Government_Order>;
};

export enum _Country_Government_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Country_Government_Patch = {
  active_government_system_type_official?: InputMaybe<_Government_System_Type_Ref>;
  governs_country?: InputMaybe<_Country_Ref>;
  india_government_system_active?: InputMaybe<_Indian_Government_System_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Country_Government_Ref = {
  active_government_system_type_official?: InputMaybe<_Government_System_Type_Ref>;
  governs_country?: InputMaybe<_Country_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  india_government_system_active?: InputMaybe<_Indian_Government_System_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export enum _Country_HasFilter {
  Events = "events",
  Government = "government",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Region = "region",
}

export type _Country_Order = {
  asc?: InputMaybe<_Country_Orderable>;
  desc?: InputMaybe<_Country_Orderable>;
  then?: InputMaybe<_Country_Order>;
};

export enum _Country_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Country_Patch = {
  events?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  government?: InputMaybe<_Country_Government_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  region?: InputMaybe<Array<InputMaybe<_Country_Region_Ref>>>;
};

export type _Country_Ref = {
  events?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  government?: InputMaybe<_Country_Government_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  region?: InputMaybe<Array<InputMaybe<_Country_Region_Ref>>>;
};

export type _Country_Region_ = {
  __typename?: "_Country_Region_";
  country?: Maybe<_Country_>;
  disestablished?: Maybe<_Country_Event_>;
  established?: Maybe<_Country_Event_>;
  geo_boundary_self_actual?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundary_self_actualAggregate?: Maybe<_Geo_AggregateResult>;
  geo_boundary_self_official?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundary_self_officialAggregate?: Maybe<_Geo_AggregateResult>;
  geo_boundary_world_official?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundary_world_officialAggregate?: Maybe<_Geo_AggregateResult>;
  geo_country_divisions_district?: Maybe<Array<Maybe<_Geo_>>>;
  geo_country_divisions_districtAggregate?: Maybe<_Geo_AggregateResult>;
  geo_country_divisions_loksabha_constituency?: Maybe<Array<Maybe<_Geo_>>>;
  geo_country_divisions_loksabha_constituencyAggregate?: Maybe<_Geo_AggregateResult>;
  geo_country_divisions_state_union_territory?: Maybe<Array<Maybe<_Geo_>>>;
  geo_country_divisions_state_union_territoryAggregate?: Maybe<_Geo_AggregateResult>;
  geo_country_divisions_vidhansabha_constituency?: Maybe<Array<Maybe<_Geo_>>>;
  geo_country_divisions_vidhansabha_constituencyAggregate?: Maybe<_Geo_AggregateResult>;
  geo_country_divisions_zonal_council?: Maybe<Array<Maybe<_Geo_>>>;
  geo_country_divisions_zonal_councilAggregate?: Maybe<_Geo_AggregateResult>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Country_Region_CountryArgs = {
  filter?: InputMaybe<_Country_Filter>;
};

export type _Country_Region_DisestablishedArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Country_Region_EstablishedArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Country_Region_Geo_Boundary_Self_ActualArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Boundary_Self_ActualAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Boundary_Self_OfficialArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Boundary_Self_OfficialAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Boundary_World_OfficialArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Boundary_World_OfficialAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Country_Divisions_DistrictArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Country_Divisions_DistrictAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Country_Divisions_Loksabha_ConstituencyArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Country_Divisions_Loksabha_ConstituencyAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Country_Divisions_State_Union_TerritoryArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Country_Divisions_State_Union_TerritoryAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Country_Divisions_Vidhansabha_ConstituencyArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Country_Divisions_Vidhansabha_ConstituencyAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Geo_Country_Divisions_Zonal_CouncilArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Country_Region_Geo_Country_Divisions_Zonal_CouncilAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Country_Region_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Country_Region_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Country_Region_AggregateResult = {
  __typename?: "_Country_Region_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Country_Region_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Country_Region_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Country_Region_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Country_Region_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Country_Region_Filter>>>;
};

export enum _Country_Region_HasFilter {
  Country = "country",
  Disestablished = "disestablished",
  Established = "established",
  GeoBoundarySelfActual = "geo_boundary_self_actual",
  GeoBoundarySelfOfficial = "geo_boundary_self_official",
  GeoBoundaryWorldOfficial = "geo_boundary_world_official",
  GeoCountryDivisionsDistrict = "geo_country_divisions_district",
  GeoCountryDivisionsLoksabhaConstituency = "geo_country_divisions_loksabha_constituency",
  GeoCountryDivisionsStateUnionTerritory = "geo_country_divisions_state_union_territory",
  GeoCountryDivisionsVidhansabhaConstituency = "geo_country_divisions_vidhansabha_constituency",
  GeoCountryDivisionsZonalCouncil = "geo_country_divisions_zonal_council",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Country_Region_Order = {
  asc?: InputMaybe<_Country_Region_Orderable>;
  desc?: InputMaybe<_Country_Region_Orderable>;
  then?: InputMaybe<_Country_Region_Order>;
};

export enum _Country_Region_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Country_Region_Patch = {
  country?: InputMaybe<_Country_Ref>;
  disestablished?: InputMaybe<_Country_Event_Ref>;
  established?: InputMaybe<_Country_Event_Ref>;
  geo_boundary_self_actual?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_boundary_self_official?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_boundary_world_official?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_district?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_loksabha_constituency?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_state_union_territory?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_vidhansabha_constituency?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_zonal_council?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Country_Region_Ref = {
  country?: InputMaybe<_Country_Ref>;
  disestablished?: InputMaybe<_Country_Event_Ref>;
  established?: InputMaybe<_Country_Event_Ref>;
  geo_boundary_self_actual?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_boundary_self_official?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_boundary_world_official?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_district?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_loksabha_constituency?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_state_union_territory?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_vidhansabha_constituency?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  geo_country_divisions_zonal_council?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Date_Time_ = {
  __typename?: "_Date_Time_";
  date_time?: Maybe<Scalars["DateTime"]["output"]>;
  date_time_precision?: Maybe<Date_Time_Precision_Category>;
  from_datetime_country_event?: Maybe<Array<Maybe<_Country_Event_>>>;
  from_datetime_country_eventAggregate?: Maybe<_Country_Event_AggregateResult>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  to_datetime_country_event?: Maybe<Array<Maybe<_Country_Event_>>>;
  to_datetime_country_eventAggregate?: Maybe<_Country_Event_AggregateResult>;
};

export type _Date_Time_From_Datetime_Country_EventArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type _Date_Time_From_Datetime_Country_EventAggregateArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Date_Time_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Date_Time_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Date_Time_To_Datetime_Country_EventArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type _Date_Time_To_Datetime_Country_EventAggregateArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Date_Time_AggregateResult = {
  __typename?: "_Date_Time_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  date_timeMax?: Maybe<Scalars["DateTime"]["output"]>;
  date_timeMin?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Date_Time_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Date_Time_Filter>>>;
  date_time?: InputMaybe<DateTimeFilter>;
  date_time_precision?: InputMaybe<Date_Time_Precision_Category_Exact>;
  has?: InputMaybe<Array<InputMaybe<_Date_Time_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Date_Time_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Date_Time_Filter>>>;
};

export enum _Date_Time_HasFilter {
  DateTime = "date_time",
  DateTimePrecision = "date_time_precision",
  FromDatetimeCountryEvent = "from_datetime_country_event",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ToDatetimeCountryEvent = "to_datetime_country_event",
}

export type _Date_Time_Order = {
  asc?: InputMaybe<_Date_Time_Orderable>;
  desc?: InputMaybe<_Date_Time_Orderable>;
  then?: InputMaybe<_Date_Time_Order>;
};

export enum _Date_Time_Orderable {
  DateTime = "date_time",
  NodeCreatedOn = "node_created_on",
}

export type _Date_Time_Patch = {
  date_time?: InputMaybe<Scalars["DateTime"]["input"]>;
  date_time_precision?: InputMaybe<Date_Time_Precision_Category>;
  from_datetime_country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  to_datetime_country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
};

export type _Date_Time_Ref = {
  date_time?: InputMaybe<Scalars["DateTime"]["input"]>;
  date_time_precision?: InputMaybe<Date_Time_Precision_Category>;
  from_datetime_country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  to_datetime_country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
};

export type _Geo_ = {
  __typename?: "_Geo_";
  area?: Maybe<MultiPolygon>;
  category?: Maybe<_Location_Or_Region_Category_>;
  country_boundary_actual?: Maybe<_Country_Region_>;
  country_boundary_self_official?: Maybe<_Country_Region_>;
  country_boundary_world_official?: Maybe<_Country_Region_>;
  id: Scalars["ID"]["output"];
  india_district_divisions?: Maybe<_Country_Region_>;
  india_loksabha_constituency_divisions?: Maybe<_Country_Region_>;
  india_state_union_territory_divisions?: Maybe<_Country_Region_>;
  india_vidhansabha_constituency_divisions?: Maybe<_Country_Region_>;
  india_zonal_council_divisions?: Maybe<_Country_Region_>;
  indian_districts_boundaries?: Maybe<Array<Maybe<_Indian_District_Region_>>>;
  indian_districts_boundariesAggregate?: Maybe<_Indian_District_Region_AggregateResult>;
  indian_loksabha_constituencies_boundaries?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Region_>>>;
  indian_loksabha_constituencies_boundariesAggregate?: Maybe<_Indian_Loksabha_Constituency_Region_AggregateResult>;
  indian_states_union_territories_boundaries?: Maybe<Array<Maybe<_Indian_State_Union_Territory_Region_>>>;
  indian_states_union_territories_boundariesAggregate?: Maybe<_Indian_State_Union_Territory_Region_AggregateResult>;
  indian_vidhansabha_constituencies_boundaries?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_Region_>>>;
  indian_vidhansabha_constituencies_boundariesAggregate?: Maybe<_Indian_Vidhansabha_Constituency_Region_AggregateResult>;
  location?: Maybe<Point>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  precision?: Maybe<Scalars["Int"]["output"]>;
};

export type _Geo_Country_Boundary_ActualArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_Country_Boundary_Self_OfficialArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_Country_Boundary_World_OfficialArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_India_District_DivisionsArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_India_Loksabha_Constituency_DivisionsArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_India_State_Union_Territory_DivisionsArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_India_Vidhansabha_Constituency_DivisionsArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_India_Zonal_Council_DivisionsArgs = {
  filter?: InputMaybe<_Country_Region_Filter>;
};

export type _Geo_Indian_Districts_BoundariesArgs = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Region_Order>;
};

export type _Geo_Indian_Districts_BoundariesAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
};

export type _Geo_Indian_Loksabha_Constituencies_BoundariesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export type _Geo_Indian_Loksabha_Constituencies_BoundariesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
};

export type _Geo_Indian_States_Union_Territories_BoundariesArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export type _Geo_Indian_States_Union_Territories_BoundariesAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
};

export type _Geo_Indian_Vidhansabha_Constituencies_BoundariesArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export type _Geo_Indian_Vidhansabha_Constituencies_BoundariesAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
};

export type _Geo_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Geo_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Geo_AggregateResult = {
  __typename?: "_Geo_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  precisionAvg?: Maybe<Scalars["Float"]["output"]>;
  precisionMax?: Maybe<Scalars["Int"]["output"]>;
  precisionMin?: Maybe<Scalars["Int"]["output"]>;
  precisionSum?: Maybe<Scalars["Int"]["output"]>;
};

export type _Geo_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Geo_Filter>>>;
  area?: InputMaybe<PolygonGeoFilter>;
  category?: InputMaybe<_Location_Or_Region_Category__Exact>;
  has?: InputMaybe<Array<InputMaybe<_Geo_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  location?: InputMaybe<PointGeoFilter>;
  not?: InputMaybe<_Geo_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Geo_Filter>>>;
  precision?: InputMaybe<IntFilter>;
};

export enum _Geo_HasFilter {
  Area = "area",
  Category = "category",
  CountryBoundaryActual = "country_boundary_actual",
  CountryBoundarySelfOfficial = "country_boundary_self_official",
  CountryBoundaryWorldOfficial = "country_boundary_world_official",
  IndiaDistrictDivisions = "india_district_divisions",
  IndiaLoksabhaConstituencyDivisions = "india_loksabha_constituency_divisions",
  IndiaStateUnionTerritoryDivisions = "india_state_union_territory_divisions",
  IndiaVidhansabhaConstituencyDivisions = "india_vidhansabha_constituency_divisions",
  IndiaZonalCouncilDivisions = "india_zonal_council_divisions",
  IndianDistrictsBoundaries = "indian_districts_boundaries",
  IndianLoksabhaConstituenciesBoundaries = "indian_loksabha_constituencies_boundaries",
  IndianStatesUnionTerritoriesBoundaries = "indian_states_union_territories_boundaries",
  IndianVidhansabhaConstituenciesBoundaries = "indian_vidhansabha_constituencies_boundaries",
  Location = "location",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Precision = "precision",
}

export type _Geo_Order = {
  asc?: InputMaybe<_Geo_Orderable>;
  desc?: InputMaybe<_Geo_Orderable>;
  then?: InputMaybe<_Geo_Order>;
};

export enum _Geo_Orderable {
  NodeCreatedOn = "node_created_on",
  Precision = "precision",
}

export type _Geo_Patch = {
  area?: InputMaybe<MultiPolygonRef>;
  category?: InputMaybe<_Location_Or_Region_Category_>;
  country_boundary_actual?: InputMaybe<_Country_Region_Ref>;
  country_boundary_self_official?: InputMaybe<_Country_Region_Ref>;
  country_boundary_world_official?: InputMaybe<_Country_Region_Ref>;
  india_district_divisions?: InputMaybe<_Country_Region_Ref>;
  india_loksabha_constituency_divisions?: InputMaybe<_Country_Region_Ref>;
  india_state_union_territory_divisions?: InputMaybe<_Country_Region_Ref>;
  india_vidhansabha_constituency_divisions?: InputMaybe<_Country_Region_Ref>;
  india_zonal_council_divisions?: InputMaybe<_Country_Region_Ref>;
  indian_districts_boundaries?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Ref>>>;
  indian_loksabha_constituencies_boundaries?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Ref>>>;
  indian_states_union_territories_boundaries?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Ref>>>;
  indian_vidhansabha_constituencies_boundaries?: InputMaybe<
    Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Ref>>
  >;
  location?: InputMaybe<PointRef>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  precision?: InputMaybe<Scalars["Int"]["input"]>;
};

export enum _Geo_Precision_ {
  ExtraLow = "Extra_Low",
  High = "High",
  Low = "Low",
  Medium = "Medium",
  NearRealWorld = "Near_Real_World",
  VeryHigh = "Very_High",
}

export type _Geo_Ref = {
  area?: InputMaybe<MultiPolygonRef>;
  category?: InputMaybe<_Location_Or_Region_Category_>;
  country_boundary_actual?: InputMaybe<_Country_Region_Ref>;
  country_boundary_self_official?: InputMaybe<_Country_Region_Ref>;
  country_boundary_world_official?: InputMaybe<_Country_Region_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  india_district_divisions?: InputMaybe<_Country_Region_Ref>;
  india_loksabha_constituency_divisions?: InputMaybe<_Country_Region_Ref>;
  india_state_union_territory_divisions?: InputMaybe<_Country_Region_Ref>;
  india_vidhansabha_constituency_divisions?: InputMaybe<_Country_Region_Ref>;
  india_zonal_council_divisions?: InputMaybe<_Country_Region_Ref>;
  indian_districts_boundaries?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Ref>>>;
  indian_loksabha_constituencies_boundaries?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Ref>>>;
  indian_states_union_territories_boundaries?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Ref>>>;
  indian_vidhansabha_constituencies_boundaries?: InputMaybe<
    Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Ref>>
  >;
  location?: InputMaybe<PointRef>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  precision?: InputMaybe<Scalars["Int"]["input"]>;
};

export enum _Government_Branches_ {
  Executive = "Executive",
  Judiciary = "Judiciary",
  Legislative = "Legislative",
}

export type _Government_System_Type_ = {
  __typename?: "_Government_System_Type_";
  active_official_system_type_of?: Maybe<_Country_Government_>;
  authority_concentration_type: Array<_Government_System_Types_Authority_Concentration_>;
  authority_concentration_typeAggregate?: Maybe<_Government_System_Types_Authority_Concentration_AggregateResult>;
  authority_distribution_type: _Government_System_Types_Authority_Distribution_;
  authority_source_type: Array<Maybe<_Government_System_Types_Authority_Source_>>;
  authority_source_typeAggregate?: Maybe<_Government_System_Types_Authority_Source_AggregateResult>;
  authority_status_type?: Maybe<Array<Maybe<_Government_System_Types_Authority_Status_>>>;
  authority_status_typeAggregate?: Maybe<_Government_System_Types_Authority_Status_AggregateResult>;
  autocratic_type?: Maybe<_Government_System_Types_Autocratic_>;
  democracy_type?: Maybe<Array<Maybe<_Government_System_Types_Democracy_>>>;
  democracy_typeAggregate?: Maybe<_Government_System_Types_Democracy_AggregateResult>;
  description?: Maybe<Scalars["String"]["output"]>;
  disestablished?: Maybe<_Country_Event_>;
  economic_system_type: Array<_Government_System_Types_Economic_System_>;
  economic_system_typeAggregate?: Maybe<_Government_System_Types_Economic_System_AggregateResult>;
  established?: Maybe<_Country_Event_>;
  head_of_state_or_government_system_type: _Government_System_Types_Head_Of_State_Or_Government;
  id: Scalars["ID"]["output"];
  monarchy_type?: Maybe<_Government_System_Types_Monarchy_>;
  name_id: Scalars["String"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  oligarchy_type?: Maybe<_Government_System_Types_Oligarchy_>;
  partisan_system_type?: Maybe<_Government_System_Types_Partisan_Systems_>;
  religious_ideology_type: _Government_System_Types_Religion_;
};

export type _Government_System_Type_Active_Official_System_Type_OfArgs = {
  filter?: InputMaybe<_Country_Government_Filter>;
};

export type _Government_System_Type_Authority_Concentration_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
};

export type _Government_System_Type_Authority_Concentration_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
};

export type _Government_System_Type_Authority_Distribution_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
};

export type _Government_System_Type_Authority_Source_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export type _Government_System_Type_Authority_Source_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
};

export type _Government_System_Type_Authority_Status_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export type _Government_System_Type_Authority_Status_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
};

export type _Government_System_Type_Autocratic_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
};

export type _Government_System_Type_Democracy_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export type _Government_System_Type_Democracy_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
};

export type _Government_System_Type_DisestablishedArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Government_System_Type_Economic_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export type _Government_System_Type_Economic_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
};

export type _Government_System_Type_EstablishedArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Government_System_Type_Head_Of_State_Or_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
};

export type _Government_System_Type_Monarchy_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
};

export type _Government_System_Type_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Type_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Type_Oligarchy_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
};

export type _Government_System_Type_Partisan_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
};

export type _Government_System_Type_Religious_Ideology_TypeArgs = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
};

export type _Government_System_Type_AggregateResult = {
  __typename?: "_Government_System_Type_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Government_System_Type_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Type_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Type_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Type_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Type_Filter>>>;
};

export enum _Government_System_Type_HasFilter {
  ActiveOfficialSystemTypeOf = "active_official_system_type_of",
  AuthorityConcentrationType = "authority_concentration_type",
  AuthorityDistributionType = "authority_distribution_type",
  AuthoritySourceType = "authority_source_type",
  AuthorityStatusType = "authority_status_type",
  AutocraticType = "autocratic_type",
  DemocracyType = "democracy_type",
  Description = "description",
  Disestablished = "disestablished",
  EconomicSystemType = "economic_system_type",
  Established = "established",
  HeadOfStateOrGovernmentSystemType = "head_of_state_or_government_system_type",
  MonarchyType = "monarchy_type",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  OligarchyType = "oligarchy_type",
  PartisanSystemType = "partisan_system_type",
  ReligiousIdeologyType = "religious_ideology_type",
}

export type _Government_System_Type_Order = {
  asc?: InputMaybe<_Government_System_Type_Orderable>;
  desc?: InputMaybe<_Government_System_Type_Orderable>;
  then?: InputMaybe<_Government_System_Type_Order>;
};

export enum _Government_System_Type_Orderable {
  Description = "description",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Government_System_Type_Patch = {
  active_official_system_type_of?: InputMaybe<_Country_Government_Ref>;
  authority_concentration_type?: InputMaybe<Array<_Government_System_Types_Authority_Concentration_Ref>>;
  authority_distribution_type?: InputMaybe<_Government_System_Types_Authority_Distribution_Ref>;
  authority_source_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Source_Ref>>>;
  authority_status_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Status_Ref>>>;
  autocratic_type?: InputMaybe<_Government_System_Types_Autocratic_Ref>;
  democracy_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Ref>>>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<_Country_Event_Ref>;
  economic_system_type?: InputMaybe<Array<_Government_System_Types_Economic_System_Ref>>;
  established?: InputMaybe<_Country_Event_Ref>;
  head_of_state_or_government_system_type?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentRef>;
  monarchy_type?: InputMaybe<_Government_System_Types_Monarchy_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  oligarchy_type?: InputMaybe<_Government_System_Types_Oligarchy_Ref>;
  partisan_system_type?: InputMaybe<_Government_System_Types_Partisan_Systems_Ref>;
  religious_ideology_type?: InputMaybe<_Government_System_Types_Religion_Ref>;
};

export type _Government_System_Type_Ref = {
  active_official_system_type_of?: InputMaybe<_Country_Government_Ref>;
  authority_concentration_type?: InputMaybe<Array<_Government_System_Types_Authority_Concentration_Ref>>;
  authority_distribution_type?: InputMaybe<_Government_System_Types_Authority_Distribution_Ref>;
  authority_source_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Source_Ref>>>;
  authority_status_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Status_Ref>>>;
  autocratic_type?: InputMaybe<_Government_System_Types_Autocratic_Ref>;
  democracy_type?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Ref>>>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<_Country_Event_Ref>;
  economic_system_type?: InputMaybe<Array<_Government_System_Types_Economic_System_Ref>>;
  established?: InputMaybe<_Country_Event_Ref>;
  head_of_state_or_government_system_type?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentRef>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  monarchy_type?: InputMaybe<_Government_System_Types_Monarchy_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  oligarchy_type?: InputMaybe<_Government_System_Types_Oligarchy_Ref>;
  partisan_system_type?: InputMaybe<_Government_System_Types_Partisan_Systems_Ref>;
  religious_ideology_type?: InputMaybe<_Government_System_Types_Religion_Ref>;
};

export type _Government_System_Types_Authority_Concentration_ = {
  __typename?: "_Government_System_Types_Authority_Concentration_";
  accountability_towards_people: Scalars["String"]["output"];
  authority_held_by: Scalars["String"]["output"];
  description: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_hierarchy?: Maybe<Array<Scalars["String"]["output"]>>;
  public_access_to_means_of_peaceful_power_transfer: Scalars["String"]["output"];
};

export type _Government_System_Types_Authority_Concentration_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Authority_Concentration_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Authority_Concentration_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Authority_Concentration_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Authority_Concentration_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Authority_Concentration_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Authority_Concentration_AggregateResult = {
  __typename?: "_Government_System_Types_Authority_Concentration_AggregateResult";
  accountability_towards_peopleMax?: Maybe<Scalars["String"]["output"]>;
  accountability_towards_peopleMin?: Maybe<Scalars["String"]["output"]>;
  authority_held_byMax?: Maybe<Scalars["String"]["output"]>;
  authority_held_byMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  public_access_to_means_of_peaceful_power_transferMax?: Maybe<Scalars["String"]["output"]>;
  public_access_to_means_of_peaceful_power_transferMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Authority_Concentration_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Concentration_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Concentration_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Concentration_Filter>>>;
};

export enum _Government_System_Types_Authority_Concentration_HasFilter {
  AccountabilityTowardsPeople = "accountability_towards_people",
  AuthorityHeldBy = "authority_held_by",
  Description = "description",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerHierarchy = "power_hierarchy",
  PublicAccessToMeansOfPeacefulPowerTransfer = "public_access_to_means_of_peaceful_power_transfer",
}

export type _Government_System_Types_Authority_Concentration_Order = {
  asc?: InputMaybe<_Government_System_Types_Authority_Concentration_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Authority_Concentration_Orderable>;
  then?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
};

export enum _Government_System_Types_Authority_Concentration_Orderable {
  AccountabilityTowardsPeople = "accountability_towards_people",
  AuthorityHeldBy = "authority_held_by",
  Description = "description",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PublicAccessToMeansOfPeacefulPowerTransfer = "public_access_to_means_of_peaceful_power_transfer",
}

export type _Government_System_Types_Authority_Concentration_Patch = {
  accountability_towards_people?: InputMaybe<Scalars["String"]["input"]>;
  authority_held_by?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_hierarchy?: InputMaybe<Array<Scalars["String"]["input"]>>;
  public_access_to_means_of_peaceful_power_transfer?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Concentration_Ref = {
  accountability_towards_people?: InputMaybe<Scalars["String"]["input"]>;
  authority_held_by?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_hierarchy?: InputMaybe<Array<Scalars["String"]["input"]>>;
  public_access_to_means_of_peaceful_power_transfer?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Distribution_ = {
  __typename?: "_Government_System_Types_Authority_Distribution_";
  central_authority_role: Scalars["String"]["output"];
  description: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  law_uniformity: Scalars["String"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_distribution: Scalars["String"]["output"];
  state_sovereignty: Scalars["String"]["output"];
};

export type _Government_System_Types_Authority_Distribution_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Authority_Distribution_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Authority_Distribution_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Authority_Distribution_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Authority_Distribution_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Authority_Distribution_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Authority_Distribution_AggregateResult = {
  __typename?: "_Government_System_Types_Authority_Distribution_AggregateResult";
  central_authority_roleMax?: Maybe<Scalars["String"]["output"]>;
  central_authority_roleMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  law_uniformityMax?: Maybe<Scalars["String"]["output"]>;
  law_uniformityMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  power_distributionMax?: Maybe<Scalars["String"]["output"]>;
  power_distributionMin?: Maybe<Scalars["String"]["output"]>;
  state_sovereigntyMax?: Maybe<Scalars["String"]["output"]>;
  state_sovereigntyMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Authority_Distribution_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Distribution_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Distribution_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Distribution_Filter>>>;
};

export enum _Government_System_Types_Authority_Distribution_HasFilter {
  CentralAuthorityRole = "central_authority_role",
  Description = "description",
  GovernmentSystemType = "government_system_type",
  LawUniformity = "law_uniformity",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerDistribution = "power_distribution",
  StateSovereignty = "state_sovereignty",
}

export type _Government_System_Types_Authority_Distribution_Order = {
  asc?: InputMaybe<_Government_System_Types_Authority_Distribution_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Authority_Distribution_Orderable>;
  then?: InputMaybe<_Government_System_Types_Authority_Distribution_Order>;
};

export enum _Government_System_Types_Authority_Distribution_Orderable {
  CentralAuthorityRole = "central_authority_role",
  Description = "description",
  LawUniformity = "law_uniformity",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PowerDistribution = "power_distribution",
  StateSovereignty = "state_sovereignty",
}

export type _Government_System_Types_Authority_Distribution_Patch = {
  central_authority_role?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  law_uniformity?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_distribution?: InputMaybe<Scalars["String"]["input"]>;
  state_sovereignty?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Distribution_Ref = {
  central_authority_role?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  law_uniformity?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_distribution?: InputMaybe<Scalars["String"]["input"]>;
  state_sovereignty?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Source_ = {
  __typename?: "_Government_System_Types_Authority_Source_";
  description: Scalars["String"]["output"];
  governance_mechanisms: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_structure: Scalars["String"]["output"];
  role_of_leadership: Scalars["String"]["output"];
  source_of_legitimacy: Scalars["String"]["output"];
};

export type _Government_System_Types_Authority_Source_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Authority_Source_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Authority_Source_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Authority_Source_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Authority_Source_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Authority_Source_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Authority_Source_AggregateResult = {
  __typename?: "_Government_System_Types_Authority_Source_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  governance_mechanismsMax?: Maybe<Scalars["String"]["output"]>;
  governance_mechanismsMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  power_structureMax?: Maybe<Scalars["String"]["output"]>;
  power_structureMin?: Maybe<Scalars["String"]["output"]>;
  role_of_leadershipMax?: Maybe<Scalars["String"]["output"]>;
  role_of_leadershipMin?: Maybe<Scalars["String"]["output"]>;
  source_of_legitimacyMax?: Maybe<Scalars["String"]["output"]>;
  source_of_legitimacyMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Authority_Source_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Source_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Source_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Source_Filter>>>;
};

export enum _Government_System_Types_Authority_Source_HasFilter {
  Description = "description",
  GovernanceMechanisms = "governance_mechanisms",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerStructure = "power_structure",
  RoleOfLeadership = "role_of_leadership",
  SourceOfLegitimacy = "source_of_legitimacy",
}

export type _Government_System_Types_Authority_Source_Order = {
  asc?: InputMaybe<_Government_System_Types_Authority_Source_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Authority_Source_Orderable>;
  then?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export enum _Government_System_Types_Authority_Source_Orderable {
  Description = "description",
  GovernanceMechanisms = "governance_mechanisms",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PowerStructure = "power_structure",
  RoleOfLeadership = "role_of_leadership",
  SourceOfLegitimacy = "source_of_legitimacy",
}

export type _Government_System_Types_Authority_Source_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_mechanisms?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_structure?: InputMaybe<Scalars["String"]["input"]>;
  role_of_leadership?: InputMaybe<Scalars["String"]["input"]>;
  source_of_legitimacy?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Source_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_mechanisms?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_structure?: InputMaybe<Scalars["String"]["input"]>;
  role_of_leadership?: InputMaybe<Scalars["String"]["input"]>;
  source_of_legitimacy?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Status_ = {
  __typename?: "_Government_System_Types_Authority_Status_";
  control_and_authority: Scalars["String"]["output"];
  description: Scalars["String"]["output"];
  governance_status: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  international_recognition: Scalars["String"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  objective_and_focus: Scalars["String"]["output"];
};

export type _Government_System_Types_Authority_Status_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Authority_Status_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Authority_Status_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Authority_Status_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Authority_Status_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Authority_Status_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Authority_Status_AggregateResult = {
  __typename?: "_Government_System_Types_Authority_Status_AggregateResult";
  control_and_authorityMax?: Maybe<Scalars["String"]["output"]>;
  control_and_authorityMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  governance_statusMax?: Maybe<Scalars["String"]["output"]>;
  governance_statusMin?: Maybe<Scalars["String"]["output"]>;
  international_recognitionMax?: Maybe<Scalars["String"]["output"]>;
  international_recognitionMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  objective_and_focusMax?: Maybe<Scalars["String"]["output"]>;
  objective_and_focusMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Authority_Status_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Status_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Status_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Authority_Status_Filter>>>;
};

export enum _Government_System_Types_Authority_Status_HasFilter {
  ControlAndAuthority = "control_and_authority",
  Description = "description",
  GovernanceStatus = "governance_status",
  GovernmentSystemType = "government_system_type",
  InternationalRecognition = "international_recognition",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ObjectiveAndFocus = "objective_and_focus",
}

export type _Government_System_Types_Authority_Status_Order = {
  asc?: InputMaybe<_Government_System_Types_Authority_Status_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Authority_Status_Orderable>;
  then?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export enum _Government_System_Types_Authority_Status_Orderable {
  ControlAndAuthority = "control_and_authority",
  Description = "description",
  GovernanceStatus = "governance_status",
  InternationalRecognition = "international_recognition",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  ObjectiveAndFocus = "objective_and_focus",
}

export type _Government_System_Types_Authority_Status_Patch = {
  control_and_authority?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_status?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  international_recognition?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  objective_and_focus?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Authority_Status_Ref = {
  control_and_authority?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_status?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  international_recognition?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  objective_and_focus?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Autocratic_ = {
  __typename?: "_Government_System_Types_Autocratic_";
  description: Scalars["String"]["output"];
  formation_context: Scalars["String"]["output"];
  governance_style: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  leadership_origin: Scalars["String"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_consolidation: Scalars["String"]["output"];
};

export type _Government_System_Types_Autocratic_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Autocratic_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Autocratic_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Autocratic_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Autocratic_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Autocratic_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Autocratic_AggregateResult = {
  __typename?: "_Government_System_Types_Autocratic_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  formation_contextMax?: Maybe<Scalars["String"]["output"]>;
  formation_contextMin?: Maybe<Scalars["String"]["output"]>;
  governance_styleMax?: Maybe<Scalars["String"]["output"]>;
  governance_styleMin?: Maybe<Scalars["String"]["output"]>;
  leadership_originMax?: Maybe<Scalars["String"]["output"]>;
  leadership_originMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  power_consolidationMax?: Maybe<Scalars["String"]["output"]>;
  power_consolidationMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Autocratic_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Autocratic_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Autocratic_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Autocratic_Filter>>>;
};

export enum _Government_System_Types_Autocratic_HasFilter {
  Description = "description",
  FormationContext = "formation_context",
  GovernanceStyle = "governance_style",
  GovernmentSystemType = "government_system_type",
  LeadershipOrigin = "leadership_origin",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerConsolidation = "power_consolidation",
}

export type _Government_System_Types_Autocratic_Order = {
  asc?: InputMaybe<_Government_System_Types_Autocratic_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Autocratic_Orderable>;
  then?: InputMaybe<_Government_System_Types_Autocratic_Order>;
};

export enum _Government_System_Types_Autocratic_Orderable {
  Description = "description",
  FormationContext = "formation_context",
  GovernanceStyle = "governance_style",
  LeadershipOrigin = "leadership_origin",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PowerConsolidation = "power_consolidation",
}

export type _Government_System_Types_Autocratic_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  formation_context?: InputMaybe<Scalars["String"]["input"]>;
  governance_style?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  leadership_origin?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_consolidation?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Autocratic_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  formation_context?: InputMaybe<Scalars["String"]["input"]>;
  governance_style?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  leadership_origin?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_consolidation?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Democracy_ = {
  __typename?: "_Government_System_Types_Democracy_";
  description: Scalars["String"]["output"];
  governance_focus: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  participation_level: Scalars["String"]["output"];
  selection_method: Scalars["String"]["output"];
  system_stability: Scalars["String"]["output"];
};

export type _Government_System_Types_Democracy_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Democracy_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Democracy_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Democracy_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Democracy_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Democracy_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Democracy_AggregateResult = {
  __typename?: "_Government_System_Types_Democracy_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  governance_focusMax?: Maybe<Scalars["String"]["output"]>;
  governance_focusMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  participation_levelMax?: Maybe<Scalars["String"]["output"]>;
  participation_levelMin?: Maybe<Scalars["String"]["output"]>;
  selection_methodMax?: Maybe<Scalars["String"]["output"]>;
  selection_methodMin?: Maybe<Scalars["String"]["output"]>;
  system_stabilityMax?: Maybe<Scalars["String"]["output"]>;
  system_stabilityMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Democracy_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Filter>>>;
};

export enum _Government_System_Types_Democracy_HasFilter {
  Description = "description",
  GovernanceFocus = "governance_focus",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ParticipationLevel = "participation_level",
  SelectionMethod = "selection_method",
  SystemStability = "system_stability",
}

export type _Government_System_Types_Democracy_Order = {
  asc?: InputMaybe<_Government_System_Types_Democracy_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Democracy_Orderable>;
  then?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export enum _Government_System_Types_Democracy_Orderable {
  Description = "description",
  GovernanceFocus = "governance_focus",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  ParticipationLevel = "participation_level",
  SelectionMethod = "selection_method",
  SystemStability = "system_stability",
}

export type _Government_System_Types_Democracy_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_focus?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  participation_level?: InputMaybe<Scalars["String"]["input"]>;
  selection_method?: InputMaybe<Scalars["String"]["input"]>;
  system_stability?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Democracy_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_focus?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  participation_level?: InputMaybe<Scalars["String"]["input"]>;
  selection_method?: InputMaybe<Scalars["String"]["input"]>;
  system_stability?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Economic_System_ = {
  __typename?: "_Government_System_Types_Economic_System_";
  description: Scalars["String"]["output"];
  economic_drivers: Scalars["String"]["output"];
  governance_approach: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  ownership_and_control: Scalars["String"]["output"];
  societal_structure: Scalars["String"]["output"];
};

export type _Government_System_Types_Economic_System_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Economic_System_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Economic_System_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Economic_System_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Economic_System_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Economic_System_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Economic_System_AggregateResult = {
  __typename?: "_Government_System_Types_Economic_System_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  economic_driversMax?: Maybe<Scalars["String"]["output"]>;
  economic_driversMin?: Maybe<Scalars["String"]["output"]>;
  governance_approachMax?: Maybe<Scalars["String"]["output"]>;
  governance_approachMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  ownership_and_controlMax?: Maybe<Scalars["String"]["output"]>;
  ownership_and_controlMin?: Maybe<Scalars["String"]["output"]>;
  societal_structureMax?: Maybe<Scalars["String"]["output"]>;
  societal_structureMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Economic_System_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Economic_System_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Economic_System_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Economic_System_Filter>>>;
};

export enum _Government_System_Types_Economic_System_HasFilter {
  Description = "description",
  EconomicDrivers = "economic_drivers",
  GovernanceApproach = "governance_approach",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  OwnershipAndControl = "ownership_and_control",
  SocietalStructure = "societal_structure",
}

export type _Government_System_Types_Economic_System_Order = {
  asc?: InputMaybe<_Government_System_Types_Economic_System_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Economic_System_Orderable>;
  then?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export enum _Government_System_Types_Economic_System_Orderable {
  Description = "description",
  EconomicDrivers = "economic_drivers",
  GovernanceApproach = "governance_approach",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  OwnershipAndControl = "ownership_and_control",
  SocietalStructure = "societal_structure",
}

export type _Government_System_Types_Economic_System_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  economic_drivers?: InputMaybe<Scalars["String"]["input"]>;
  governance_approach?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  ownership_and_control?: InputMaybe<Scalars["String"]["input"]>;
  societal_structure?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Economic_System_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  economic_drivers?: InputMaybe<Scalars["String"]["input"]>;
  governance_approach?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  ownership_and_control?: InputMaybe<Scalars["String"]["input"]>;
  societal_structure?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Head_Of_State_Or_Government = {
  __typename?: "_Government_System_Types_Head_Of_State_Or_Government";
  authority_scope: Scalars["String"]["output"];
  description: Scalars["String"]["output"];
  government_integration: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  leadership_structure: Scalars["String"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_distribution: Scalars["String"]["output"];
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentGovernment_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentGovernment_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentNamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentNamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentNode_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentNode_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult = {
  __typename?: "_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult";
  authority_scopeMax?: Maybe<Scalars["String"]["output"]>;
  authority_scopeMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  government_integrationMax?: Maybe<Scalars["String"]["output"]>;
  government_integrationMin?: Maybe<Scalars["String"]["output"]>;
  leadership_structureMax?: Maybe<Scalars["String"]["output"]>;
  leadership_structureMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  power_distributionMax?: Maybe<Scalars["String"]["output"]>;
  power_distributionMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentFilter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>>>;
};

export enum _Government_System_Types_Head_Of_State_Or_GovernmentHasFilter {
  AuthorityScope = "authority_scope",
  Description = "description",
  GovernmentIntegration = "government_integration",
  GovernmentSystemType = "government_system_type",
  LeadershipStructure = "leadership_structure",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerDistribution = "power_distribution",
}

export type _Government_System_Types_Head_Of_State_Or_GovernmentOrder = {
  asc?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrderable>;
  desc?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrderable>;
  then?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrder>;
};

export enum _Government_System_Types_Head_Of_State_Or_GovernmentOrderable {
  AuthorityScope = "authority_scope",
  Description = "description",
  GovernmentIntegration = "government_integration",
  LeadershipStructure = "leadership_structure",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PowerDistribution = "power_distribution",
}

export type _Government_System_Types_Head_Of_State_Or_GovernmentPatch = {
  authority_scope?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_integration?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  leadership_structure?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_distribution?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentRef = {
  authority_scope?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_integration?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  leadership_structure?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_distribution?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Monarchy_ = {
  __typename?: "_Government_System_Types_Monarchy_";
  authority_level: Scalars["String"]["output"];
  constitutional_limitations: Scalars["String"]["output"];
  description: Scalars["String"]["output"];
  governing_powers_in: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_source: Scalars["String"]["output"];
  reign_term: Scalars["String"]["output"];
};

export type _Government_System_Types_Monarchy_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Monarchy_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Monarchy_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Monarchy_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Monarchy_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Monarchy_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Monarchy_AggregateResult = {
  __typename?: "_Government_System_Types_Monarchy_AggregateResult";
  authority_levelMax?: Maybe<Scalars["String"]["output"]>;
  authority_levelMin?: Maybe<Scalars["String"]["output"]>;
  constitutional_limitationsMax?: Maybe<Scalars["String"]["output"]>;
  constitutional_limitationsMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  governing_powers_inMax?: Maybe<Scalars["String"]["output"]>;
  governing_powers_inMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  power_sourceMax?: Maybe<Scalars["String"]["output"]>;
  power_sourceMin?: Maybe<Scalars["String"]["output"]>;
  reign_termMax?: Maybe<Scalars["String"]["output"]>;
  reign_termMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Monarchy_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Monarchy_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Monarchy_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Monarchy_Filter>>>;
};

export enum _Government_System_Types_Monarchy_HasFilter {
  AuthorityLevel = "authority_level",
  ConstitutionalLimitations = "constitutional_limitations",
  Description = "description",
  GoverningPowersIn = "governing_powers_in",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerSource = "power_source",
  ReignTerm = "reign_term",
}

export type _Government_System_Types_Monarchy_Order = {
  asc?: InputMaybe<_Government_System_Types_Monarchy_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Monarchy_Orderable>;
  then?: InputMaybe<_Government_System_Types_Monarchy_Order>;
};

export enum _Government_System_Types_Monarchy_Orderable {
  AuthorityLevel = "authority_level",
  ConstitutionalLimitations = "constitutional_limitations",
  Description = "description",
  GoverningPowersIn = "governing_powers_in",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PowerSource = "power_source",
  ReignTerm = "reign_term",
}

export type _Government_System_Types_Monarchy_Patch = {
  authority_level?: InputMaybe<Scalars["String"]["input"]>;
  constitutional_limitations?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  governing_powers_in?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_source?: InputMaybe<Scalars["String"]["input"]>;
  reign_term?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Monarchy_Ref = {
  authority_level?: InputMaybe<Scalars["String"]["input"]>;
  constitutional_limitations?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  governing_powers_in?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_source?: InputMaybe<Scalars["String"]["input"]>;
  reign_term?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Oligarchy_ = {
  __typename?: "_Government_System_Types_Oligarchy_";
  description: Scalars["String"]["output"];
  governance_focus: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  power_basis: Scalars["String"]["output"];
  selection_mechanism: Scalars["String"]["output"];
  stability_and_order: Scalars["String"]["output"];
};

export type _Government_System_Types_Oligarchy_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Oligarchy_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Oligarchy_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Oligarchy_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Oligarchy_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Oligarchy_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Oligarchy_AggregateResult = {
  __typename?: "_Government_System_Types_Oligarchy_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  governance_focusMax?: Maybe<Scalars["String"]["output"]>;
  governance_focusMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  power_basisMax?: Maybe<Scalars["String"]["output"]>;
  power_basisMin?: Maybe<Scalars["String"]["output"]>;
  selection_mechanismMax?: Maybe<Scalars["String"]["output"]>;
  selection_mechanismMin?: Maybe<Scalars["String"]["output"]>;
  stability_and_orderMax?: Maybe<Scalars["String"]["output"]>;
  stability_and_orderMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Oligarchy_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Oligarchy_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Oligarchy_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Oligarchy_Filter>>>;
};

export enum _Government_System_Types_Oligarchy_HasFilter {
  Description = "description",
  GovernanceFocus = "governance_focus",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PowerBasis = "power_basis",
  SelectionMechanism = "selection_mechanism",
  StabilityAndOrder = "stability_and_order",
}

export type _Government_System_Types_Oligarchy_Order = {
  asc?: InputMaybe<_Government_System_Types_Oligarchy_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Oligarchy_Orderable>;
  then?: InputMaybe<_Government_System_Types_Oligarchy_Order>;
};

export enum _Government_System_Types_Oligarchy_Orderable {
  Description = "description",
  GovernanceFocus = "governance_focus",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PowerBasis = "power_basis",
  SelectionMechanism = "selection_mechanism",
  StabilityAndOrder = "stability_and_order",
}

export type _Government_System_Types_Oligarchy_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_focus?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_basis?: InputMaybe<Scalars["String"]["input"]>;
  selection_mechanism?: InputMaybe<Scalars["String"]["input"]>;
  stability_and_order?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Oligarchy_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  governance_focus?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  power_basis?: InputMaybe<Scalars["String"]["input"]>;
  selection_mechanism?: InputMaybe<Scalars["String"]["input"]>;
  stability_and_order?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Partisan_Systems_ = {
  __typename?: "_Government_System_Types_Partisan_Systems_";
  description: Scalars["String"]["output"];
  government_formation: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  party_influence: Scalars["String"]["output"];
  political_stability: Scalars["String"]["output"];
  representation: Scalars["String"]["output"];
};

export type _Government_System_Types_Partisan_Systems_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Partisan_Systems_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Partisan_Systems_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Partisan_Systems_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Partisan_Systems_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Partisan_Systems_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Partisan_Systems_AggregateResult = {
  __typename?: "_Government_System_Types_Partisan_Systems_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  government_formationMax?: Maybe<Scalars["String"]["output"]>;
  government_formationMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  party_influenceMax?: Maybe<Scalars["String"]["output"]>;
  party_influenceMin?: Maybe<Scalars["String"]["output"]>;
  political_stabilityMax?: Maybe<Scalars["String"]["output"]>;
  political_stabilityMin?: Maybe<Scalars["String"]["output"]>;
  representationMax?: Maybe<Scalars["String"]["output"]>;
  representationMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Partisan_Systems_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Partisan_Systems_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Partisan_Systems_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Partisan_Systems_Filter>>>;
};

export enum _Government_System_Types_Partisan_Systems_HasFilter {
  Description = "description",
  GovernmentFormation = "government_formation",
  GovernmentSystemType = "government_system_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PartyInfluence = "party_influence",
  PoliticalStability = "political_stability",
  Representation = "representation",
}

export type _Government_System_Types_Partisan_Systems_Order = {
  asc?: InputMaybe<_Government_System_Types_Partisan_Systems_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Partisan_Systems_Orderable>;
  then?: InputMaybe<_Government_System_Types_Partisan_Systems_Order>;
};

export enum _Government_System_Types_Partisan_Systems_Orderable {
  Description = "description",
  GovernmentFormation = "government_formation",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  PartyInfluence = "party_influence",
  PoliticalStability = "political_stability",
  Representation = "representation",
}

export type _Government_System_Types_Partisan_Systems_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_formation?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  party_influence?: InputMaybe<Scalars["String"]["input"]>;
  political_stability?: InputMaybe<Scalars["String"]["input"]>;
  representation?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Partisan_Systems_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_formation?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  party_influence?: InputMaybe<Scalars["String"]["input"]>;
  political_stability?: InputMaybe<Scalars["String"]["input"]>;
  representation?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Religion_ = {
  __typename?: "_Government_System_Types_Religion_";
  description: Scalars["String"]["output"];
  government_system_type?: Maybe<Array<Maybe<_Government_System_Type_>>>;
  government_system_typeAggregate?: Maybe<_Government_System_Type_AggregateResult>;
  id: Scalars["ID"]["output"];
  legal_framework: Scalars["String"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  religious_freedom: Scalars["String"]["output"];
  religious_influence: Scalars["String"]["output"];
  state_support: Scalars["String"]["output"];
};

export type _Government_System_Types_Religion_Government_System_TypeArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Type_Order>;
};

export type _Government_System_Types_Religion_Government_System_TypeAggregateArgs = {
  filter?: InputMaybe<_Government_System_Type_Filter>;
};

export type _Government_System_Types_Religion_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Government_System_Types_Religion_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Government_System_Types_Religion_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Government_System_Types_Religion_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Government_System_Types_Religion_AggregateResult = {
  __typename?: "_Government_System_Types_Religion_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  legal_frameworkMax?: Maybe<Scalars["String"]["output"]>;
  legal_frameworkMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  religious_freedomMax?: Maybe<Scalars["String"]["output"]>;
  religious_freedomMin?: Maybe<Scalars["String"]["output"]>;
  religious_influenceMax?: Maybe<Scalars["String"]["output"]>;
  religious_influenceMin?: Maybe<Scalars["String"]["output"]>;
  state_supportMax?: Maybe<Scalars["String"]["output"]>;
  state_supportMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Government_System_Types_Religion_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Government_System_Types_Religion_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Government_System_Types_Religion_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Government_System_Types_Religion_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Government_System_Types_Religion_Filter>>>;
};

export enum _Government_System_Types_Religion_HasFilter {
  Description = "description",
  GovernmentSystemType = "government_system_type",
  LegalFramework = "legal_framework",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ReligiousFreedom = "religious_freedom",
  ReligiousInfluence = "religious_influence",
  StateSupport = "state_support",
}

export type _Government_System_Types_Religion_Order = {
  asc?: InputMaybe<_Government_System_Types_Religion_Orderable>;
  desc?: InputMaybe<_Government_System_Types_Religion_Orderable>;
  then?: InputMaybe<_Government_System_Types_Religion_Order>;
};

export enum _Government_System_Types_Religion_Orderable {
  Description = "description",
  LegalFramework = "legal_framework",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  ReligiousFreedom = "religious_freedom",
  ReligiousInfluence = "religious_influence",
  StateSupport = "state_support",
}

export type _Government_System_Types_Religion_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  legal_framework?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  religious_freedom?: InputMaybe<Scalars["String"]["input"]>;
  religious_influence?: InputMaybe<Scalars["String"]["input"]>;
  state_support?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Government_System_Types_Religion_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_system_type?: InputMaybe<Array<InputMaybe<_Government_System_Type_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  legal_framework?: InputMaybe<Scalars["String"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  religious_freedom?: InputMaybe<Scalars["String"]["input"]>;
  religious_influence?: InputMaybe<Scalars["String"]["input"]>;
  state_support?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Indian_Administrative_Divisions = {
  __typename?: "_Indian_Administrative_Divisions";
  districts?: Maybe<Array<Maybe<_Indian_District_>>>;
  districtsAggregate?: Maybe<_Indian_District_AggregateResult>;
  id: Scalars["ID"]["output"];
  states_union_territories?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  states_union_territoriesAggregate?: Maybe<_Indian_State_Union_Territory_AggregateResult>;
};

export type _Indian_Administrative_DivisionsDistrictsArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type _Indian_Administrative_DivisionsDistrictsAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type _Indian_Administrative_DivisionsStates_Union_TerritoriesArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type _Indian_Administrative_DivisionsStates_Union_TerritoriesAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type _Indian_Administrative_DivisionsAggregateResult = {
  __typename?: "_Indian_Administrative_DivisionsAggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
};

export type _Indian_Administrative_DivisionsFilter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Administrative_DivisionsFilter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Administrative_DivisionsHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Administrative_DivisionsFilter>>>;
};

export enum _Indian_Administrative_DivisionsHasFilter {
  Districts = "districts",
  StatesUnionTerritories = "states_union_territories",
}

export type _Indian_Administrative_DivisionsPatch = {
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
};

export type _Indian_Administrative_DivisionsRef = {
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
};

export type _Indian_District_ = {
  __typename?: "_Indian_District_";
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  id: Scalars["ID"]["output"];
  loksabha_constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  loksabha_constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  regions?: Maybe<Array<Maybe<_Indian_District_Region_>>>;
  regionsAggregate?: Maybe<_Indian_District_Region_AggregateResult>;
  states_union_territories?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  states_union_territoriesAggregate?: Maybe<_Indian_State_Union_Territory_AggregateResult>;
  vidhansabha_constituencies?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  vidhansabha_constituenciesAggregate?: Maybe<_Indian_Vidhansabha_Constituency_AggregateResult>;
};

export type _Indian_District_Loksabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Indian_District_Loksabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_District_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_District_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_District_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_District_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_District_RegionsArgs = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Region_Order>;
};

export type _Indian_District_RegionsAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Region_Filter>;
};

export type _Indian_District_States_Union_TerritoriesArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type _Indian_District_States_Union_TerritoriesAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type _Indian_District_Vidhansabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type _Indian_District_Vidhansabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type _Indian_District_AggregateResult = {
  __typename?: "_Indian_District_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_District_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_District_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_District_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_District_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_District_Filter>>>;
};

export enum _Indian_District_HasFilter {
  Disestablished = "disestablished",
  Established = "established",
  LoksabhaConstituencies = "loksabha_constituencies",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Regions = "regions",
  StatesUnionTerritories = "states_union_territories",
  VidhansabhaConstituencies = "vidhansabha_constituencies",
}

export type _Indian_District_Order = {
  asc?: InputMaybe<_Indian_District_Orderable>;
  desc?: InputMaybe<_Indian_District_Orderable>;
  then?: InputMaybe<_Indian_District_Order>;
};

export enum _Indian_District_Orderable {
  Disestablished = "disestablished",
  Established = "established",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_District_Patch = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_District_Ref = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_District_Region_ = {
  __typename?: "_Indian_District_Region_";
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  geo_boundary?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundaryAggregate?: Maybe<_Geo_AggregateResult>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  self?: Maybe<_Indian_District_>;
};

export type _Indian_District_Region_Geo_BoundaryArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Indian_District_Region_Geo_BoundaryAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Indian_District_Region_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_District_Region_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_District_Region_SelfArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type _Indian_District_Region_AggregateResult = {
  __typename?: "_Indian_District_Region_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_District_Region_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_District_Region_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_District_Region_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_District_Region_Filter>>>;
};

export enum _Indian_District_Region_HasFilter {
  Disestablished = "disestablished",
  Established = "established",
  GeoBoundary = "geo_boundary",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Self = "self",
}

export type _Indian_District_Region_Order = {
  asc?: InputMaybe<_Indian_District_Region_Orderable>;
  desc?: InputMaybe<_Indian_District_Region_Orderable>;
  then?: InputMaybe<_Indian_District_Region_Order>;
};

export enum _Indian_District_Region_Orderable {
  Disestablished = "disestablished",
  Established = "established",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_District_Region_Patch = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_District_Ref>;
};

export type _Indian_District_Region_Ref = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_District_Ref>;
};

export type _Indian_Government_Official_Role_ = {
  __typename?: "_Indian_Government_Official_Role_";
  description?: Maybe<Scalars["String"]["output"]>;
  id: Scalars["ID"]["output"];
  loksabha_members?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  loksabha_membersAggregate?: Maybe<_Indian_Loksabha_Member_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Indian_Government_Official_Role_Loksabha_MembersArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type _Indian_Government_Official_Role_Loksabha_MembersAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Government_Official_Role_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Government_Official_Role_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Government_Official_Role_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Government_Official_Role_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Government_Official_Role_AggregateResult = {
  __typename?: "_Indian_Government_Official_Role_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Government_Official_Role_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Government_Official_Role_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Government_Official_Role_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Government_Official_Role_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Government_Official_Role_Filter>>>;
};

export enum _Indian_Government_Official_Role_HasFilter {
  Description = "description",
  LoksabhaMembers = "loksabha_members",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Indian_Government_Official_Role_Order = {
  asc?: InputMaybe<_Indian_Government_Official_Role_Orderable>;
  desc?: InputMaybe<_Indian_Government_Official_Role_Orderable>;
  then?: InputMaybe<_Indian_Government_Official_Role_Order>;
};

export enum _Indian_Government_Official_Role_Orderable {
  Description = "description",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Government_Official_Role_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Government_Official_Role_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Government_System_ = {
  __typename?: "_Indian_Government_System_";
  administrative_divisions?: Maybe<_Indian_Administrative_Divisions>;
  cabinet_ministers?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  cabinet_ministersAggregate?: Maybe<_Indian_Union_Government_Cabinet_Minister_AggregateResult>;
  country?: Maybe<_Country_Government_>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  loksabhaAggregate?: Maybe<_Indian_Loksabha_AggregateResult>;
  loksabha_constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  loksabha_constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  prime_ministers?: Maybe<Array<Maybe<_Indian_Prime_Minister_>>>;
  prime_ministersAggregate?: Maybe<_Indian_Prime_Minister_AggregateResult>;
  union_governments?: Maybe<Array<Maybe<_Indian_Union_Government_>>>;
  union_governmentsAggregate?: Maybe<_Indian_Union_Government_AggregateResult>;
};

export type _Indian_Government_System_Administrative_DivisionsArgs = {
  filter?: InputMaybe<_Indian_Administrative_DivisionsFilter>;
};

export type _Indian_Government_System_Cabinet_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type _Indian_Government_System_Cabinet_MinistersAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
};

export type _Indian_Government_System_CountryArgs = {
  filter?: InputMaybe<_Country_Government_Filter>;
};

export type _Indian_Government_System_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type _Indian_Government_System_LoksabhaAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Government_System_Loksabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Indian_Government_System_Loksabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Government_System_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Government_System_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Government_System_Prime_MinistersArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export type _Indian_Government_System_Prime_MinistersAggregateArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Government_System_Union_GovernmentsArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Order>;
};

export type _Indian_Government_System_Union_GovernmentsAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Government_System_AggregateResult = {
  __typename?: "_Indian_Government_System_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Government_System_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Government_System_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Government_System_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Government_System_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Government_System_Filter>>>;
};

export enum _Indian_Government_System_HasFilter {
  AdministrativeDivisions = "administrative_divisions",
  CabinetMinisters = "cabinet_ministers",
  Country = "country",
  Loksabha = "loksabha",
  LoksabhaConstituencies = "loksabha_constituencies",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PrimeMinisters = "prime_ministers",
  UnionGovernments = "union_governments",
}

export type _Indian_Government_System_Order = {
  asc?: InputMaybe<_Indian_Government_System_Orderable>;
  desc?: InputMaybe<_Indian_Government_System_Orderable>;
  then?: InputMaybe<_Indian_Government_System_Order>;
};

export enum _Indian_Government_System_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Government_System_Patch = {
  administrative_divisions?: InputMaybe<_Indian_Administrative_DivisionsRef>;
  cabinet_ministers?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  country?: InputMaybe<_Country_Government_Ref>;
  loksabha?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_ministers?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Ref>>>;
  union_governments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ref>>>;
};

export type _Indian_Government_System_Ref = {
  administrative_divisions?: InputMaybe<_Indian_Administrative_DivisionsRef>;
  cabinet_ministers?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  country?: InputMaybe<_Country_Government_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_ministers?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Ref>>>;
  union_governments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ref>>>;
};

export type _Indian_Legal_Document_ = {
  __typename?: "_Indian_Legal_Document_";
  description?: Maybe<Scalars["String"]["output"]>;
  document_type: _Indian_Legal_Document_Category_;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names: Array<_Name_>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Indian_Legal_Document_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Legal_Document_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Legal_Document_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Legal_Document_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Legal_Document_AggregateResult = {
  __typename?: "_Indian_Legal_Document_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export enum _Indian_Legal_Document_Category_ {
  Act = "Act",
  Bill = "Bill",
  Constitution = "Constitution",
  Notification = "Notification",
  Order = "Order",
  Regulation = "Regulation",
  Rules = "Rules",
}

export type _Indian_Legal_Document_Category__Exact = {
  between?: InputMaybe<_Indian_Legal_Document_Category_>;
  eq?: InputMaybe<_Indian_Legal_Document_Category_>;
  ge?: InputMaybe<_Indian_Legal_Document_Category_>;
  gt?: InputMaybe<_Indian_Legal_Document_Category_>;
  in?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_Category_>>>;
  le?: InputMaybe<_Indian_Legal_Document_Category_>;
  lt?: InputMaybe<_Indian_Legal_Document_Category_>;
};

export type _Indian_Legal_Document_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_Filter>>>;
  document_type?: InputMaybe<_Indian_Legal_Document_Category__Exact>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringFullTextFilter_StringHashFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Legal_Document_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_Filter>>>;
};

export enum _Indian_Legal_Document_HasFilter {
  Description = "description",
  DocumentType = "document_type",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Indian_Legal_Document_Order = {
  asc?: InputMaybe<_Indian_Legal_Document_Orderable>;
  desc?: InputMaybe<_Indian_Legal_Document_Orderable>;
  then?: InputMaybe<_Indian_Legal_Document_Order>;
};

export enum _Indian_Legal_Document_Orderable {
  Description = "description",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Legal_Document_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  document_type?: InputMaybe<_Indian_Legal_Document_Category_>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Legal_Document_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  document_type?: InputMaybe<_Indian_Legal_Document_Category_>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Legislative_Divisions = {
  __typename?: "_Indian_Legislative_Divisions";
  id: Scalars["ID"]["output"];
  loksabha_constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  loksabha_constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  vidhansabha_constituencies?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  vidhansabha_constituenciesAggregate?: Maybe<_Indian_Vidhansabha_Constituency_AggregateResult>;
};

export type _Indian_Legislative_DivisionsLoksabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Indian_Legislative_DivisionsLoksabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Legislative_DivisionsVidhansabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type _Indian_Legislative_DivisionsVidhansabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type _Indian_Legislative_DivisionsAggregateResult = {
  __typename?: "_Indian_Legislative_DivisionsAggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
};

export type _Indian_Legislative_DivisionsFilter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Legislative_DivisionsFilter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Legislative_DivisionsHasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Legislative_DivisionsFilter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Legislative_DivisionsFilter>>>;
};

export enum _Indian_Legislative_DivisionsHasFilter {
  LoksabhaConstituencies = "loksabha_constituencies",
  VidhansabhaConstituencies = "vidhansabha_constituencies",
}

export type _Indian_Legislative_DivisionsPatch = {
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_Legislative_DivisionsRef = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_Loksabha_ = {
  __typename?: "_Indian_Loksabha_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  council_of_ministers?: Maybe<_Indian_Union_Council_Of_Ministers_>;
  elections?: Maybe<Array<Maybe<_Indian_Loksabha_Election_>>>;
  electionsAggregate?: Maybe<_Indian_Loksabha_Election_AggregateResult>;
  id: Scalars["ID"]["output"];
  loksabha_number: Scalars["Int"]["output"];
  loksabha_sessions?: Maybe<Array<Maybe<_Indian_Loksabha_Session_>>>;
  loksabha_sessionsAggregate?: Maybe<_Indian_Loksabha_Session_AggregateResult>;
  members?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  membersAggregate?: Maybe<_Indian_Loksabha_Member_AggregateResult>;
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  prime_minister?: Maybe<_Indian_Prime_Minister_>;
  term_end?: Maybe<_Date_Time_>;
  term_start?: Maybe<_Date_Time_>;
  union_government?: Maybe<_Indian_Union_Government_>;
};

export type _Indian_Loksabha_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Loksabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Indian_Loksabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Loksabha_Council_Of_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
};

export type _Indian_Loksabha_ElectionsArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export type _Indian_Loksabha_ElectionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Loksabha_SessionsArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Session_Order>;
};

export type _Indian_Loksabha_Loksabha_SessionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Session_Filter>;
};

export type _Indian_Loksabha_MembersArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type _Indian_Loksabha_MembersAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Loksabha_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Loksabha_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Loksabha_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Prime_MinisterArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Loksabha_Term_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Term_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Union_GovernmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Loksabha_AggregateResult = {
  __typename?: "_Indian_Loksabha_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  loksabha_numberAvg?: Maybe<Scalars["Float"]["output"]>;
  loksabha_numberMax?: Maybe<Scalars["Int"]["output"]>;
  loksabha_numberMin?: Maybe<Scalars["Int"]["output"]>;
  loksabha_numberSum?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Constituency_ = {
  __typename?: "_Indian_Loksabha_Constituency_";
  constituency_number: Scalars["String"]["output"];
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  districts?: Maybe<Array<Maybe<_Indian_District_>>>;
  districtsAggregate?: Maybe<_Indian_District_AggregateResult>;
  elections?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  electionsAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_AggregateResult>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  id: Scalars["ID"]["output"];
  loksabha_members?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  loksabha_membersAggregate?: Maybe<_Indian_Loksabha_Member_AggregateResult>;
  loksabhas?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  loksabhasAggregate?: Maybe<_Indian_Loksabha_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  regions?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Region_>>>;
  regionsAggregate?: Maybe<_Indian_Loksabha_Constituency_Region_AggregateResult>;
  states_union_territories?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  states_union_territoriesAggregate?: Maybe<_Indian_State_Union_Territory_AggregateResult>;
  vidhansabha_constituencies?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  vidhansabha_constituenciesAggregate?: Maybe<_Indian_Vidhansabha_Constituency_AggregateResult>;
};

export type _Indian_Loksabha_Constituency_DistrictsArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type _Indian_Loksabha_Constituency_DistrictsAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type _Indian_Loksabha_Constituency_ElectionsArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type _Indian_Loksabha_Constituency_ElectionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type _Indian_Loksabha_Constituency_Loksabha_MembersArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type _Indian_Loksabha_Constituency_Loksabha_MembersAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Loksabha_Constituency_LoksabhasArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type _Indian_Loksabha_Constituency_LoksabhasAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Loksabha_Constituency_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Loksabha_Constituency_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Loksabha_Constituency_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Constituency_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Constituency_RegionsArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export type _Indian_Loksabha_Constituency_RegionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
};

export type _Indian_Loksabha_Constituency_States_Union_TerritoriesArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type _Indian_Loksabha_Constituency_States_Union_TerritoriesAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type _Indian_Loksabha_Constituency_Vidhansabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type _Indian_Loksabha_Constituency_Vidhansabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type _Indian_Loksabha_Constituency_AggregateResult = {
  __typename?: "_Indian_Loksabha_Constituency_AggregateResult";
  constituency_numberMax?: Maybe<Scalars["String"]["output"]>;
  constituency_numberMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Election_ = {
  __typename?: "_Indian_Loksabha_Constituency_Election_";
  candidates?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>>;
  candidatesAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult>;
  constituency?: Maybe<_Indian_Loksabha_Constituency_>;
  election?: Maybe<_Indian_Loksabha_Election_>;
  election_phase?: Maybe<_Indian_Loksabha_Election_Phase_>;
  election_result?: Maybe<_Indian_Loksabha_Constituency_Election_Result_>;
  election_winner?: Maybe<_Indian_Loksabha_Member_>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Indian_Loksabha_Constituency_Election_CandidatesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
};

export type _Indian_Loksabha_Constituency_Election_CandidatesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_ConstituencyArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Election_PhaseArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Election_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Election_WinnerArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Constituency_Election_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_AggregateResult = {
  __typename?: "_Indian_Loksabha_Constituency_Election_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_ = {
  __typename?: "_Indian_Loksabha_Constituency_Election_Candidate_";
  candidate?: Maybe<_Indian_Politician_>;
  candidate_result?: Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>;
  constituency_election_result?: Maybe<_Indian_Loksabha_Constituency_Election_Result_>;
  election?: Maybe<_Indian_Loksabha_Constituency_Election_>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  political_party?: Maybe<_Indian_Political_Party_Loksabha_Election_>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_CandidateArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Candidate_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Constituency_Election_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Political_PartyArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_AggregateResult = {
  __typename?: "_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>>>;
};

export enum _Indian_Loksabha_Constituency_Election_Candidate_HasFilter {
  Candidate = "candidate",
  CandidateResult = "candidate_result",
  ConstituencyElectionResult = "constituency_election_result",
  Election = "election",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PoliticalParty = "political_party",
}

export type _Indian_Loksabha_Constituency_Election_Candidate_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
};

export enum _Indian_Loksabha_Constituency_Election_Candidate_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Constituency_Election_Candidate_Patch = {
  candidate?: InputMaybe<_Indian_Politician_Ref>;
  candidate_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref>;
  constituency_election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_party?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Ref = {
  candidate?: InputMaybe<_Indian_Politician_Ref>;
  candidate_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref>;
  constituency_election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_party?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>;
};

export type _Indian_Loksabha_Constituency_Election_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>>>;
};

export enum _Indian_Loksabha_Constituency_Election_HasFilter {
  Candidates = "candidates",
  Constituency = "constituency",
  Election = "election",
  ElectionPhase = "election_phase",
  ElectionResult = "election_result",
  ElectionWinner = "election_winner",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Indian_Loksabha_Constituency_Election_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export enum _Indian_Loksabha_Constituency_Election_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Constituency_Election_Patch = {
  candidates?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  constituency?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  election_phase?: InputMaybe<_Indian_Loksabha_Election_Phase_Ref>;
  election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election_winner?: InputMaybe<_Indian_Loksabha_Member_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Loksabha_Constituency_Election_Ref = {
  candidates?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  constituency?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  election_phase?: InputMaybe<_Indian_Loksabha_Election_Phase_Ref>;
  election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election_winner?: InputMaybe<_Indian_Loksabha_Member_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Loksabha_Constituency_Election_Result_ = {
  __typename?: "_Indian_Loksabha_Constituency_Election_Result_";
  candidate_result?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>>>;
  candidate_resultAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult>;
  candidates?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>>;
  candidatesAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult>;
  constituency_election?: Maybe<_Indian_Loksabha_Constituency_Election_>;
  election_result?: Maybe<_Indian_Loksabha_Election_Result_>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  total_voters?: Maybe<Scalars["Int"]["output"]>;
  voter_turnout?: Maybe<Scalars["Int"]["output"]>;
  voter_turnout_percentage?: Maybe<Scalars["Float"]["output"]>;
  winner?: Maybe<_Indian_Loksabha_Member_>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_ResultAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_CandidatesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
};

export type _Indian_Loksabha_Constituency_Election_Result_CandidatesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Constituency_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Election_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_WinnerArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_AggregateResult = {
  __typename?: "_Indian_Loksabha_Constituency_Election_Result_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  total_votersAvg?: Maybe<Scalars["Float"]["output"]>;
  total_votersMax?: Maybe<Scalars["Int"]["output"]>;
  total_votersMin?: Maybe<Scalars["Int"]["output"]>;
  total_votersSum?: Maybe<Scalars["Int"]["output"]>;
  voter_turnoutAvg?: Maybe<Scalars["Float"]["output"]>;
  voter_turnoutMax?: Maybe<Scalars["Int"]["output"]>;
  voter_turnoutMin?: Maybe<Scalars["Int"]["output"]>;
  voter_turnoutSum?: Maybe<Scalars["Int"]["output"]>;
  voter_turnout_percentageAvg?: Maybe<Scalars["Float"]["output"]>;
  voter_turnout_percentageMax?: Maybe<Scalars["Float"]["output"]>;
  voter_turnout_percentageMin?: Maybe<Scalars["Float"]["output"]>;
  voter_turnout_percentageSum?: Maybe<Scalars["Float"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_ = {
  __typename?: "_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_";
  candidate?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  overall_result?: Maybe<_Indian_Loksabha_Constituency_Election_Result_>;
  votes_count?: Maybe<Scalars["Int"]["output"]>;
  votes_percentage?: Maybe<Scalars["Float"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_CandidateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Overall_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult = {
  __typename?: "_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  votes_countAvg?: Maybe<Scalars["Float"]["output"]>;
  votes_countMax?: Maybe<Scalars["Int"]["output"]>;
  votes_countMin?: Maybe<Scalars["Int"]["output"]>;
  votes_countSum?: Maybe<Scalars["Int"]["output"]>;
  votes_percentageAvg?: Maybe<Scalars["Float"]["output"]>;
  votes_percentageMax?: Maybe<Scalars["Float"]["output"]>;
  votes_percentageMin?: Maybe<Scalars["Float"]["output"]>;
  votes_percentageSum?: Maybe<Scalars["Float"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter>>>;
};

export enum _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_HasFilter {
  Candidate = "candidate",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  OverallResult = "overall_result",
  VotesCount = "votes_count",
  VotesPercentage = "votes_percentage",
}

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order>;
};

export enum _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Orderable {
  NodeCreatedOn = "node_created_on",
  VotesCount = "votes_count",
  VotesPercentage = "votes_percentage",
}

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch = {
  candidate?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  overall_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  votes_count?: InputMaybe<Scalars["Int"]["input"]>;
  votes_percentage?: InputMaybe<Scalars["Float"]["input"]>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref = {
  candidate?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  overall_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  votes_count?: InputMaybe<Scalars["Int"]["input"]>;
  votes_percentage?: InputMaybe<Scalars["Float"]["input"]>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>>>;
};

export enum _Indian_Loksabha_Constituency_Election_Result_HasFilter {
  CandidateResult = "candidate_result",
  Candidates = "candidates",
  ConstituencyElection = "constituency_election",
  ElectionResult = "election_result",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  TotalVoters = "total_voters",
  VoterTurnout = "voter_turnout",
  VoterTurnoutPercentage = "voter_turnout_percentage",
  Winner = "winner",
}

export type _Indian_Loksabha_Constituency_Election_Result_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Order>;
};

export enum _Indian_Loksabha_Constituency_Election_Result_Orderable {
  NodeCreatedOn = "node_created_on",
  TotalVoters = "total_voters",
  VoterTurnout = "voter_turnout",
  VoterTurnoutPercentage = "voter_turnout_percentage",
}

export type _Indian_Loksabha_Constituency_Election_Result_Patch = {
  candidate_result?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref>>>;
  candidates?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  constituency_election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  election_result?: InputMaybe<_Indian_Loksabha_Election_Result_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  total_voters?: InputMaybe<Scalars["Int"]["input"]>;
  voter_turnout?: InputMaybe<Scalars["Int"]["input"]>;
  voter_turnout_percentage?: InputMaybe<Scalars["Float"]["input"]>;
  winner?: InputMaybe<_Indian_Loksabha_Member_Ref>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Ref = {
  candidate_result?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref>>>;
  candidates?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  constituency_election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  election_result?: InputMaybe<_Indian_Loksabha_Election_Result_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  total_voters?: InputMaybe<Scalars["Int"]["input"]>;
  voter_turnout?: InputMaybe<Scalars["Int"]["input"]>;
  voter_turnout_percentage?: InputMaybe<Scalars["Float"]["input"]>;
  winner?: InputMaybe<_Indian_Loksabha_Member_Ref>;
};

export type _Indian_Loksabha_Constituency_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Filter>>>;
  constituency_number?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Filter>>>;
};

export enum _Indian_Loksabha_Constituency_HasFilter {
  ConstituencyNumber = "constituency_number",
  Disestablished = "disestablished",
  Districts = "districts",
  Elections = "elections",
  Established = "established",
  LoksabhaMembers = "loksabha_members",
  Loksabhas = "loksabhas",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Regions = "regions",
  StatesUnionTerritories = "states_union_territories",
  VidhansabhaConstituencies = "vidhansabha_constituencies",
}

export type _Indian_Loksabha_Constituency_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Constituency_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Constituency_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export enum _Indian_Loksabha_Constituency_Orderable {
  ConstituencyNumber = "constituency_number",
  Disestablished = "disestablished",
  Established = "established",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Constituency_Patch = {
  constituency_number?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  elections?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  loksabhas?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_Loksabha_Constituency_Ref = {
  constituency_number?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  elections?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  loksabhas?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_Loksabha_Constituency_Region_ = {
  __typename?: "_Indian_Loksabha_Constituency_Region_";
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  geo_boundary?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundaryAggregate?: Maybe<_Geo_AggregateResult>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  self?: Maybe<_Indian_Loksabha_Constituency_>;
};

export type _Indian_Loksabha_Constituency_Region_Geo_BoundaryArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Indian_Loksabha_Constituency_Region_Geo_BoundaryAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Indian_Loksabha_Constituency_Region_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Constituency_Region_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Constituency_Region_SelfArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Loksabha_Constituency_Region_AggregateResult = {
  __typename?: "_Indian_Loksabha_Constituency_Region_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Constituency_Region_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Region_Filter>>>;
};

export enum _Indian_Loksabha_Constituency_Region_HasFilter {
  Disestablished = "disestablished",
  Established = "established",
  GeoBoundary = "geo_boundary",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Self = "self",
}

export type _Indian_Loksabha_Constituency_Region_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Constituency_Region_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Constituency_Region_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Constituency_Region_Order>;
};

export enum _Indian_Loksabha_Constituency_Region_Orderable {
  Disestablished = "disestablished",
  Established = "established",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Constituency_Region_Patch = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
};

export type _Indian_Loksabha_Constituency_Region_Ref = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
};

export type _Indian_Loksabha_Election_ = {
  __typename?: "_Indian_Loksabha_Election_";
  completed_on?: Maybe<_Date_Time_>;
  constituency_election?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  constituency_electionAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_AggregateResult>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  participating_political_parties?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  participating_political_partiesAggregate?: Maybe<_Indian_Political_Party_Loksabha_Election_AggregateResult>;
  phases?: Maybe<Array<Maybe<_Indian_Loksabha_Election_Phase_>>>;
  phasesAggregate?: Maybe<_Indian_Loksabha_Election_Phase_AggregateResult>;
  pre_poll_coalitions?: Maybe<Array<Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>>>;
  pre_poll_coalitionsAggregate?: Maybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult>;
  result?: Maybe<_Indian_Loksabha_Election_Result_>;
  started_on?: Maybe<_Date_Time_>;
};

export type _Indian_Loksabha_Election_Completed_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Election_Constituency_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type _Indian_Loksabha_Election_Constituency_ElectionAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type _Indian_Loksabha_Election_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Loksabha_Election_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Loksabha_Election_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Loksabha_Election_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Election_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Election_Participating_Political_PartiesArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type _Indian_Loksabha_Election_Participating_Political_PartiesAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Election_PhasesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Phase_Order>;
};

export type _Indian_Loksabha_Election_PhasesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
};

export type _Indian_Loksabha_Election_Pre_Poll_CoalitionsArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order>;
};

export type _Indian_Loksabha_Election_Pre_Poll_CoalitionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Election_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
};

export type _Indian_Loksabha_Election_Started_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Election_AggregateResult = {
  __typename?: "_Indian_Loksabha_Election_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Election_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Filter>>>;
};

export enum _Indian_Loksabha_Election_HasFilter {
  CompletedOn = "completed_on",
  ConstituencyElection = "constituency_election",
  Loksabha = "loksabha",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ParticipatingPoliticalParties = "participating_political_parties",
  Phases = "phases",
  PrePollCoalitions = "pre_poll_coalitions",
  Result = "result",
  StartedOn = "started_on",
}

export type _Indian_Loksabha_Election_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Election_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Election_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export enum _Indian_Loksabha_Election_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Election_Patch = {
  completed_on?: InputMaybe<_Date_Time_Ref>;
  constituency_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  participating_political_parties?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
  phases?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Phase_Ref>>>;
  pre_poll_coalitions?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref>>>;
  result?: InputMaybe<_Indian_Loksabha_Election_Result_Ref>;
  started_on?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Loksabha_Election_Phase_ = {
  __typename?: "_Indian_Loksabha_Election_Phase_";
  constituency_election?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_>>>;
  constituency_electionAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_AggregateResult>;
  election?: Maybe<_Indian_Loksabha_Election_>;
  election_date?: Maybe<_Date_Time_>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Indian_Loksabha_Election_Phase_Constituency_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Order>;
};

export type _Indian_Loksabha_Election_Phase_Constituency_ElectionAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type _Indian_Loksabha_Election_Phase_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Election_Phase_Election_DateArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Election_Phase_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Election_Phase_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Election_Phase_AggregateResult = {
  __typename?: "_Indian_Loksabha_Election_Phase_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Election_Phase_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Phase_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Phase_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Election_Phase_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Phase_Filter>>>;
};

export enum _Indian_Loksabha_Election_Phase_HasFilter {
  ConstituencyElection = "constituency_election",
  Election = "election",
  ElectionDate = "election_date",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Indian_Loksabha_Election_Phase_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Election_Phase_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Election_Phase_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Election_Phase_Order>;
};

export enum _Indian_Loksabha_Election_Phase_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Election_Phase_Patch = {
  constituency_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  election_date?: InputMaybe<_Date_Time_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Loksabha_Election_Phase_Ref = {
  constituency_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  election_date?: InputMaybe<_Date_Time_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Loksabha_Election_Ref = {
  completed_on?: InputMaybe<_Date_Time_Ref>;
  constituency_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  participating_political_parties?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
  phases?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Phase_Ref>>>;
  pre_poll_coalitions?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref>>>;
  result?: InputMaybe<_Indian_Loksabha_Election_Result_Ref>;
  started_on?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Loksabha_Election_Result_ = {
  __typename?: "_Indian_Loksabha_Election_Result_";
  constituency_election_result?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Result_>>>;
  constituency_election_resultAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_Result_AggregateResult>;
  election?: Maybe<_Indian_Loksabha_Election_>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  result_declaration_date?: Maybe<_Date_Time_>;
};

export type _Indian_Loksabha_Election_Result_Constituency_Election_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Order>;
};

export type _Indian_Loksabha_Election_Result_Constituency_Election_ResultAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
};

export type _Indian_Loksabha_Election_Result_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Election_Result_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Election_Result_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Election_Result_Result_Declaration_DateArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Election_Result_AggregateResult = {
  __typename?: "_Indian_Loksabha_Election_Result_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Election_Result_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Result_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Result_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Election_Result_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Result_Filter>>>;
};

export enum _Indian_Loksabha_Election_Result_HasFilter {
  ConstituencyElectionResult = "constituency_election_result",
  Election = "election",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ResultDeclarationDate = "result_declaration_date",
}

export type _Indian_Loksabha_Election_Result_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Election_Result_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Election_Result_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Election_Result_Order>;
};

export enum _Indian_Loksabha_Election_Result_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Election_Result_Patch = {
  constituency_election_result?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>>>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  result_declaration_date?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Loksabha_Election_Result_Ref = {
  constituency_election_result?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>>>;
  election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  result_declaration_date?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Loksabha_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Filter>>>;
};

export enum _Indian_Loksabha_HasFilter {
  Cabinet = "cabinet",
  Constituencies = "constituencies",
  CouncilOfMinisters = "council_of_ministers",
  Elections = "elections",
  LoksabhaNumber = "loksabha_number",
  LoksabhaSessions = "loksabha_sessions",
  Members = "members",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PrimeMinister = "prime_minister",
  TermEnd = "term_end",
  TermStart = "term_start",
  UnionGovernment = "union_government",
}

export type _Indian_Loksabha_Member_ = {
  __typename?: "_Indian_Loksabha_Member_";
  constituency?: Maybe<_Indian_Loksabha_Constituency_>;
  constituency_election_result?: Maybe<_Indian_Loksabha_Constituency_Election_Result_>;
  election?: Maybe<_Indian_Loksabha_Constituency_Election_>;
  election_winning_political_party?: Maybe<_Indian_Political_Party_Loksabha_Election_>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  position_held_by?: Maybe<_Indian_Politician_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Loksabha_Member_ConstituencyArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Loksabha_Member_Constituency_Election_ResultArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Filter>;
};

export type _Indian_Loksabha_Member_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Filter>;
};

export type _Indian_Loksabha_Member_Election_Winning_Political_PartyArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
};

export type _Indian_Loksabha_Member_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Loksabha_Member_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Member_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Member_Position_Held_ByArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Loksabha_Member_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Member_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Loksabha_Member_AggregateResult = {
  __typename?: "_Indian_Loksabha_Member_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Member_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Filter>>>;
};

export enum _Indian_Loksabha_Member_HasFilter {
  Constituency = "constituency",
  ConstituencyElectionResult = "constituency_election_result",
  Election = "election",
  ElectionWinningPoliticalParty = "election_winning_political_party",
  Loksabha = "loksabha",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PositionHeldBy = "position_held_by",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Loksabha_Member_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Member_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Member_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export enum _Indian_Loksabha_Member_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Member_Patch = {
  constituency?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
  constituency_election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  election_winning_political_party?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Loksabha_Member_Ref = {
  constituency?: InputMaybe<_Indian_Loksabha_Constituency_Ref>;
  constituency_election_result?: InputMaybe<_Indian_Loksabha_Constituency_Election_Result_Ref>;
  election?: InputMaybe<_Indian_Loksabha_Constituency_Election_Ref>;
  election_winning_political_party?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Loksabha_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Order>;
};

export enum _Indian_Loksabha_Orderable {
  LoksabhaNumber = "loksabha_number",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  elections?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Ref>>>;
  loksabha_number?: InputMaybe<Scalars["Int"]["input"]>;
  loksabha_sessions?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Session_Ref>>>;
  members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  term_end?: InputMaybe<_Date_Time_Ref>;
  term_start?: InputMaybe<_Date_Time_Ref>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
};

export type _Indian_Loksabha_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  elections?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_number?: InputMaybe<Scalars["Int"]["input"]>;
  loksabha_sessions?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Session_Ref>>>;
  members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  term_end?: InputMaybe<_Date_Time_Ref>;
  term_start?: InputMaybe<_Date_Time_Ref>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
};

export type _Indian_Loksabha_Session_ = {
  __typename?: "_Indian_Loksabha_Session_";
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Indian_Loksabha_Session_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Loksabha_Session_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Loksabha_Session_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Loksabha_Session_AggregateResult = {
  __typename?: "_Indian_Loksabha_Session_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Loksabha_Session_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Session_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Session_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Loksabha_Session_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Session_Filter>>>;
};

export enum _Indian_Loksabha_Session_HasFilter {
  Loksabha = "loksabha",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Indian_Loksabha_Session_Order = {
  asc?: InputMaybe<_Indian_Loksabha_Session_Orderable>;
  desc?: InputMaybe<_Indian_Loksabha_Session_Orderable>;
  then?: InputMaybe<_Indian_Loksabha_Session_Order>;
};

export enum _Indian_Loksabha_Session_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Loksabha_Session_Patch = {
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Loksabha_Session_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Political_Party_ = {
  __typename?: "_Indian_Political_Party_";
  disestablished_on?: Maybe<_Date_Time_>;
  established_on?: Maybe<_Date_Time_>;
  id: Scalars["ID"]["output"];
  is_national_party?: Maybe<Scalars["Boolean"]["output"]>;
  loksabha_elections?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  loksabha_electionsAggregate?: Maybe<_Indian_Political_Party_Loksabha_Election_AggregateResult>;
  members?: Maybe<Array<Maybe<_Indian_Political_Party_Member_>>>;
  membersAggregate?: Maybe<_Indian_Political_Party_Member_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names: Array<_Name_>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Indian_Political_Party_Disestablished_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Political_Party_Established_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Political_Party_Loksabha_ElectionsArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type _Indian_Political_Party_Loksabha_ElectionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
};

export type _Indian_Political_Party_MembersArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export type _Indian_Political_Party_MembersAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
};

export type _Indian_Political_Party_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Political_Party_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Political_Party_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Political_Party_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Political_Party_AggregateResult = {
  __typename?: "_Indian_Political_Party_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Political_Party_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Political_Party_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Filter>>>;
};

export enum _Indian_Political_Party_HasFilter {
  DisestablishedOn = "disestablished_on",
  EstablishedOn = "established_on",
  IsNationalParty = "is_national_party",
  LoksabhaElections = "loksabha_elections",
  Members = "members",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Indian_Political_Party_Loksabha_Election_ = {
  __typename?: "_Indian_Political_Party_Loksabha_Election_";
  candidates_constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>>;
  candidates_constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult>;
  id: Scalars["ID"]["output"];
  loksabha_election?: Maybe<_Indian_Loksabha_Election_>;
  loksabha_members?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  loksabha_membersAggregate?: Maybe<_Indian_Loksabha_Member_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  political_party?: Maybe<_Indian_Political_Party_>;
};

export type _Indian_Political_Party_Loksabha_Election_Candidates_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
};

export type _Indian_Political_Party_Loksabha_Election_Candidates_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
};

export type _Indian_Political_Party_Loksabha_Election_Loksabha_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Indian_Political_Party_Loksabha_Election_Loksabha_MembersArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type _Indian_Political_Party_Loksabha_Election_Loksabha_MembersAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Political_Party_Loksabha_Election_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Political_Party_Loksabha_Election_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Political_Party_Loksabha_Election_Political_PartyArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
};

export type _Indian_Political_Party_Loksabha_Election_AggregateResult = {
  __typename?: "_Indian_Political_Party_Loksabha_Election_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Political_Party_Loksabha_Election_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>>>;
};

export enum _Indian_Political_Party_Loksabha_Election_HasFilter {
  CandidatesConstituencies = "candidates_constituencies",
  LoksabhaElection = "loksabha_election",
  LoksabhaMembers = "loksabha_members",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PoliticalParty = "political_party",
}

export type _Indian_Political_Party_Loksabha_Election_Order = {
  asc?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Orderable>;
  desc?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Orderable>;
  then?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export enum _Indian_Political_Party_Loksabha_Election_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Political_Party_Loksabha_Election_Patch = {
  candidates_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  loksabha_election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_party?: InputMaybe<_Indian_Political_Party_Ref>;
};

export type _Indian_Political_Party_Loksabha_Election_Ref = {
  candidates_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  loksabha_members?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_party?: InputMaybe<_Indian_Political_Party_Ref>;
};

export type _Indian_Political_Party_Member_ = {
  __typename?: "_Indian_Political_Party_Member_";
  id: Scalars["ID"]["output"];
  member_from?: Maybe<_Date_Time_>;
  member_to?: Maybe<_Date_Time_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  party?: Maybe<_Indian_Political_Party_>;
  politician?: Maybe<_Indian_Politician_>;
};

export type _Indian_Political_Party_Member_Member_FromArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Political_Party_Member_Member_ToArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Political_Party_Member_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Political_Party_Member_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Political_Party_Member_PartyArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
};

export type _Indian_Political_Party_Member_PoliticianArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Political_Party_Member_AggregateResult = {
  __typename?: "_Indian_Political_Party_Member_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Political_Party_Member_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Filter>>>;
};

export enum _Indian_Political_Party_Member_HasFilter {
  MemberFrom = "member_from",
  MemberTo = "member_to",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Party = "party",
  Politician = "politician",
}

export type _Indian_Political_Party_Member_Order = {
  asc?: InputMaybe<_Indian_Political_Party_Member_Orderable>;
  desc?: InputMaybe<_Indian_Political_Party_Member_Orderable>;
  then?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export enum _Indian_Political_Party_Member_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Political_Party_Member_Patch = {
  member_from?: InputMaybe<_Date_Time_Ref>;
  member_to?: InputMaybe<_Date_Time_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  party?: InputMaybe<_Indian_Political_Party_Ref>;
  politician?: InputMaybe<_Indian_Politician_Ref>;
};

export type _Indian_Political_Party_Member_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  member_from?: InputMaybe<_Date_Time_Ref>;
  member_to?: InputMaybe<_Date_Time_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  party?: InputMaybe<_Indian_Political_Party_Ref>;
  politician?: InputMaybe<_Indian_Politician_Ref>;
};

export type _Indian_Political_Party_Order = {
  asc?: InputMaybe<_Indian_Political_Party_Orderable>;
  desc?: InputMaybe<_Indian_Political_Party_Orderable>;
  then?: InputMaybe<_Indian_Political_Party_Order>;
};

export enum _Indian_Political_Party_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Political_Party_Patch = {
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  is_national_party?: InputMaybe<Scalars["Boolean"]["input"]>;
  loksabha_elections?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
  members?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_ = {
  __typename?: "_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_";
  id: Scalars["ID"]["output"];
  loksabha_election?: Maybe<_Indian_Loksabha_Election_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  political_parties?: Maybe<Array<Maybe<_Indian_Political_Party_Loksabha_Election_>>>;
  political_partiesAggregate?: Maybe<_Indian_Political_Party_Loksabha_Election_AggregateResult>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Loksabha_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Political_PartiesArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Order>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Political_PartiesAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Loksabha_Election_Filter>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult = {
  __typename?: "_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter>>>;
};

export enum _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_HasFilter {
  LoksabhaElection = "loksabha_election",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PoliticalParties = "political_parties",
}

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order = {
  asc?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Orderable>;
  desc?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Orderable>;
  then?: InputMaybe<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order>;
};

export enum _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch = {
  loksabha_election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_parties?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_election?: InputMaybe<_Indian_Loksabha_Election_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  political_parties?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
};

export type _Indian_Political_Party_Ref = {
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  is_national_party?: InputMaybe<Scalars["Boolean"]["input"]>;
  loksabha_elections?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Loksabha_Election_Ref>>>;
  members?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Indian_Politician_ = {
  __typename?: "_Indian_Politician_";
  cabinet_minister?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  cabinet_ministerAggregate?: Maybe<_Indian_Union_Government_Cabinet_Minister_AggregateResult>;
  id: Scalars["ID"]["output"];
  loksabha_elections_contested?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_Election_Candidate_>>>;
  loksabha_elections_contestedAggregate?: Maybe<_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult>;
  loksabha_member?: Maybe<Array<Maybe<_Indian_Loksabha_Member_>>>;
  loksabha_memberAggregate?: Maybe<_Indian_Loksabha_Member_AggregateResult>;
  minister_of_state?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  minister_of_stateAggregate?: Maybe<_Indian_Union_Government_Minister_Of_State_AggregateResult>;
  minister_of_state_independent_charge?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  minister_of_state_independent_chargeAggregate?: Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  person?: Maybe<_Person_>;
  political_party_memberships?: Maybe<Array<Maybe<_Indian_Political_Party_Member_>>>;
  political_party_membershipsAggregate?: Maybe<_Indian_Political_Party_Member_AggregateResult>;
  prime_minister?: Maybe<Array<Maybe<_Indian_Prime_Minister_>>>;
  prime_ministerAggregate?: Maybe<_Indian_Prime_Minister_AggregateResult>;
};

export type _Indian_Politician_Cabinet_MinisterArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type _Indian_Politician_Cabinet_MinisterAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
};

export type _Indian_Politician_Loksabha_Elections_ContestedArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Order>;
};

export type _Indian_Politician_Loksabha_Elections_ContestedAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Filter>;
};

export type _Indian_Politician_Loksabha_MemberArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Member_Order>;
};

export type _Indian_Politician_Loksabha_MemberAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Member_Filter>;
};

export type _Indian_Politician_Minister_Of_StateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type _Indian_Politician_Minister_Of_StateAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
};

export type _Indian_Politician_Minister_Of_State_Independent_ChargeArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
};

export type _Indian_Politician_Minister_Of_State_Independent_ChargeAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
};

export type _Indian_Politician_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Politician_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Politician_PersonArgs = {
  filter?: InputMaybe<_Person_Filter>;
};

export type _Indian_Politician_Political_Party_MembershipsArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Member_Order>;
};

export type _Indian_Politician_Political_Party_MembershipsAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Member_Filter>;
};

export type _Indian_Politician_Prime_MinisterArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export type _Indian_Politician_Prime_MinisterAggregateArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Politician_AggregateResult = {
  __typename?: "_Indian_Politician_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Politician_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Politician_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Politician_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Politician_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Politician_Filter>>>;
};

export enum _Indian_Politician_HasFilter {
  CabinetMinister = "cabinet_minister",
  LoksabhaElectionsContested = "loksabha_elections_contested",
  LoksabhaMember = "loksabha_member",
  MinisterOfState = "minister_of_state",
  MinisterOfStateIndependentCharge = "minister_of_state_independent_charge",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Person = "person",
  PoliticalPartyMemberships = "political_party_memberships",
  PrimeMinister = "prime_minister",
}

export type _Indian_Politician_Order = {
  asc?: InputMaybe<_Indian_Politician_Orderable>;
  desc?: InputMaybe<_Indian_Politician_Orderable>;
  then?: InputMaybe<_Indian_Politician_Order>;
};

export enum _Indian_Politician_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Politician_Patch = {
  cabinet_minister?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  loksabha_elections_contested?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  loksabha_member?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  person?: InputMaybe<_Person_Ref>;
  political_party_memberships?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Ref>>>;
  prime_minister?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Ref>>>;
};

export type _Indian_Politician_Ref = {
  cabinet_minister?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_elections_contested?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Election_Candidate_Ref>>>;
  loksabha_member?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Member_Ref>>>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  person?: InputMaybe<_Person_Ref>;
  political_party_memberships?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Member_Ref>>>;
  prime_minister?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Ref>>>;
};

export type _Indian_Prime_Minister_ = {
  __typename?: "_Indian_Prime_Minister_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  council_of_ministers?: Maybe<_Indian_Union_Council_Of_Ministers_>;
  government?: Maybe<Array<Maybe<_Indian_Union_Government_>>>;
  governmentAggregate?: Maybe<_Indian_Union_Government_AggregateResult>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  ministries?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  ministriesAggregate?: Maybe<_Indian_Union_Government_Ministry_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  position_held_by?: Maybe<_Indian_Politician_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Prime_Minister_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Prime_Minister_Council_Of_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
};

export type _Indian_Prime_Minister_GovernmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Order>;
};

export type _Indian_Prime_Minister_GovernmentAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Prime_Minister_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Prime_Minister_MinistriesArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type _Indian_Prime_Minister_MinistriesAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Prime_Minister_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Prime_Minister_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Prime_Minister_Position_Held_ByArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Prime_Minister_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Prime_Minister_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Prime_Minister_AggregateResult = {
  __typename?: "_Indian_Prime_Minister_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Prime_Minister_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Prime_Minister_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Prime_Minister_Filter>>>;
};

export enum _Indian_Prime_Minister_HasFilter {
  Cabinet = "cabinet",
  CouncilOfMinisters = "council_of_ministers",
  Government = "government",
  Loksabha = "loksabha",
  Ministries = "ministries",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PositionHeldBy = "position_held_by",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Prime_Minister_Order = {
  asc?: InputMaybe<_Indian_Prime_Minister_Orderable>;
  desc?: InputMaybe<_Indian_Prime_Minister_Orderable>;
  then?: InputMaybe<_Indian_Prime_Minister_Order>;
};

export enum _Indian_Prime_Minister_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Prime_Minister_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  government?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ref>>>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Prime_Minister_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  government?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export enum _Indian_State_Or_Union_Territory_Category_ {
  State = "State",
  UnionTerritory = "Union_Territory",
}

export type _Indian_State_Union_Territory_ = {
  __typename?: "_Indian_State_Union_Territory_";
  category?: Maybe<_Indian_State_Or_Union_Territory_Category_>;
  districts?: Maybe<Array<Maybe<_Indian_District_>>>;
  districtsAggregate?: Maybe<_Indian_District_AggregateResult>;
  id: Scalars["ID"]["output"];
  loksabha_constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  loksabha_constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  regions?: Maybe<Array<Maybe<_Indian_State_Union_Territory_Region_>>>;
  regionsAggregate?: Maybe<_Indian_State_Union_Territory_Region_AggregateResult>;
  vidhansabha_constituencies?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  vidhansabha_constituenciesAggregate?: Maybe<_Indian_Vidhansabha_Constituency_AggregateResult>;
};

export type _Indian_State_Union_Territory_DistrictsArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type _Indian_State_Union_Territory_DistrictsAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type _Indian_State_Union_Territory_Loksabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Indian_State_Union_Territory_Loksabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_State_Union_Territory_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_State_Union_Territory_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_State_Union_Territory_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_State_Union_Territory_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_State_Union_Territory_RegionsArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export type _Indian_State_Union_Territory_RegionsAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
};

export type _Indian_State_Union_Territory_Vidhansabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type _Indian_State_Union_Territory_Vidhansabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type _Indian_State_Union_Territory_AggregateResult = {
  __typename?: "_Indian_State_Union_Territory_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_State_Union_Territory_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Filter>>>;
};

export enum _Indian_State_Union_Territory_HasFilter {
  Category = "category",
  Districts = "districts",
  LoksabhaConstituencies = "loksabha_constituencies",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Regions = "regions",
  VidhansabhaConstituencies = "vidhansabha_constituencies",
}

export type _Indian_State_Union_Territory_Order = {
  asc?: InputMaybe<_Indian_State_Union_Territory_Orderable>;
  desc?: InputMaybe<_Indian_State_Union_Territory_Orderable>;
  then?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export enum _Indian_State_Union_Territory_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_State_Union_Territory_Patch = {
  category?: InputMaybe<_Indian_State_Or_Union_Territory_Category_>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_State_Union_Territory_Ref = {
  category?: InputMaybe<_Indian_State_Or_Union_Territory_Category_>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Ref>>>;
  vidhansabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
};

export type _Indian_State_Union_Territory_Region_ = {
  __typename?: "_Indian_State_Union_Territory_Region_";
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  geo_boundary?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundaryAggregate?: Maybe<_Geo_AggregateResult>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  self?: Maybe<_Indian_State_Union_Territory_>;
};

export type _Indian_State_Union_Territory_Region_Geo_BoundaryArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Indian_State_Union_Territory_Region_Geo_BoundaryAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Indian_State_Union_Territory_Region_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_State_Union_Territory_Region_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_State_Union_Territory_Region_SelfArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type _Indian_State_Union_Territory_Region_AggregateResult = {
  __typename?: "_Indian_State_Union_Territory_Region_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_State_Union_Territory_Region_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_State_Union_Territory_Region_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Region_Filter>>>;
};

export enum _Indian_State_Union_Territory_Region_HasFilter {
  Disestablished = "disestablished",
  Established = "established",
  GeoBoundary = "geo_boundary",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Self = "self",
}

export type _Indian_State_Union_Territory_Region_Order = {
  asc?: InputMaybe<_Indian_State_Union_Territory_Region_Orderable>;
  desc?: InputMaybe<_Indian_State_Union_Territory_Region_Orderable>;
  then?: InputMaybe<_Indian_State_Union_Territory_Region_Order>;
};

export enum _Indian_State_Union_Territory_Region_Orderable {
  Disestablished = "disestablished",
  Established = "established",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_State_Union_Territory_Region_Patch = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_State_Union_Territory_Ref>;
};

export type _Indian_State_Union_Territory_Region_Ref = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_State_Union_Territory_Ref>;
};

export type _Indian_Union_Council_Of_Ministers_ = {
  __typename?: "_Indian_Union_Council_Of_Ministers_";
  council_member_ministers?: Maybe<_Indian_Union_Government_Cabinet_Minister_>;
  government?: Maybe<_Indian_Union_Government_>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  prime_minister?: Maybe<_Indian_Prime_Minister_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Union_Council_Of_Ministers_Council_Member_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_GovernmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Council_Of_Ministers_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_Prime_MinisterArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Council_Of_Ministers_AggregateResult = {
  __typename?: "_Indian_Union_Council_Of_Ministers_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Council_Of_Ministers_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Council_Of_Ministers_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>>>;
};

export enum _Indian_Union_Council_Of_Ministers_HasFilter {
  CouncilMemberMinisters = "council_member_ministers",
  Government = "government",
  Loksabha = "loksabha",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PrimeMinister = "prime_minister",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Union_Council_Of_Ministers_Order = {
  asc?: InputMaybe<_Indian_Union_Council_Of_Ministers_Orderable>;
  desc?: InputMaybe<_Indian_Union_Council_Of_Ministers_Orderable>;
  then?: InputMaybe<_Indian_Union_Council_Of_Ministers_Order>;
};

export enum _Indian_Union_Council_Of_Ministers_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Council_Of_Ministers_Patch = {
  council_member_ministers?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>;
  government?: InputMaybe<_Indian_Union_Government_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Council_Of_Ministers_Ref = {
  council_member_ministers?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>;
  government?: InputMaybe<_Indian_Union_Government_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_ = {
  __typename?: "_Indian_Union_Government_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  council_of_ministers?: Maybe<_Indian_Union_Council_Of_Ministers_>;
  departments?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  departmentsAggregate?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  disestablished_on?: Maybe<_Date_Time_>;
  established_on?: Maybe<_Date_Time_>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  ministries?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  ministriesAggregate?: Maybe<_Indian_Union_Government_Ministry_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  prime_minister?: Maybe<_Indian_Prime_Minister_>;
};

export type _Indian_Union_Government_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Union_Government_Council_Of_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
};

export type _Indian_Union_Government_DepartmentsArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type _Indian_Union_Government_DepartmentsAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type _Indian_Union_Government_Disestablished_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Established_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Union_Government_MinistriesArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type _Indian_Union_Government_MinistriesAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Union_Government_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Prime_MinisterArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Union_Government_AggregateResult = {
  __typename?: "_Indian_Union_Government_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Government_Cabinet_ = {
  __typename?: "_Indian_Union_Government_Cabinet_";
  cabinet_ministers?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  cabinet_ministersAggregate?: Maybe<_Indian_Union_Government_Cabinet_Minister_AggregateResult>;
  government?: Maybe<_Indian_Union_Government_>;
  id: Scalars["ID"]["output"];
  loksabha?: Maybe<_Indian_Loksabha_>;
  minister_of_state?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  minister_of_stateAggregate?: Maybe<_Indian_Union_Government_Minister_Of_State_AggregateResult>;
  minister_of_state_independent_charge?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  minister_of_state_independent_chargeAggregate?: Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult>;
  ministries?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  ministriesAggregate?: Maybe<_Indian_Union_Government_Ministry_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  prime_minister?: Maybe<_Indian_Prime_Minister_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Union_Government_Cabinet_Cabinet_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type _Indian_Union_Government_Cabinet_Cabinet_MinistersAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
};

export type _Indian_Union_Government_Cabinet_GovernmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Union_Government_Cabinet_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Of_StateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type _Indian_Union_Government_Cabinet_Minister_Of_StateAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Of_State_Independent_ChargeArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
};

export type _Indian_Union_Government_Cabinet_Minister_Of_State_Independent_ChargeAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
};

export type _Indian_Union_Government_Cabinet_MinistriesArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type _Indian_Union_Government_Cabinet_MinistriesAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Union_Government_Cabinet_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Cabinet_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Cabinet_Prime_MinisterArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Union_Government_Cabinet_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Cabinet_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Cabinet_AggregateResult = {
  __typename?: "_Indian_Union_Government_Cabinet_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Government_Cabinet_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Filter>>>;
};

export enum _Indian_Union_Government_Cabinet_HasFilter {
  CabinetMinisters = "cabinet_ministers",
  Government = "government",
  Loksabha = "loksabha",
  MinisterOfState = "minister_of_state",
  MinisterOfStateIndependentCharge = "minister_of_state_independent_charge",
  Ministries = "ministries",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PrimeMinister = "prime_minister",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Union_Government_Cabinet_Minister_ = {
  __typename?: "_Indian_Union_Government_Cabinet_Minister_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  council_of_ministers?: Maybe<_Indian_Union_Council_Of_Ministers_>;
  id: Scalars["ID"]["output"];
  ministry?: Maybe<_Indian_Union_Government_Ministry_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  position_held_by?: Maybe<_Indian_Politician_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Union_Government_Cabinet_Minister_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Council_Of_MinistersArgs = {
  filter?: InputMaybe<_Indian_Union_Council_Of_Ministers_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_MinistryArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Cabinet_Minister_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Position_Held_ByArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Cabinet_Minister_AggregateResult = {
  __typename?: "_Indian_Union_Government_Cabinet_Minister_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Government_Cabinet_Minister_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>>>;
};

export enum _Indian_Union_Government_Cabinet_Minister_HasFilter {
  Cabinet = "cabinet",
  CouncilOfMinisters = "council_of_ministers",
  Ministry = "ministry",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PositionHeldBy = "position_held_by",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Union_Government_Cabinet_Minister_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export enum _Indian_Union_Government_Cabinet_Minister_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Government_Cabinet_Minister_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Cabinet_Minister_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Cabinet_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Cabinet_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Cabinet_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Cabinet_Order>;
};

export enum _Indian_Union_Government_Cabinet_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Government_Cabinet_Patch = {
  cabinet_ministers?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  government?: InputMaybe<_Indian_Union_Government_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Cabinet_Ref = {
  cabinet_ministers?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  government?: InputMaybe<_Indian_Union_Government_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Department_ = {
  __typename?: "_Indian_Union_Government_Department_";
  child_departments?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  child_departmentsAggregate?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  disestablished_on?: Maybe<_Date_Time_>;
  established_on?: Maybe<_Date_Time_>;
  id: Scalars["ID"]["output"];
  ministry?: Maybe<_Indian_Union_Government_Ministry_>;
  name_id: Scalars["String"]["output"];
  names: Array<_Name_>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  parent_department?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  parent_departmentAggregate?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  policy_domain_departments_list?: Maybe<Array<Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>>>;
  policy_domain_departments_listAggregate?: Maybe<_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult>;
  policy_domains?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  policy_domainsAggregate?: Maybe<_Public_Policy_Domain_AggregateResult>;
  union_government?: Maybe<_Indian_Union_Government_>;
};

export type _Indian_Union_Government_Department_Child_DepartmentsArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type _Indian_Union_Government_Department_Child_DepartmentsAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type _Indian_Union_Government_Department_Disestablished_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Department_Established_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Department_MinistryArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Union_Government_Department_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Union_Government_Department_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Union_Government_Department_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Department_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Department_Parent_DepartmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type _Indian_Union_Government_Department_Parent_DepartmentAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type _Indian_Union_Government_Department_Policy_Domain_Departments_ListArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
};

export type _Indian_Union_Government_Department_Policy_Domain_Departments_ListAggregateArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
};

export type _Indian_Union_Government_Department_Policy_DomainsArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type _Indian_Union_Government_Department_Policy_DomainsAggregateArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
};

export type _Indian_Union_Government_Department_Union_GovernmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Union_Government_Department_AggregateResult = {
  __typename?: "_Indian_Union_Government_Department_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Government_Department_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Filter>>>;
};

export enum _Indian_Union_Government_Department_HasFilter {
  ChildDepartments = "child_departments",
  DisestablishedOn = "disestablished_on",
  EstablishedOn = "established_on",
  Ministry = "ministry",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  ParentDepartment = "parent_department",
  PolicyDomainDepartmentsList = "policy_domain_departments_list",
  PolicyDomains = "policy_domains",
  UnionGovernment = "union_government",
}

export type _Indian_Union_Government_Department_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Department_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Department_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export enum _Indian_Union_Government_Department_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Government_Department_Patch = {
  child_departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  parent_department?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  policy_domain_departments_list?: InputMaybe<
    Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>>
  >;
  policy_domains?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
};

export type _Indian_Union_Government_Department_Ref = {
  child_departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  parent_department?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  policy_domain_departments_list?: InputMaybe<
    Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>>
  >;
  policy_domains?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
};

export type _Indian_Union_Government_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Union_Government_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Filter>>>;
};

export enum _Indian_Union_Government_HasFilter {
  Cabinet = "cabinet",
  CouncilOfMinisters = "council_of_ministers",
  Departments = "departments",
  DisestablishedOn = "disestablished_on",
  EstablishedOn = "established_on",
  Loksabha = "loksabha",
  Ministries = "ministries",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PrimeMinister = "prime_minister",
}

export type _Indian_Union_Government_Minister_Of_State_ = {
  __typename?: "_Indian_Union_Government_Minister_Of_State_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  id: Scalars["ID"]["output"];
  ministry?: Maybe<_Indian_Union_Government_Ministry_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  position_held_by?: Maybe<_Indian_Politician_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Union_Government_Minister_Of_State_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_MinistryArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Minister_Of_State_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Position_Held_ByArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_AggregateResult = {
  __typename?: "_Indian_Union_Government_Minister_Of_State_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Government_Minister_Of_State_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>>>;
};

export enum _Indian_Union_Government_Minister_Of_State_HasFilter {
  Cabinet = "cabinet",
  Ministry = "ministry",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PositionHeldBy = "position_held_by",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_ = {
  __typename?: "_Indian_Union_Government_Minister_Of_State_Independent_Charge_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  id: Scalars["ID"]["output"];
  ministry?: Maybe<_Indian_Union_Government_Ministry_>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  position_held_by?: Maybe<_Indian_Politician_>;
  tenure_end?: Maybe<_Date_Time_>;
  tenure_start?: Maybe<_Date_Time_>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_MinistryArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Position_Held_ByArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Tenure_EndArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Tenure_StartArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult = {
  __typename?: "_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>>>;
};

export enum _Indian_Union_Government_Minister_Of_State_Independent_Charge_HasFilter {
  Cabinet = "cabinet",
  Ministry = "ministry",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PositionHeldBy = "position_held_by",
  TenureEnd = "tenure_end",
  TenureStart = "tenure_start",
}

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
};

export enum _Indian_Union_Government_Minister_Of_State_Independent_Charge_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Minister_Of_State_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export enum _Indian_Union_Government_Minister_Of_State_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Government_Minister_Of_State_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Minister_Of_State_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  ministry?: InputMaybe<_Indian_Union_Government_Ministry_Ref>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  position_held_by?: InputMaybe<_Indian_Politician_Ref>;
  tenure_end?: InputMaybe<_Date_Time_Ref>;
  tenure_start?: InputMaybe<_Date_Time_Ref>;
};

export type _Indian_Union_Government_Ministry_ = {
  __typename?: "_Indian_Union_Government_Ministry_";
  cabinet?: Maybe<_Indian_Union_Government_Cabinet_>;
  departments?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  departmentsAggregate?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  disestablished_on?: Maybe<_Date_Time_>;
  established_on?: Maybe<_Date_Time_>;
  id: Scalars["ID"]["output"];
  minister?: Maybe<Array<Maybe<_Indian_Union_Government_Cabinet_Minister_>>>;
  ministerAggregate?: Maybe<_Indian_Union_Government_Cabinet_Minister_AggregateResult>;
  minister_of_state?: Maybe<Array<Maybe<_Indian_Union_Government_Minister_Of_State_>>>;
  minister_of_stateAggregate?: Maybe<_Indian_Union_Government_Minister_Of_State_AggregateResult>;
  minister_of_state_independent_charge?: Maybe<
    Array<Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>>
  >;
  minister_of_state_independent_chargeAggregate?: Maybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names: Array<_Name_>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  policy_domain_ministries_list?: Maybe<Array<Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>>>;
  policy_domain_ministries_listAggregate?: Maybe<_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult>;
  policy_domains?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  policy_domainsAggregate?: Maybe<_Public_Policy_Domain_AggregateResult>;
  prime_minister?: Maybe<_Indian_Prime_Minister_>;
  union_government?: Maybe<_Indian_Union_Government_>;
  wikidata_qid?: Maybe<Scalars["String"]["output"]>;
  wikipedia_page?: Maybe<Scalars["String"]["output"]>;
};

export type _Indian_Union_Government_Ministry_CabinetArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Filter>;
};

export type _Indian_Union_Government_Ministry_DepartmentsArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type _Indian_Union_Government_Ministry_DepartmentsAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type _Indian_Union_Government_Ministry_Disestablished_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Ministry_Established_OnArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Indian_Union_Government_Ministry_MinisterArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Order>;
};

export type _Indian_Union_Government_Ministry_MinisterAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Cabinet_Minister_Filter>;
};

export type _Indian_Union_Government_Ministry_Minister_Of_StateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Order>;
};

export type _Indian_Union_Government_Ministry_Minister_Of_StateAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Filter>;
};

export type _Indian_Union_Government_Ministry_Minister_Of_State_Independent_ChargeArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Order>;
};

export type _Indian_Union_Government_Ministry_Minister_Of_State_Independent_ChargeAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter>;
};

export type _Indian_Union_Government_Ministry_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Union_Government_Ministry_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Union_Government_Ministry_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Union_Government_Ministry_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Union_Government_Ministry_Policy_Domain_Ministries_ListArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
};

export type _Indian_Union_Government_Ministry_Policy_Domain_Ministries_ListAggregateArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
};

export type _Indian_Union_Government_Ministry_Policy_DomainsArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type _Indian_Union_Government_Ministry_Policy_DomainsAggregateArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
};

export type _Indian_Union_Government_Ministry_Prime_MinisterArgs = {
  filter?: InputMaybe<_Indian_Prime_Minister_Filter>;
};

export type _Indian_Union_Government_Ministry_Union_GovernmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Filter>;
};

export type _Indian_Union_Government_Ministry_AggregateResult = {
  __typename?: "_Indian_Union_Government_Ministry_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  wikidata_qidMax?: Maybe<Scalars["String"]["output"]>;
  wikidata_qidMin?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMax?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Indian_Union_Government_Ministry_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Filter>>>;
  wikidata_qid?: InputMaybe<StringHashFilter>;
  wikipedia_page?: InputMaybe<StringFullTextFilter>;
};

export enum _Indian_Union_Government_Ministry_HasFilter {
  Cabinet = "cabinet",
  Departments = "departments",
  DisestablishedOn = "disestablished_on",
  EstablishedOn = "established_on",
  Minister = "minister",
  MinisterOfState = "minister_of_state",
  MinisterOfStateIndependentCharge = "minister_of_state_independent_charge",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PolicyDomainMinistriesList = "policy_domain_ministries_list",
  PolicyDomains = "policy_domains",
  PrimeMinister = "prime_minister",
  UnionGovernment = "union_government",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Indian_Union_Government_Ministry_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Ministry_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Ministry_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export enum _Indian_Union_Government_Ministry_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Indian_Union_Government_Ministry_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  minister?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  policy_domain_ministries_list?: InputMaybe<
    Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>>
  >;
  policy_domains?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Indian_Union_Government_Ministry_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  minister?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Cabinet_Minister_Ref>>>;
  minister_of_state?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Ref>>>;
  minister_of_state_independent_charge?: InputMaybe<
    Array<InputMaybe<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref>>
  >;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<_Name_Ref>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  policy_domain_ministries_list?: InputMaybe<
    Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>>
  >;
  policy_domains?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
  union_government?: InputMaybe<_Indian_Union_Government_Ref>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Indian_Union_Government_Order = {
  asc?: InputMaybe<_Indian_Union_Government_Orderable>;
  desc?: InputMaybe<_Indian_Union_Government_Orderable>;
  then?: InputMaybe<_Indian_Union_Government_Order>;
};

export enum _Indian_Union_Government_Orderable {
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Union_Government_Patch = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
};

export type _Indian_Union_Government_Ref = {
  cabinet?: InputMaybe<_Indian_Union_Government_Cabinet_Ref>;
  council_of_ministers?: InputMaybe<_Indian_Union_Council_Of_Ministers_Ref>;
  departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  disestablished_on?: InputMaybe<_Date_Time_Ref>;
  established_on?: InputMaybe<_Date_Time_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha?: InputMaybe<_Indian_Loksabha_Ref>;
  ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  prime_minister?: InputMaybe<_Indian_Prime_Minister_Ref>;
};

export type _Indian_Vidhansabha_Constituency_ = {
  __typename?: "_Indian_Vidhansabha_Constituency_";
  constituency_number: Scalars["String"]["output"];
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  districts?: Maybe<Array<Maybe<_Indian_District_>>>;
  districtsAggregate?: Maybe<_Indian_District_AggregateResult>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  id: Scalars["ID"]["output"];
  loksabha_constituencies?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  loksabha_constituenciesAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  regions?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_Region_>>>;
  regionsAggregate?: Maybe<_Indian_Vidhansabha_Constituency_Region_AggregateResult>;
  states_union_territories?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  states_union_territoriesAggregate?: Maybe<_Indian_State_Union_Territory_AggregateResult>;
};

export type _Indian_Vidhansabha_Constituency_DistrictsArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type _Indian_Vidhansabha_Constituency_DistrictsAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type _Indian_Vidhansabha_Constituency_Loksabha_ConstituenciesArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Indian_Vidhansabha_Constituency_Loksabha_ConstituenciesAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Indian_Vidhansabha_Constituency_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Indian_Vidhansabha_Constituency_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Indian_Vidhansabha_Constituency_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Vidhansabha_Constituency_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Vidhansabha_Constituency_RegionsArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export type _Indian_Vidhansabha_Constituency_RegionsAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
};

export type _Indian_Vidhansabha_Constituency_States_Union_TerritoriesArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type _Indian_Vidhansabha_Constituency_States_Union_TerritoriesAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type _Indian_Vidhansabha_Constituency_AggregateResult = {
  __typename?: "_Indian_Vidhansabha_Constituency_AggregateResult";
  constituency_numberMax?: Maybe<Scalars["String"]["output"]>;
  constituency_numberMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Vidhansabha_Constituency_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Filter>>>;
  constituency_number?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringExactFilter_StringFullTextFilter_StringTermFilter>;
  not?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Filter>>>;
};

export enum _Indian_Vidhansabha_Constituency_HasFilter {
  ConstituencyNumber = "constituency_number",
  Disestablished = "disestablished",
  Districts = "districts",
  Established = "established",
  LoksabhaConstituencies = "loksabha_constituencies",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Regions = "regions",
  StatesUnionTerritories = "states_union_territories",
}

export type _Indian_Vidhansabha_Constituency_Order = {
  asc?: InputMaybe<_Indian_Vidhansabha_Constituency_Orderable>;
  desc?: InputMaybe<_Indian_Vidhansabha_Constituency_Orderable>;
  then?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export enum _Indian_Vidhansabha_Constituency_Orderable {
  ConstituencyNumber = "constituency_number",
  Disestablished = "disestablished",
  Established = "established",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Vidhansabha_Constituency_Patch = {
  constituency_number?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
};

export type _Indian_Vidhansabha_Constituency_Ref = {
  constituency_number?: InputMaybe<Scalars["String"]["input"]>;
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  districts?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  loksabha_constituencies?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  regions?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Ref>>>;
  states_union_territories?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
};

export type _Indian_Vidhansabha_Constituency_Region_ = {
  __typename?: "_Indian_Vidhansabha_Constituency_Region_";
  disestablished?: Maybe<Scalars["DateTime"]["output"]>;
  established?: Maybe<Scalars["DateTime"]["output"]>;
  geo_boundary?: Maybe<Array<Maybe<_Geo_>>>;
  geo_boundaryAggregate?: Maybe<_Geo_AggregateResult>;
  id: Scalars["ID"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  self?: Maybe<_Indian_Vidhansabha_Constituency_>;
};

export type _Indian_Vidhansabha_Constituency_Region_Geo_BoundaryArgs = {
  filter?: InputMaybe<_Geo_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Geo_Order>;
};

export type _Indian_Vidhansabha_Constituency_Region_Geo_BoundaryAggregateArgs = {
  filter?: InputMaybe<_Geo_Filter>;
};

export type _Indian_Vidhansabha_Constituency_Region_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Indian_Vidhansabha_Constituency_Region_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Indian_Vidhansabha_Constituency_Region_SelfArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type _Indian_Vidhansabha_Constituency_Region_AggregateResult = {
  __typename?: "_Indian_Vidhansabha_Constituency_Region_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  disestablishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  disestablishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMax?: Maybe<Scalars["DateTime"]["output"]>;
  establishedMin?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Indian_Vidhansabha_Constituency_Region_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Region_Filter>>>;
};

export enum _Indian_Vidhansabha_Constituency_Region_HasFilter {
  Disestablished = "disestablished",
  Established = "established",
  GeoBoundary = "geo_boundary",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Self = "self",
}

export type _Indian_Vidhansabha_Constituency_Region_Order = {
  asc?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Orderable>;
  desc?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Orderable>;
  then?: InputMaybe<_Indian_Vidhansabha_Constituency_Region_Order>;
};

export enum _Indian_Vidhansabha_Constituency_Region_Orderable {
  Disestablished = "disestablished",
  Established = "established",
  NodeCreatedOn = "node_created_on",
}

export type _Indian_Vidhansabha_Constituency_Region_Patch = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_Vidhansabha_Constituency_Ref>;
};

export type _Indian_Vidhansabha_Constituency_Region_Ref = {
  disestablished?: InputMaybe<Scalars["DateTime"]["input"]>;
  established?: InputMaybe<Scalars["DateTime"]["input"]>;
  geo_boundary?: InputMaybe<Array<InputMaybe<_Geo_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  self?: InputMaybe<_Indian_Vidhansabha_Constituency_Ref>;
};

export type _Language_ = {
  __typename?: "_Language_";
  id: Scalars["ID"]["output"];
  name_en: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  scripts?: Maybe<Array<Maybe<_Script_>>>;
  scriptsAggregate?: Maybe<_Script_AggregateResult>;
  wikidata_qid?: Maybe<Scalars["String"]["output"]>;
  wikipedia_page?: Maybe<Scalars["String"]["output"]>;
};

export type _Language_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Language_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Language_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Language_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Language_ScriptsArgs = {
  filter?: InputMaybe<_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Script_Order>;
};

export type _Language_ScriptsAggregateArgs = {
  filter?: InputMaybe<_Script_Filter>;
};

export type _Language_AggregateResult = {
  __typename?: "_Language_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_enMax?: Maybe<Scalars["String"]["output"]>;
  name_enMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  wikidata_qidMax?: Maybe<Scalars["String"]["output"]>;
  wikidata_qidMin?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMax?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Language_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Language_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Language_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_en?: InputMaybe<StringHashFilter>;
  not?: InputMaybe<_Language_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Language_Filter>>>;
  wikidata_qid?: InputMaybe<StringHashFilter>;
  wikipedia_page?: InputMaybe<StringFullTextFilter>;
};

export enum _Language_HasFilter {
  NameEn = "name_en",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Scripts = "scripts",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Language_Order = {
  asc?: InputMaybe<_Language_Orderable>;
  desc?: InputMaybe<_Language_Orderable>;
  then?: InputMaybe<_Language_Order>;
};

export enum _Language_Orderable {
  NameEn = "name_en",
  NodeCreatedOn = "node_created_on",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Language_Patch = {
  name_en?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  scripts?: InputMaybe<Array<InputMaybe<_Script_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Language_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  scripts?: InputMaybe<Array<InputMaybe<_Script_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Language_Script_ = {
  __typename?: "_Language_Script_";
  id: Scalars["ID"]["output"];
  language: _Language_;
  name_en: Scalars["String"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  script: _Script_;
};

export type _Language_Script_LanguageArgs = {
  filter?: InputMaybe<_Language_Filter>;
};

export type _Language_Script_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Language_Script_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Language_Script_ScriptArgs = {
  filter?: InputMaybe<_Script_Filter>;
};

export type _Language_Script_AggregateResult = {
  __typename?: "_Language_Script_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_enMax?: Maybe<Scalars["String"]["output"]>;
  name_enMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Language_Script_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Language_Script_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Language_Script_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_en?: InputMaybe<StringHashFilter>;
  not?: InputMaybe<_Language_Script_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Language_Script_Filter>>>;
};

export enum _Language_Script_HasFilter {
  Language = "language",
  NameEn = "name_en",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Script = "script",
}

export type _Language_Script_Order = {
  asc?: InputMaybe<_Language_Script_Orderable>;
  desc?: InputMaybe<_Language_Script_Orderable>;
  then?: InputMaybe<_Language_Script_Order>;
};

export enum _Language_Script_Orderable {
  NameEn = "name_en",
  NodeCreatedOn = "node_created_on",
}

export type _Language_Script_Patch = {
  language?: InputMaybe<_Language_Ref>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  script?: InputMaybe<_Script_Ref>;
};

export type _Language_Script_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  language?: InputMaybe<_Language_Ref>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  script?: InputMaybe<_Script_Ref>;
};

export enum _Location_Or_Region_Category_ {
  Location = "Location",
  Region = "Region",
}

export type _Location_Or_Region_Category__Exact = {
  between?: InputMaybe<_Location_Or_Region_Category_>;
  eq?: InputMaybe<_Location_Or_Region_Category_>;
  ge?: InputMaybe<_Location_Or_Region_Category_>;
  gt?: InputMaybe<_Location_Or_Region_Category_>;
  in?: InputMaybe<Array<InputMaybe<_Location_Or_Region_Category_>>>;
  le?: InputMaybe<_Location_Or_Region_Category_>;
  lt?: InputMaybe<_Location_Or_Region_Category_>;
};

export type _Name_ = {
  __typename?: "_Name_";
  case_sensitive?: Maybe<Scalars["Boolean"]["output"]>;
  country?: Maybe<Array<Maybe<_Country_>>>;
  countryAggregate?: Maybe<_Country_AggregateResult>;
  country_event?: Maybe<Array<Maybe<_Country_Event_>>>;
  country_eventAggregate?: Maybe<_Country_Event_AggregateResult>;
  country_government?: Maybe<Array<Maybe<_Country_Government_>>>;
  country_governmentAggregate?: Maybe<_Country_Government_AggregateResult>;
  government_system_type_authority_concentration?: Maybe<
    Array<Maybe<_Government_System_Types_Authority_Concentration_>>
  >;
  government_system_type_authority_concentrationAggregate?: Maybe<_Government_System_Types_Authority_Concentration_AggregateResult>;
  government_system_type_authority_distribution?: Maybe<Array<Maybe<_Government_System_Types_Authority_Distribution_>>>;
  government_system_type_authority_distributionAggregate?: Maybe<_Government_System_Types_Authority_Distribution_AggregateResult>;
  government_system_type_authority_source?: Maybe<Array<Maybe<_Government_System_Types_Authority_Source_>>>;
  government_system_type_authority_sourceAggregate?: Maybe<_Government_System_Types_Authority_Source_AggregateResult>;
  government_system_type_authority_status?: Maybe<Array<Maybe<_Government_System_Types_Authority_Status_>>>;
  government_system_type_authority_statusAggregate?: Maybe<_Government_System_Types_Authority_Status_AggregateResult>;
  government_system_type_autocratic?: Maybe<Array<Maybe<_Government_System_Types_Autocratic_>>>;
  government_system_type_autocraticAggregate?: Maybe<_Government_System_Types_Autocratic_AggregateResult>;
  government_system_type_democracy?: Maybe<Array<Maybe<_Government_System_Types_Democracy_>>>;
  government_system_type_democracyAggregate?: Maybe<_Government_System_Types_Democracy_AggregateResult>;
  government_system_type_economic_system?: Maybe<Array<Maybe<_Government_System_Types_Economic_System_>>>;
  government_system_type_economic_systemAggregate?: Maybe<_Government_System_Types_Economic_System_AggregateResult>;
  government_system_type_head_of_state_or_government?: Maybe<
    Array<Maybe<_Government_System_Types_Head_Of_State_Or_Government>>
  >;
  government_system_type_head_of_state_or_governmentAggregate?: Maybe<_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult>;
  government_system_type_monarchy?: Maybe<Array<Maybe<_Government_System_Types_Monarchy_>>>;
  government_system_type_monarchyAggregate?: Maybe<_Government_System_Types_Monarchy_AggregateResult>;
  government_system_type_oligarchy?: Maybe<Array<Maybe<_Government_System_Types_Oligarchy_>>>;
  government_system_type_oligarchyAggregate?: Maybe<_Government_System_Types_Oligarchy_AggregateResult>;
  government_system_type_partisan_systems?: Maybe<Array<Maybe<_Government_System_Types_Partisan_Systems_>>>;
  government_system_type_partisan_systemsAggregate?: Maybe<_Government_System_Types_Partisan_Systems_AggregateResult>;
  government_system_type_religion?: Maybe<Array<Maybe<_Government_System_Types_Religion_>>>;
  government_system_type_religionAggregate?: Maybe<_Government_System_Types_Religion_AggregateResult>;
  id: Scalars["ID"]["output"];
  indian_district?: Maybe<Array<Maybe<_Indian_District_>>>;
  indian_districtAggregate?: Maybe<_Indian_District_AggregateResult>;
  indian_government_official_role?: Maybe<Array<Maybe<_Indian_Government_Official_Role_>>>;
  indian_government_official_roleAggregate?: Maybe<_Indian_Government_Official_Role_AggregateResult>;
  indian_legal_document?: Maybe<Array<Maybe<_Indian_Legal_Document_>>>;
  indian_legal_documentAggregate?: Maybe<_Indian_Legal_Document_AggregateResult>;
  indian_loksabha_constituency?: Maybe<Array<Maybe<_Indian_Loksabha_Constituency_>>>;
  indian_loksabha_constituencyAggregate?: Maybe<_Indian_Loksabha_Constituency_AggregateResult>;
  indian_loksabha_election?: Maybe<Array<Maybe<_Indian_Loksabha_Election_>>>;
  indian_loksabha_electionAggregate?: Maybe<_Indian_Loksabha_Election_AggregateResult>;
  indian_political_party?: Maybe<Array<Maybe<_Indian_Political_Party_>>>;
  indian_political_partyAggregate?: Maybe<_Indian_Political_Party_AggregateResult>;
  indian_state_union_territory?: Maybe<Array<Maybe<_Indian_State_Union_Territory_>>>;
  indian_state_union_territoryAggregate?: Maybe<_Indian_State_Union_Territory_AggregateResult>;
  indian_union_government_department?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  indian_union_government_departmentAggregate?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  indian_union_government_ministry?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  indian_union_government_ministryAggregate?: Maybe<_Indian_Union_Government_Ministry_AggregateResult>;
  indian_union_parliament_loksabha?: Maybe<Array<Maybe<_Indian_Loksabha_>>>;
  indian_union_parliament_loksabhaAggregate?: Maybe<_Indian_Loksabha_AggregateResult>;
  indian_vidhansabha_constituency?: Maybe<Array<Maybe<_Indian_Vidhansabha_Constituency_>>>;
  indian_vidhansabha_constituencyAggregate?: Maybe<_Indian_Vidhansabha_Constituency_AggregateResult>;
  language?: Maybe<Array<Maybe<_Language_>>>;
  languageAggregate?: Maybe<_Language_AggregateResult>;
  language_script?: Maybe<Array<Maybe<_Language_Script_>>>;
  language_scriptAggregate?: Maybe<_Language_Script_AggregateResult>;
  name: Scalars["String"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  person?: Maybe<Array<Maybe<_Person_>>>;
  personAggregate?: Maybe<_Person_AggregateResult>;
  public_policy_domain?: Maybe<Array<Maybe<_Public_Policy_Domain_>>>;
  public_policy_domainAggregate?: Maybe<_Public_Policy_Domain_AggregateResult>;
  script?: Maybe<Array<Maybe<_Script_>>>;
  scriptAggregate?: Maybe<_Script_AggregateResult>;
};

export type _Name_CountryArgs = {
  filter?: InputMaybe<_Country_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Order>;
};

export type _Name_CountryAggregateArgs = {
  filter?: InputMaybe<_Country_Filter>;
};

export type _Name_Country_EventArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Event_Order>;
};

export type _Name_Country_EventAggregateArgs = {
  filter?: InputMaybe<_Country_Event_Filter>;
};

export type _Name_Country_GovernmentArgs = {
  filter?: InputMaybe<_Country_Government_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Country_Government_Order>;
};

export type _Name_Country_GovernmentAggregateArgs = {
  filter?: InputMaybe<_Country_Government_Filter>;
};

export type _Name_Government_System_Type_Authority_ConcentrationArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Concentration_Order>;
};

export type _Name_Government_System_Type_Authority_ConcentrationAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Concentration_Filter>;
};

export type _Name_Government_System_Type_Authority_DistributionArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Distribution_Order>;
};

export type _Name_Government_System_Type_Authority_DistributionAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Distribution_Filter>;
};

export type _Name_Government_System_Type_Authority_SourceArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Source_Order>;
};

export type _Name_Government_System_Type_Authority_SourceAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Source_Filter>;
};

export type _Name_Government_System_Type_Authority_StatusArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Authority_Status_Order>;
};

export type _Name_Government_System_Type_Authority_StatusAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Authority_Status_Filter>;
};

export type _Name_Government_System_Type_AutocraticArgs = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Autocratic_Order>;
};

export type _Name_Government_System_Type_AutocraticAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Autocratic_Filter>;
};

export type _Name_Government_System_Type_DemocracyArgs = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Democracy_Order>;
};

export type _Name_Government_System_Type_DemocracyAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Democracy_Filter>;
};

export type _Name_Government_System_Type_Economic_SystemArgs = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Economic_System_Order>;
};

export type _Name_Government_System_Type_Economic_SystemAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Economic_System_Filter>;
};

export type _Name_Government_System_Type_Head_Of_State_Or_GovernmentArgs = {
  filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentOrder>;
};

export type _Name_Government_System_Type_Head_Of_State_Or_GovernmentAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentFilter>;
};

export type _Name_Government_System_Type_MonarchyArgs = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Monarchy_Order>;
};

export type _Name_Government_System_Type_MonarchyAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Monarchy_Filter>;
};

export type _Name_Government_System_Type_OligarchyArgs = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Oligarchy_Order>;
};

export type _Name_Government_System_Type_OligarchyAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Oligarchy_Filter>;
};

export type _Name_Government_System_Type_Partisan_SystemsArgs = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Partisan_Systems_Order>;
};

export type _Name_Government_System_Type_Partisan_SystemsAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Partisan_Systems_Filter>;
};

export type _Name_Government_System_Type_ReligionArgs = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Government_System_Types_Religion_Order>;
};

export type _Name_Government_System_Type_ReligionAggregateArgs = {
  filter?: InputMaybe<_Government_System_Types_Religion_Filter>;
};

export type _Name_Indian_DistrictArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_District_Order>;
};

export type _Name_Indian_DistrictAggregateArgs = {
  filter?: InputMaybe<_Indian_District_Filter>;
};

export type _Name_Indian_Government_Official_RoleArgs = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Government_Official_Role_Order>;
};

export type _Name_Indian_Government_Official_RoleAggregateArgs = {
  filter?: InputMaybe<_Indian_Government_Official_Role_Filter>;
};

export type _Name_Indian_Legal_DocumentArgs = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Legal_Document_Order>;
};

export type _Name_Indian_Legal_DocumentAggregateArgs = {
  filter?: InputMaybe<_Indian_Legal_Document_Filter>;
};

export type _Name_Indian_Loksabha_ConstituencyArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Constituency_Order>;
};

export type _Name_Indian_Loksabha_ConstituencyAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Constituency_Filter>;
};

export type _Name_Indian_Loksabha_ElectionArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Election_Order>;
};

export type _Name_Indian_Loksabha_ElectionAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Election_Filter>;
};

export type _Name_Indian_Political_PartyArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Political_Party_Order>;
};

export type _Name_Indian_Political_PartyAggregateArgs = {
  filter?: InputMaybe<_Indian_Political_Party_Filter>;
};

export type _Name_Indian_State_Union_TerritoryArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_State_Union_Territory_Order>;
};

export type _Name_Indian_State_Union_TerritoryAggregateArgs = {
  filter?: InputMaybe<_Indian_State_Union_Territory_Filter>;
};

export type _Name_Indian_Union_Government_DepartmentArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type _Name_Indian_Union_Government_DepartmentAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type _Name_Indian_Union_Government_MinistryArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type _Name_Indian_Union_Government_MinistryAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Name_Indian_Union_Parliament_LoksabhaArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Loksabha_Order>;
};

export type _Name_Indian_Union_Parliament_LoksabhaAggregateArgs = {
  filter?: InputMaybe<_Indian_Loksabha_Filter>;
};

export type _Name_Indian_Vidhansabha_ConstituencyArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Vidhansabha_Constituency_Order>;
};

export type _Name_Indian_Vidhansabha_ConstituencyAggregateArgs = {
  filter?: InputMaybe<_Indian_Vidhansabha_Constituency_Filter>;
};

export type _Name_LanguageArgs = {
  filter?: InputMaybe<_Language_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Order>;
};

export type _Name_LanguageAggregateArgs = {
  filter?: InputMaybe<_Language_Filter>;
};

export type _Name_Language_ScriptArgs = {
  filter?: InputMaybe<_Language_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Script_Order>;
};

export type _Name_Language_ScriptAggregateArgs = {
  filter?: InputMaybe<_Language_Script_Filter>;
};

export type _Name_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Name_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Name_PersonArgs = {
  filter?: InputMaybe<_Person_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Person_Order>;
};

export type _Name_PersonAggregateArgs = {
  filter?: InputMaybe<_Person_Filter>;
};

export type _Name_Public_Policy_DomainArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Public_Policy_Domain_Order>;
};

export type _Name_Public_Policy_DomainAggregateArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
};

export type _Name_ScriptArgs = {
  filter?: InputMaybe<_Script_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Script_Order>;
};

export type _Name_ScriptAggregateArgs = {
  filter?: InputMaybe<_Script_Filter>;
};

export type _Name_AggregateResult = {
  __typename?: "_Name_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  nameMax?: Maybe<Scalars["String"]["output"]>;
  nameMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Name_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Name_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Name_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name?: InputMaybe<StringFullTextFilter_StringHashFilter_StringTermFilter>;
  not?: InputMaybe<_Name_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Name_Filter>>>;
};

export enum _Name_HasFilter {
  CaseSensitive = "case_sensitive",
  Country = "country",
  CountryEvent = "country_event",
  CountryGovernment = "country_government",
  GovernmentSystemTypeAuthorityConcentration = "government_system_type_authority_concentration",
  GovernmentSystemTypeAuthorityDistribution = "government_system_type_authority_distribution",
  GovernmentSystemTypeAuthoritySource = "government_system_type_authority_source",
  GovernmentSystemTypeAuthorityStatus = "government_system_type_authority_status",
  GovernmentSystemTypeAutocratic = "government_system_type_autocratic",
  GovernmentSystemTypeDemocracy = "government_system_type_democracy",
  GovernmentSystemTypeEconomicSystem = "government_system_type_economic_system",
  GovernmentSystemTypeHeadOfStateOrGovernment = "government_system_type_head_of_state_or_government",
  GovernmentSystemTypeMonarchy = "government_system_type_monarchy",
  GovernmentSystemTypeOligarchy = "government_system_type_oligarchy",
  GovernmentSystemTypePartisanSystems = "government_system_type_partisan_systems",
  GovernmentSystemTypeReligion = "government_system_type_religion",
  IndianDistrict = "indian_district",
  IndianGovernmentOfficialRole = "indian_government_official_role",
  IndianLegalDocument = "indian_legal_document",
  IndianLoksabhaConstituency = "indian_loksabha_constituency",
  IndianLoksabhaElection = "indian_loksabha_election",
  IndianPoliticalParty = "indian_political_party",
  IndianStateUnionTerritory = "indian_state_union_territory",
  IndianUnionGovernmentDepartment = "indian_union_government_department",
  IndianUnionGovernmentMinistry = "indian_union_government_ministry",
  IndianUnionParliamentLoksabha = "indian_union_parliament_loksabha",
  IndianVidhansabhaConstituency = "indian_vidhansabha_constituency",
  Language = "language",
  LanguageScript = "language_script",
  Name = "name",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  Person = "person",
  PublicPolicyDomain = "public_policy_domain",
  Script = "script",
}

export type _Name_Order = {
  asc?: InputMaybe<_Name_Orderable>;
  desc?: InputMaybe<_Name_Orderable>;
  then?: InputMaybe<_Name_Order>;
};

export enum _Name_Orderable {
  Name = "name",
  NodeCreatedOn = "node_created_on",
}

export type _Name_Patch = {
  case_sensitive?: InputMaybe<Scalars["Boolean"]["input"]>;
  country?: InputMaybe<Array<InputMaybe<_Country_Ref>>>;
  country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  country_government?: InputMaybe<Array<InputMaybe<_Country_Government_Ref>>>;
  government_system_type_authority_concentration?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Concentration_Ref>>
  >;
  government_system_type_authority_distribution?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Distribution_Ref>>
  >;
  government_system_type_authority_source?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Source_Ref>>
  >;
  government_system_type_authority_status?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Status_Ref>>
  >;
  government_system_type_autocratic?: InputMaybe<Array<InputMaybe<_Government_System_Types_Autocratic_Ref>>>;
  government_system_type_democracy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Ref>>>;
  government_system_type_economic_system?: InputMaybe<Array<InputMaybe<_Government_System_Types_Economic_System_Ref>>>;
  government_system_type_head_of_state_or_government?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentRef>>
  >;
  government_system_type_monarchy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Monarchy_Ref>>>;
  government_system_type_oligarchy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Oligarchy_Ref>>>;
  government_system_type_partisan_systems?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Partisan_Systems_Ref>>
  >;
  government_system_type_religion?: InputMaybe<Array<InputMaybe<_Government_System_Types_Religion_Ref>>>;
  indian_district?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  indian_government_official_role?: InputMaybe<Array<InputMaybe<_Indian_Government_Official_Role_Ref>>>;
  indian_legal_document?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_Ref>>>;
  indian_loksabha_constituency?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  indian_loksabha_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Ref>>>;
  indian_political_party?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Ref>>>;
  indian_state_union_territory?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  indian_union_government_department?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  indian_union_government_ministry?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  indian_union_parliament_loksabha?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  indian_vidhansabha_constituency?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
  language?: InputMaybe<Array<InputMaybe<_Language_Ref>>>;
  language_script?: InputMaybe<Array<InputMaybe<_Language_Script_Ref>>>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  person?: InputMaybe<Array<InputMaybe<_Person_Ref>>>;
  public_policy_domain?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  script?: InputMaybe<Array<InputMaybe<_Script_Ref>>>;
};

export type _Name_Ref = {
  case_sensitive?: InputMaybe<Scalars["Boolean"]["input"]>;
  country?: InputMaybe<Array<InputMaybe<_Country_Ref>>>;
  country_event?: InputMaybe<Array<InputMaybe<_Country_Event_Ref>>>;
  country_government?: InputMaybe<Array<InputMaybe<_Country_Government_Ref>>>;
  government_system_type_authority_concentration?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Concentration_Ref>>
  >;
  government_system_type_authority_distribution?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Distribution_Ref>>
  >;
  government_system_type_authority_source?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Source_Ref>>
  >;
  government_system_type_authority_status?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Authority_Status_Ref>>
  >;
  government_system_type_autocratic?: InputMaybe<Array<InputMaybe<_Government_System_Types_Autocratic_Ref>>>;
  government_system_type_democracy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Democracy_Ref>>>;
  government_system_type_economic_system?: InputMaybe<Array<InputMaybe<_Government_System_Types_Economic_System_Ref>>>;
  government_system_type_head_of_state_or_government?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Head_Of_State_Or_GovernmentRef>>
  >;
  government_system_type_monarchy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Monarchy_Ref>>>;
  government_system_type_oligarchy?: InputMaybe<Array<InputMaybe<_Government_System_Types_Oligarchy_Ref>>>;
  government_system_type_partisan_systems?: InputMaybe<
    Array<InputMaybe<_Government_System_Types_Partisan_Systems_Ref>>
  >;
  government_system_type_religion?: InputMaybe<Array<InputMaybe<_Government_System_Types_Religion_Ref>>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  indian_district?: InputMaybe<Array<InputMaybe<_Indian_District_Ref>>>;
  indian_government_official_role?: InputMaybe<Array<InputMaybe<_Indian_Government_Official_Role_Ref>>>;
  indian_legal_document?: InputMaybe<Array<InputMaybe<_Indian_Legal_Document_Ref>>>;
  indian_loksabha_constituency?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Constituency_Ref>>>;
  indian_loksabha_election?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Election_Ref>>>;
  indian_political_party?: InputMaybe<Array<InputMaybe<_Indian_Political_Party_Ref>>>;
  indian_state_union_territory?: InputMaybe<Array<InputMaybe<_Indian_State_Union_Territory_Ref>>>;
  indian_union_government_department?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  indian_union_government_ministry?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  indian_union_parliament_loksabha?: InputMaybe<Array<InputMaybe<_Indian_Loksabha_Ref>>>;
  indian_vidhansabha_constituency?: InputMaybe<Array<InputMaybe<_Indian_Vidhansabha_Constituency_Ref>>>;
  language?: InputMaybe<Array<InputMaybe<_Language_Ref>>>;
  language_script?: InputMaybe<Array<InputMaybe<_Language_Script_Ref>>>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  person?: InputMaybe<Array<InputMaybe<_Person_Ref>>>;
  public_policy_domain?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Ref>>>;
  script?: InputMaybe<Array<InputMaybe<_Script_Ref>>>;
};

export type _Node_Update_ = {
  __typename?: "_Node_Update_";
  comment?: Maybe<Scalars["String"]["output"]>;
  id: Scalars["ID"]["output"];
  updated_on?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Node_Update_AggregateResult = {
  __typename?: "_Node_Update_AggregateResult";
  commentMax?: Maybe<Scalars["String"]["output"]>;
  commentMin?: Maybe<Scalars["String"]["output"]>;
  count?: Maybe<Scalars["Int"]["output"]>;
  updated_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  updated_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Node_Update_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Node_Update_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Node_Update_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Node_Update_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Node_Update_Filter>>>;
  updated_on?: InputMaybe<DateTimeFilter>;
};

export enum _Node_Update_HasFilter {
  Comment = "comment",
  UpdatedOn = "updated_on",
}

export type _Node_Update_Order = {
  asc?: InputMaybe<_Node_Update_Orderable>;
  desc?: InputMaybe<_Node_Update_Orderable>;
  then?: InputMaybe<_Node_Update_Order>;
};

export enum _Node_Update_Orderable {
  Comment = "comment",
  UpdatedOn = "updated_on",
}

export type _Node_Update_Patch = {
  comment?: InputMaybe<Scalars["String"]["input"]>;
  updated_on?: InputMaybe<Scalars["DateTime"]["input"]>;
};

export type _Node_Update_Ref = {
  comment?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  updated_on?: InputMaybe<Scalars["DateTime"]["input"]>;
};

export type _Person_ = {
  __typename?: "_Person_";
  born?: Maybe<_Date_Time_>;
  died?: Maybe<_Date_Time_>;
  id: Scalars["ID"]["output"];
  indian_politician?: Maybe<_Indian_Politician_>;
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  wikidata_qid?: Maybe<Scalars["String"]["output"]>;
  wikipedia_page?: Maybe<Scalars["String"]["output"]>;
};

export type _Person_BornArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Person_DiedArgs = {
  filter?: InputMaybe<_Date_Time_Filter>;
};

export type _Person_Indian_PoliticianArgs = {
  filter?: InputMaybe<_Indian_Politician_Filter>;
};

export type _Person_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Person_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Person_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Person_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Person_AggregateResult = {
  __typename?: "_Person_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  wikidata_qidMax?: Maybe<Scalars["String"]["output"]>;
  wikidata_qidMin?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMax?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Person_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Person_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Person_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  not?: InputMaybe<_Person_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Person_Filter>>>;
  wikidata_qid?: InputMaybe<StringHashFilter>;
  wikipedia_page?: InputMaybe<StringFullTextFilter>;
};

export enum _Person_HasFilter {
  Born = "born",
  Died = "died",
  IndianPolitician = "indian_politician",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Person_Order = {
  asc?: InputMaybe<_Person_Orderable>;
  desc?: InputMaybe<_Person_Orderable>;
  then?: InputMaybe<_Person_Order>;
};

export enum _Person_Orderable {
  NodeCreatedOn = "node_created_on",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Person_Patch = {
  born?: InputMaybe<_Date_Time_Ref>;
  died?: InputMaybe<_Date_Time_Ref>;
  indian_politician?: InputMaybe<_Indian_Politician_Ref>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Person_Ref = {
  born?: InputMaybe<_Date_Time_Ref>;
  died?: InputMaybe<_Date_Time_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  indian_politician?: InputMaybe<_Indian_Politician_Ref>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Public_Policy_Domain_ = {
  __typename?: "_Public_Policy_Domain_";
  description?: Maybe<Scalars["String"]["output"]>;
  government_ministries_departments?: Maybe<_Public_Policy_Domain_Government_Ministries_Departments_>;
  id: Scalars["ID"]["output"];
  name_id: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
};

export type _Public_Policy_Domain_Government_Ministries_DepartmentsArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
};

export type _Public_Policy_Domain_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Public_Policy_Domain_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Public_Policy_Domain_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Public_Policy_Domain_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Public_Policy_Domain_AggregateResult = {
  __typename?: "_Public_Policy_Domain_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  descriptionMax?: Maybe<Scalars["String"]["output"]>;
  descriptionMin?: Maybe<Scalars["String"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Public_Policy_Domain_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringFullTextFilter_StringHashFilter_StringTermFilter>;
  not?: InputMaybe<_Public_Policy_Domain_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Filter>>>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_ = {
  __typename?: "_Public_Policy_Domain_Government_Ministries_Departments_";
  id: Scalars["ID"]["output"];
  indian_union_government_departments?: Maybe<Array<Maybe<_Indian_Union_Government_Department_>>>;
  indian_union_government_departmentsAggregate?: Maybe<_Indian_Union_Government_Department_AggregateResult>;
  indian_union_government_ministries?: Maybe<Array<Maybe<_Indian_Union_Government_Ministry_>>>;
  indian_union_government_ministriesAggregate?: Maybe<_Indian_Union_Government_Ministry_AggregateResult>;
  name_id: Scalars["String"]["output"];
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  public_policy_domain?: Maybe<_Public_Policy_Domain_>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_DepartmentsArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Department_Order>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_DepartmentsAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Department_Filter>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_MinistriesArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Indian_Union_Government_Ministry_Order>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_MinistriesAggregateArgs = {
  filter?: InputMaybe<_Indian_Union_Government_Ministry_Filter>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Public_Policy_DomainArgs = {
  filter?: InputMaybe<_Public_Policy_Domain_Filter>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_AggregateResult = {
  __typename?: "_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_idMax?: Maybe<Scalars["String"]["output"]>;
  name_idMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_id?: InputMaybe<StringFullTextFilter_StringHashFilter_StringTermFilter>;
  not?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Filter>>>;
};

export enum _Public_Policy_Domain_Government_Ministries_Departments_HasFilter {
  IndianUnionGovernmentDepartments = "indian_union_government_departments",
  IndianUnionGovernmentMinistries = "indian_union_government_ministries",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  PublicPolicyDomain = "public_policy_domain",
}

export type _Public_Policy_Domain_Government_Ministries_Departments_Order = {
  asc?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Orderable>;
  desc?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Orderable>;
  then?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Order>;
};

export enum _Public_Policy_Domain_Government_Ministries_Departments_Orderable {
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Public_Policy_Domain_Government_Ministries_Departments_Patch = {
  indian_union_government_departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  indian_union_government_ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  public_policy_domain?: InputMaybe<_Public_Policy_Domain_Ref>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  indian_union_government_departments?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Department_Ref>>>;
  indian_union_government_ministries?: InputMaybe<Array<InputMaybe<_Indian_Union_Government_Ministry_Ref>>>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  public_policy_domain?: InputMaybe<_Public_Policy_Domain_Ref>;
};

export enum _Public_Policy_Domain_HasFilter {
  Description = "description",
  GovernmentMinistriesDepartments = "government_ministries_departments",
  NameId = "name_id",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
}

export type _Public_Policy_Domain_Order = {
  asc?: InputMaybe<_Public_Policy_Domain_Orderable>;
  desc?: InputMaybe<_Public_Policy_Domain_Orderable>;
  then?: InputMaybe<_Public_Policy_Domain_Order>;
};

export enum _Public_Policy_Domain_Orderable {
  Description = "description",
  NameId = "name_id",
  NodeCreatedOn = "node_created_on",
}

export type _Public_Policy_Domain_Patch = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_ministries_departments?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Public_Policy_Domain_Ref = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  government_ministries_departments?: InputMaybe<_Public_Policy_Domain_Government_Ministries_Departments_Ref>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name_id?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
};

export type _Script_ = {
  __typename?: "_Script_";
  id: Scalars["ID"]["output"];
  languages?: Maybe<Array<Maybe<_Language_>>>;
  languagesAggregate?: Maybe<_Language_AggregateResult>;
  name_en: Scalars["String"]["output"];
  names?: Maybe<Array<Maybe<_Name_>>>;
  namesAggregate?: Maybe<_Name_AggregateResult>;
  node_created_on?: Maybe<Scalars["DateTime"]["output"]>;
  node_updates?: Maybe<Array<Maybe<_Node_Update_>>>;
  node_updatesAggregate?: Maybe<_Node_Update_AggregateResult>;
  wikidata_qid?: Maybe<Scalars["String"]["output"]>;
  wikipedia_page?: Maybe<Scalars["String"]["output"]>;
};

export type _Script_LanguagesArgs = {
  filter?: InputMaybe<_Language_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Language_Order>;
};

export type _Script_LanguagesAggregateArgs = {
  filter?: InputMaybe<_Language_Filter>;
};

export type _Script_NamesArgs = {
  filter?: InputMaybe<_Name_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Name_Order>;
};

export type _Script_NamesAggregateArgs = {
  filter?: InputMaybe<_Name_Filter>;
};

export type _Script_Node_UpdatesArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  order?: InputMaybe<_Node_Update_Order>;
};

export type _Script_Node_UpdatesAggregateArgs = {
  filter?: InputMaybe<_Node_Update_Filter>;
};

export type _Script_AggregateResult = {
  __typename?: "_Script_AggregateResult";
  count?: Maybe<Scalars["Int"]["output"]>;
  name_enMax?: Maybe<Scalars["String"]["output"]>;
  name_enMin?: Maybe<Scalars["String"]["output"]>;
  node_created_onMax?: Maybe<Scalars["DateTime"]["output"]>;
  node_created_onMin?: Maybe<Scalars["DateTime"]["output"]>;
  wikidata_qidMax?: Maybe<Scalars["String"]["output"]>;
  wikidata_qidMin?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMax?: Maybe<Scalars["String"]["output"]>;
  wikipedia_pageMin?: Maybe<Scalars["String"]["output"]>;
};

export type _Script_Filter = {
  and?: InputMaybe<Array<InputMaybe<_Script_Filter>>>;
  has?: InputMaybe<Array<InputMaybe<_Script_HasFilter>>>;
  id?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name_en?: InputMaybe<StringHashFilter>;
  not?: InputMaybe<_Script_Filter>;
  or?: InputMaybe<Array<InputMaybe<_Script_Filter>>>;
  wikidata_qid?: InputMaybe<StringHashFilter>;
  wikipedia_page?: InputMaybe<StringFullTextFilter>;
};

export enum _Script_HasFilter {
  Languages = "languages",
  NameEn = "name_en",
  Names = "names",
  NodeCreatedOn = "node_created_on",
  NodeUpdates = "node_updates",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Script_Order = {
  asc?: InputMaybe<_Script_Orderable>;
  desc?: InputMaybe<_Script_Orderable>;
  then?: InputMaybe<_Script_Order>;
};

export enum _Script_Orderable {
  NameEn = "name_en",
  NodeCreatedOn = "node_created_on",
  WikidataQid = "wikidata_qid",
  WikipediaPage = "wikipedia_page",
}

export type _Script_Patch = {
  languages?: InputMaybe<Array<InputMaybe<_Language_Ref>>>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type _Script_Ref = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  languages?: InputMaybe<Array<InputMaybe<_Language_Ref>>>;
  name_en?: InputMaybe<Scalars["String"]["input"]>;
  names?: InputMaybe<Array<InputMaybe<_Name_Ref>>>;
  node_created_on?: InputMaybe<Scalars["DateTime"]["input"]>;
  node_updates?: InputMaybe<Array<InputMaybe<_Node_Update_Ref>>>;
  wikidata_qid?: InputMaybe<Scalars["String"]["input"]>;
  wikipedia_page?: InputMaybe<Scalars["String"]["input"]>;
};

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Account: ResolverTypeWrapper<Account>;
  AccountAggregateResult: ResolverTypeWrapper<AccountAggregateResult>;
  AccountFilter: AccountFilter;
  AccountHasFilter: AccountHasFilter;
  AccountOrder: AccountOrder;
  AccountOrderable: AccountOrderable;
  AccountPatch: AccountPatch;
  AccountRef: AccountRef;
  AddAccountInput: AddAccountInput;
  AddAccountPayload: ResolverTypeWrapper<AddAccountPayload>;
  AddSessionInput: AddSessionInput;
  AddSessionPayload: ResolverTypeWrapper<AddSessionPayload>;
  AddUserInput: AddUserInput;
  AddUserPayload: ResolverTypeWrapper<AddUserPayload>;
  AddVerificationTokenInput: AddVerificationTokenInput;
  AddVerificationTokenPayload: ResolverTypeWrapper<AddVerificationTokenPayload>;
  Add_Country_Event_Input: Add_Country_Event_Input;
  Add_Country_Event_Payload: ResolverTypeWrapper<Add_Country_Event_Payload>;
  Add_Country_Government_Input: Add_Country_Government_Input;
  Add_Country_Government_Payload: ResolverTypeWrapper<Add_Country_Government_Payload>;
  Add_Country_Input: Add_Country_Input;
  Add_Country_Payload: ResolverTypeWrapper<Add_Country_Payload>;
  Add_Country_Region_Input: Add_Country_Region_Input;
  Add_Country_Region_Payload: ResolverTypeWrapper<Add_Country_Region_Payload>;
  Add_Date_Time_Input: Add_Date_Time_Input;
  Add_Date_Time_Payload: ResolverTypeWrapper<Add_Date_Time_Payload>;
  Add_Geo_Input: Add_Geo_Input;
  Add_Geo_Payload: ResolverTypeWrapper<Add_Geo_Payload>;
  Add_Government_System_Type_Input: Add_Government_System_Type_Input;
  Add_Government_System_Type_Payload: ResolverTypeWrapper<Add_Government_System_Type_Payload>;
  Add_Government_System_Types_Authority_Concentration_Input: Add_Government_System_Types_Authority_Concentration_Input;
  Add_Government_System_Types_Authority_Concentration_Payload: ResolverTypeWrapper<Add_Government_System_Types_Authority_Concentration_Payload>;
  Add_Government_System_Types_Authority_Distribution_Input: Add_Government_System_Types_Authority_Distribution_Input;
  Add_Government_System_Types_Authority_Distribution_Payload: ResolverTypeWrapper<Add_Government_System_Types_Authority_Distribution_Payload>;
  Add_Government_System_Types_Authority_Source_Input: Add_Government_System_Types_Authority_Source_Input;
  Add_Government_System_Types_Authority_Source_Payload: ResolverTypeWrapper<Add_Government_System_Types_Authority_Source_Payload>;
  Add_Government_System_Types_Authority_Status_Input: Add_Government_System_Types_Authority_Status_Input;
  Add_Government_System_Types_Authority_Status_Payload: ResolverTypeWrapper<Add_Government_System_Types_Authority_Status_Payload>;
  Add_Government_System_Types_Autocratic_Input: Add_Government_System_Types_Autocratic_Input;
  Add_Government_System_Types_Autocratic_Payload: ResolverTypeWrapper<Add_Government_System_Types_Autocratic_Payload>;
  Add_Government_System_Types_Democracy_Input: Add_Government_System_Types_Democracy_Input;
  Add_Government_System_Types_Democracy_Payload: ResolverTypeWrapper<Add_Government_System_Types_Democracy_Payload>;
  Add_Government_System_Types_Economic_System_Input: Add_Government_System_Types_Economic_System_Input;
  Add_Government_System_Types_Economic_System_Payload: ResolverTypeWrapper<Add_Government_System_Types_Economic_System_Payload>;
  Add_Government_System_Types_Head_Of_State_Or_GovernmentInput: Add_Government_System_Types_Head_Of_State_Or_GovernmentInput;
  Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload: ResolverTypeWrapper<Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload>;
  Add_Government_System_Types_Monarchy_Input: Add_Government_System_Types_Monarchy_Input;
  Add_Government_System_Types_Monarchy_Payload: ResolverTypeWrapper<Add_Government_System_Types_Monarchy_Payload>;
  Add_Government_System_Types_Oligarchy_Input: Add_Government_System_Types_Oligarchy_Input;
  Add_Government_System_Types_Oligarchy_Payload: ResolverTypeWrapper<Add_Government_System_Types_Oligarchy_Payload>;
  Add_Government_System_Types_Partisan_Systems_Input: Add_Government_System_Types_Partisan_Systems_Input;
  Add_Government_System_Types_Partisan_Systems_Payload: ResolverTypeWrapper<Add_Government_System_Types_Partisan_Systems_Payload>;
  Add_Government_System_Types_Religion_Input: Add_Government_System_Types_Religion_Input;
  Add_Government_System_Types_Religion_Payload: ResolverTypeWrapper<Add_Government_System_Types_Religion_Payload>;
  Add_Indian_Administrative_DivisionsInput: Add_Indian_Administrative_DivisionsInput;
  Add_Indian_Administrative_DivisionsPayload: ResolverTypeWrapper<Add_Indian_Administrative_DivisionsPayload>;
  Add_Indian_District_Input: Add_Indian_District_Input;
  Add_Indian_District_Payload: ResolverTypeWrapper<Add_Indian_District_Payload>;
  Add_Indian_District_Region_Input: Add_Indian_District_Region_Input;
  Add_Indian_District_Region_Payload: ResolverTypeWrapper<Add_Indian_District_Region_Payload>;
  Add_Indian_Government_Official_Role_Input: Add_Indian_Government_Official_Role_Input;
  Add_Indian_Government_Official_Role_Payload: ResolverTypeWrapper<Add_Indian_Government_Official_Role_Payload>;
  Add_Indian_Government_System_Input: Add_Indian_Government_System_Input;
  Add_Indian_Government_System_Payload: ResolverTypeWrapper<Add_Indian_Government_System_Payload>;
  Add_Indian_Legal_Document_Input: Add_Indian_Legal_Document_Input;
  Add_Indian_Legal_Document_Payload: ResolverTypeWrapper<Add_Indian_Legal_Document_Payload>;
  Add_Indian_Legislative_DivisionsInput: Add_Indian_Legislative_DivisionsInput;
  Add_Indian_Legislative_DivisionsPayload: ResolverTypeWrapper<Add_Indian_Legislative_DivisionsPayload>;
  Add_Indian_Loksabha_Constituency_Election_Candidate_Input: Add_Indian_Loksabha_Constituency_Election_Candidate_Input;
  Add_Indian_Loksabha_Constituency_Election_Candidate_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Constituency_Election_Candidate_Payload>;
  Add_Indian_Loksabha_Constituency_Election_Input: Add_Indian_Loksabha_Constituency_Election_Input;
  Add_Indian_Loksabha_Constituency_Election_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Constituency_Election_Payload>;
  Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input: Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input;
  Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload>;
  Add_Indian_Loksabha_Constituency_Election_Result_Input: Add_Indian_Loksabha_Constituency_Election_Result_Input;
  Add_Indian_Loksabha_Constituency_Election_Result_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Constituency_Election_Result_Payload>;
  Add_Indian_Loksabha_Constituency_Input: Add_Indian_Loksabha_Constituency_Input;
  Add_Indian_Loksabha_Constituency_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Constituency_Payload>;
  Add_Indian_Loksabha_Constituency_Region_Input: Add_Indian_Loksabha_Constituency_Region_Input;
  Add_Indian_Loksabha_Constituency_Region_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Constituency_Region_Payload>;
  Add_Indian_Loksabha_Election_Input: Add_Indian_Loksabha_Election_Input;
  Add_Indian_Loksabha_Election_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Election_Payload>;
  Add_Indian_Loksabha_Election_Phase_Input: Add_Indian_Loksabha_Election_Phase_Input;
  Add_Indian_Loksabha_Election_Phase_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Election_Phase_Payload>;
  Add_Indian_Loksabha_Election_Result_Input: Add_Indian_Loksabha_Election_Result_Input;
  Add_Indian_Loksabha_Election_Result_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Election_Result_Payload>;
  Add_Indian_Loksabha_Input: Add_Indian_Loksabha_Input;
  Add_Indian_Loksabha_Member_Input: Add_Indian_Loksabha_Member_Input;
  Add_Indian_Loksabha_Member_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Member_Payload>;
  Add_Indian_Loksabha_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Payload>;
  Add_Indian_Loksabha_Session_Input: Add_Indian_Loksabha_Session_Input;
  Add_Indian_Loksabha_Session_Payload: ResolverTypeWrapper<Add_Indian_Loksabha_Session_Payload>;
  Add_Indian_Political_Party_Input: Add_Indian_Political_Party_Input;
  Add_Indian_Political_Party_Loksabha_Election_Input: Add_Indian_Political_Party_Loksabha_Election_Input;
  Add_Indian_Political_Party_Loksabha_Election_Payload: ResolverTypeWrapper<Add_Indian_Political_Party_Loksabha_Election_Payload>;
  Add_Indian_Political_Party_Member_Input: Add_Indian_Political_Party_Member_Input;
  Add_Indian_Political_Party_Member_Payload: ResolverTypeWrapper<Add_Indian_Political_Party_Member_Payload>;
  Add_Indian_Political_Party_Payload: ResolverTypeWrapper<Add_Indian_Political_Party_Payload>;
  Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input: Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input;
  Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload: ResolverTypeWrapper<Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload>;
  Add_Indian_Politician_Input: Add_Indian_Politician_Input;
  Add_Indian_Politician_Payload: ResolverTypeWrapper<Add_Indian_Politician_Payload>;
  Add_Indian_Prime_Minister_Input: Add_Indian_Prime_Minister_Input;
  Add_Indian_Prime_Minister_Payload: ResolverTypeWrapper<Add_Indian_Prime_Minister_Payload>;
  Add_Indian_State_Union_Territory_Input: Add_Indian_State_Union_Territory_Input;
  Add_Indian_State_Union_Territory_Payload: ResolverTypeWrapper<Add_Indian_State_Union_Territory_Payload>;
  Add_Indian_State_Union_Territory_Region_Input: Add_Indian_State_Union_Territory_Region_Input;
  Add_Indian_State_Union_Territory_Region_Payload: ResolverTypeWrapper<Add_Indian_State_Union_Territory_Region_Payload>;
  Add_Indian_Union_Council_Of_Ministers_Input: Add_Indian_Union_Council_Of_Ministers_Input;
  Add_Indian_Union_Council_Of_Ministers_Payload: ResolverTypeWrapper<Add_Indian_Union_Council_Of_Ministers_Payload>;
  Add_Indian_Union_Government_Cabinet_Input: Add_Indian_Union_Government_Cabinet_Input;
  Add_Indian_Union_Government_Cabinet_Minister_Input: Add_Indian_Union_Government_Cabinet_Minister_Input;
  Add_Indian_Union_Government_Cabinet_Minister_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Cabinet_Minister_Payload>;
  Add_Indian_Union_Government_Cabinet_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Cabinet_Payload>;
  Add_Indian_Union_Government_Department_Input: Add_Indian_Union_Government_Department_Input;
  Add_Indian_Union_Government_Department_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Department_Payload>;
  Add_Indian_Union_Government_Input: Add_Indian_Union_Government_Input;
  Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input: Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input;
  Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload>;
  Add_Indian_Union_Government_Minister_Of_State_Input: Add_Indian_Union_Government_Minister_Of_State_Input;
  Add_Indian_Union_Government_Minister_Of_State_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Minister_Of_State_Payload>;
  Add_Indian_Union_Government_Ministry_Input: Add_Indian_Union_Government_Ministry_Input;
  Add_Indian_Union_Government_Ministry_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Ministry_Payload>;
  Add_Indian_Union_Government_Payload: ResolverTypeWrapper<Add_Indian_Union_Government_Payload>;
  Add_Indian_Vidhansabha_Constituency_Input: Add_Indian_Vidhansabha_Constituency_Input;
  Add_Indian_Vidhansabha_Constituency_Payload: ResolverTypeWrapper<Add_Indian_Vidhansabha_Constituency_Payload>;
  Add_Indian_Vidhansabha_Constituency_Region_Input: Add_Indian_Vidhansabha_Constituency_Region_Input;
  Add_Indian_Vidhansabha_Constituency_Region_Payload: ResolverTypeWrapper<Add_Indian_Vidhansabha_Constituency_Region_Payload>;
  Add_Language_Input: Add_Language_Input;
  Add_Language_Payload: ResolverTypeWrapper<Add_Language_Payload>;
  Add_Language_Script_Input: Add_Language_Script_Input;
  Add_Language_Script_Payload: ResolverTypeWrapper<Add_Language_Script_Payload>;
  Add_Name_Input: Add_Name_Input;
  Add_Name_Payload: ResolverTypeWrapper<Add_Name_Payload>;
  Add_Node_Update_Input: Add_Node_Update_Input;
  Add_Node_Update_Payload: ResolverTypeWrapper<Add_Node_Update_Payload>;
  Add_Person_Input: Add_Person_Input;
  Add_Person_Payload: ResolverTypeWrapper<Add_Person_Payload>;
  Add_Public_Policy_Domain_Government_Ministries_Departments_Input: Add_Public_Policy_Domain_Government_Ministries_Departments_Input;
  Add_Public_Policy_Domain_Government_Ministries_Departments_Payload: ResolverTypeWrapper<Add_Public_Policy_Domain_Government_Ministries_Departments_Payload>;
  Add_Public_Policy_Domain_Input: Add_Public_Policy_Domain_Input;
  Add_Public_Policy_Domain_Payload: ResolverTypeWrapper<Add_Public_Policy_Domain_Payload>;
  Add_Script_Input: Add_Script_Input;
  Add_Script_Payload: ResolverTypeWrapper<Add_Script_Payload>;
  AuthRule: AuthRule;
  Boolean: ResolverTypeWrapper<Scalars["Boolean"]["output"]>;
  ContainsFilter: ContainsFilter;
  CustomHTTP: CustomHttp;
  DateTime: ResolverTypeWrapper<Scalars["DateTime"]["output"]>;
  DateTimeFilter: DateTimeFilter;
  DateTimeRange: DateTimeRange;
  Date_Time_Precision_Category: Date_Time_Precision_Category;
  Date_Time_Precision_Category_exact: Date_Time_Precision_Category_Exact;
  DeleteAccountPayload: ResolverTypeWrapper<DeleteAccountPayload>;
  DeleteSessionPayload: ResolverTypeWrapper<DeleteSessionPayload>;
  DeleteUserPayload: ResolverTypeWrapper<DeleteUserPayload>;
  DeleteVerificationTokenPayload: ResolverTypeWrapper<DeleteVerificationTokenPayload>;
  Delete_Country_Event_Payload: ResolverTypeWrapper<Delete_Country_Event_Payload>;
  Delete_Country_Government_Payload: ResolverTypeWrapper<Delete_Country_Government_Payload>;
  Delete_Country_Payload: ResolverTypeWrapper<Delete_Country_Payload>;
  Delete_Country_Region_Payload: ResolverTypeWrapper<Delete_Country_Region_Payload>;
  Delete_Date_Time_Payload: ResolverTypeWrapper<Delete_Date_Time_Payload>;
  Delete_Geo_Payload: ResolverTypeWrapper<Delete_Geo_Payload>;
  Delete_Government_System_Type_Payload: ResolverTypeWrapper<Delete_Government_System_Type_Payload>;
  Delete_Government_System_Types_Authority_Concentration_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Authority_Concentration_Payload>;
  Delete_Government_System_Types_Authority_Distribution_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Authority_Distribution_Payload>;
  Delete_Government_System_Types_Authority_Source_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Authority_Source_Payload>;
  Delete_Government_System_Types_Authority_Status_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Authority_Status_Payload>;
  Delete_Government_System_Types_Autocratic_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Autocratic_Payload>;
  Delete_Government_System_Types_Democracy_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Democracy_Payload>;
  Delete_Government_System_Types_Economic_System_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Economic_System_Payload>;
  Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload: ResolverTypeWrapper<Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload>;
  Delete_Government_System_Types_Monarchy_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Monarchy_Payload>;
  Delete_Government_System_Types_Oligarchy_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Oligarchy_Payload>;
  Delete_Government_System_Types_Partisan_Systems_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Partisan_Systems_Payload>;
  Delete_Government_System_Types_Religion_Payload: ResolverTypeWrapper<Delete_Government_System_Types_Religion_Payload>;
  Delete_Indian_Administrative_DivisionsPayload: ResolverTypeWrapper<Delete_Indian_Administrative_DivisionsPayload>;
  Delete_Indian_District_Payload: ResolverTypeWrapper<Delete_Indian_District_Payload>;
  Delete_Indian_District_Region_Payload: ResolverTypeWrapper<Delete_Indian_District_Region_Payload>;
  Delete_Indian_Government_Official_Role_Payload: ResolverTypeWrapper<Delete_Indian_Government_Official_Role_Payload>;
  Delete_Indian_Government_System_Payload: ResolverTypeWrapper<Delete_Indian_Government_System_Payload>;
  Delete_Indian_Legal_Document_Payload: ResolverTypeWrapper<Delete_Indian_Legal_Document_Payload>;
  Delete_Indian_Legislative_DivisionsPayload: ResolverTypeWrapper<Delete_Indian_Legislative_DivisionsPayload>;
  Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload>;
  Delete_Indian_Loksabha_Constituency_Election_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Constituency_Election_Payload>;
  Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload>;
  Delete_Indian_Loksabha_Constituency_Election_Result_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Constituency_Election_Result_Payload>;
  Delete_Indian_Loksabha_Constituency_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Constituency_Payload>;
  Delete_Indian_Loksabha_Constituency_Region_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Constituency_Region_Payload>;
  Delete_Indian_Loksabha_Election_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Election_Payload>;
  Delete_Indian_Loksabha_Election_Phase_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Election_Phase_Payload>;
  Delete_Indian_Loksabha_Election_Result_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Election_Result_Payload>;
  Delete_Indian_Loksabha_Member_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Member_Payload>;
  Delete_Indian_Loksabha_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Payload>;
  Delete_Indian_Loksabha_Session_Payload: ResolverTypeWrapper<Delete_Indian_Loksabha_Session_Payload>;
  Delete_Indian_Political_Party_Loksabha_Election_Payload: ResolverTypeWrapper<Delete_Indian_Political_Party_Loksabha_Election_Payload>;
  Delete_Indian_Political_Party_Member_Payload: ResolverTypeWrapper<Delete_Indian_Political_Party_Member_Payload>;
  Delete_Indian_Political_Party_Payload: ResolverTypeWrapper<Delete_Indian_Political_Party_Payload>;
  Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload: ResolverTypeWrapper<Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload>;
  Delete_Indian_Politician_Payload: ResolverTypeWrapper<Delete_Indian_Politician_Payload>;
  Delete_Indian_Prime_Minister_Payload: ResolverTypeWrapper<Delete_Indian_Prime_Minister_Payload>;
  Delete_Indian_State_Union_Territory_Payload: ResolverTypeWrapper<Delete_Indian_State_Union_Territory_Payload>;
  Delete_Indian_State_Union_Territory_Region_Payload: ResolverTypeWrapper<Delete_Indian_State_Union_Territory_Region_Payload>;
  Delete_Indian_Union_Council_Of_Ministers_Payload: ResolverTypeWrapper<Delete_Indian_Union_Council_Of_Ministers_Payload>;
  Delete_Indian_Union_Government_Cabinet_Minister_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Cabinet_Minister_Payload>;
  Delete_Indian_Union_Government_Cabinet_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Cabinet_Payload>;
  Delete_Indian_Union_Government_Department_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Department_Payload>;
  Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload>;
  Delete_Indian_Union_Government_Minister_Of_State_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Minister_Of_State_Payload>;
  Delete_Indian_Union_Government_Ministry_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Ministry_Payload>;
  Delete_Indian_Union_Government_Payload: ResolverTypeWrapper<Delete_Indian_Union_Government_Payload>;
  Delete_Indian_Vidhansabha_Constituency_Payload: ResolverTypeWrapper<Delete_Indian_Vidhansabha_Constituency_Payload>;
  Delete_Indian_Vidhansabha_Constituency_Region_Payload: ResolverTypeWrapper<Delete_Indian_Vidhansabha_Constituency_Region_Payload>;
  Delete_Language_Payload: ResolverTypeWrapper<Delete_Language_Payload>;
  Delete_Language_Script_Payload: ResolverTypeWrapper<Delete_Language_Script_Payload>;
  Delete_Name_Payload: ResolverTypeWrapper<Delete_Name_Payload>;
  Delete_Node_Update_Payload: ResolverTypeWrapper<Delete_Node_Update_Payload>;
  Delete_Person_Payload: ResolverTypeWrapper<Delete_Person_Payload>;
  Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload: ResolverTypeWrapper<Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload>;
  Delete_Public_Policy_Domain_Payload: ResolverTypeWrapper<Delete_Public_Policy_Domain_Payload>;
  Delete_Script_Payload: ResolverTypeWrapper<Delete_Script_Payload>;
  DgraphDefault: DgraphDefault;
  DgraphIndex: DgraphIndex;
  Float: ResolverTypeWrapper<Scalars["Float"]["output"]>;
  FloatFilter: FloatFilter;
  FloatRange: FloatRange;
  GenerateMutationParams: GenerateMutationParams;
  GenerateQueryParams: GenerateQueryParams;
  HTTPMethod: HttpMethod;
  ID: ResolverTypeWrapper<Scalars["ID"]["output"]>;
  Int: ResolverTypeWrapper<Scalars["Int"]["output"]>;
  Int64: ResolverTypeWrapper<Scalars["Int64"]["output"]>;
  Int64Filter: Int64Filter;
  Int64Range: Int64Range;
  IntFilter: IntFilter;
  IntRange: IntRange;
  IntersectsFilter: IntersectsFilter;
  Mode: Mode;
  MultiPolygon: ResolverTypeWrapper<MultiPolygon>;
  MultiPolygonRef: MultiPolygonRef;
  Mutation: ResolverTypeWrapper<{}>;
  NearFilter: NearFilter;
  Point: ResolverTypeWrapper<Point>;
  PointGeoFilter: PointGeoFilter;
  PointList: ResolverTypeWrapper<PointList>;
  PointListRef: PointListRef;
  PointRef: PointRef;
  Polygon: ResolverTypeWrapper<Polygon>;
  PolygonGeoFilter: PolygonGeoFilter;
  PolygonRef: PolygonRef;
  Query: ResolverTypeWrapper<{}>;
  Session: ResolverTypeWrapper<Session>;
  SessionAggregateResult: ResolverTypeWrapper<SessionAggregateResult>;
  SessionFilter: SessionFilter;
  SessionHasFilter: SessionHasFilter;
  SessionOrder: SessionOrder;
  SessionOrderable: SessionOrderable;
  SessionPatch: SessionPatch;
  SessionRef: SessionRef;
  String: ResolverTypeWrapper<Scalars["String"]["output"]>;
  StringExactFilter: StringExactFilter;
  StringExactFilter_StringFullTextFilter_StringTermFilter: StringExactFilter_StringFullTextFilter_StringTermFilter;
  StringFullTextFilter: StringFullTextFilter;
  StringFullTextFilter_StringHashFilter_StringTermFilter: StringFullTextFilter_StringHashFilter_StringTermFilter;
  StringHashFilter: StringHashFilter;
  StringRange: StringRange;
  StringRegExpFilter: StringRegExpFilter;
  StringTermFilter: StringTermFilter;
  UpdateAccountInput: UpdateAccountInput;
  UpdateAccountPayload: ResolverTypeWrapper<UpdateAccountPayload>;
  UpdateSessionInput: UpdateSessionInput;
  UpdateSessionPayload: ResolverTypeWrapper<UpdateSessionPayload>;
  UpdateUserInput: UpdateUserInput;
  UpdateUserPayload: ResolverTypeWrapper<UpdateUserPayload>;
  UpdateVerificationTokenInput: UpdateVerificationTokenInput;
  UpdateVerificationTokenPayload: ResolverTypeWrapper<UpdateVerificationTokenPayload>;
  Update_Country_Event_Input: Update_Country_Event_Input;
  Update_Country_Event_Payload: ResolverTypeWrapper<Update_Country_Event_Payload>;
  Update_Country_Government_Input: Update_Country_Government_Input;
  Update_Country_Government_Payload: ResolverTypeWrapper<Update_Country_Government_Payload>;
  Update_Country_Input: Update_Country_Input;
  Update_Country_Payload: ResolverTypeWrapper<Update_Country_Payload>;
  Update_Country_Region_Input: Update_Country_Region_Input;
  Update_Country_Region_Payload: ResolverTypeWrapper<Update_Country_Region_Payload>;
  Update_Date_Time_Input: Update_Date_Time_Input;
  Update_Date_Time_Payload: ResolverTypeWrapper<Update_Date_Time_Payload>;
  Update_Geo_Input: Update_Geo_Input;
  Update_Geo_Payload: ResolverTypeWrapper<Update_Geo_Payload>;
  Update_Government_System_Type_Input: Update_Government_System_Type_Input;
  Update_Government_System_Type_Payload: ResolverTypeWrapper<Update_Government_System_Type_Payload>;
  Update_Government_System_Types_Authority_Concentration_Input: Update_Government_System_Types_Authority_Concentration_Input;
  Update_Government_System_Types_Authority_Concentration_Payload: ResolverTypeWrapper<Update_Government_System_Types_Authority_Concentration_Payload>;
  Update_Government_System_Types_Authority_Distribution_Input: Update_Government_System_Types_Authority_Distribution_Input;
  Update_Government_System_Types_Authority_Distribution_Payload: ResolverTypeWrapper<Update_Government_System_Types_Authority_Distribution_Payload>;
  Update_Government_System_Types_Authority_Source_Input: Update_Government_System_Types_Authority_Source_Input;
  Update_Government_System_Types_Authority_Source_Payload: ResolverTypeWrapper<Update_Government_System_Types_Authority_Source_Payload>;
  Update_Government_System_Types_Authority_Status_Input: Update_Government_System_Types_Authority_Status_Input;
  Update_Government_System_Types_Authority_Status_Payload: ResolverTypeWrapper<Update_Government_System_Types_Authority_Status_Payload>;
  Update_Government_System_Types_Autocratic_Input: Update_Government_System_Types_Autocratic_Input;
  Update_Government_System_Types_Autocratic_Payload: ResolverTypeWrapper<Update_Government_System_Types_Autocratic_Payload>;
  Update_Government_System_Types_Democracy_Input: Update_Government_System_Types_Democracy_Input;
  Update_Government_System_Types_Democracy_Payload: ResolverTypeWrapper<Update_Government_System_Types_Democracy_Payload>;
  Update_Government_System_Types_Economic_System_Input: Update_Government_System_Types_Economic_System_Input;
  Update_Government_System_Types_Economic_System_Payload: ResolverTypeWrapper<Update_Government_System_Types_Economic_System_Payload>;
  Update_Government_System_Types_Head_Of_State_Or_GovernmentInput: Update_Government_System_Types_Head_Of_State_Or_GovernmentInput;
  Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload: ResolverTypeWrapper<Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload>;
  Update_Government_System_Types_Monarchy_Input: Update_Government_System_Types_Monarchy_Input;
  Update_Government_System_Types_Monarchy_Payload: ResolverTypeWrapper<Update_Government_System_Types_Monarchy_Payload>;
  Update_Government_System_Types_Oligarchy_Input: Update_Government_System_Types_Oligarchy_Input;
  Update_Government_System_Types_Oligarchy_Payload: ResolverTypeWrapper<Update_Government_System_Types_Oligarchy_Payload>;
  Update_Government_System_Types_Partisan_Systems_Input: Update_Government_System_Types_Partisan_Systems_Input;
  Update_Government_System_Types_Partisan_Systems_Payload: ResolverTypeWrapper<Update_Government_System_Types_Partisan_Systems_Payload>;
  Update_Government_System_Types_Religion_Input: Update_Government_System_Types_Religion_Input;
  Update_Government_System_Types_Religion_Payload: ResolverTypeWrapper<Update_Government_System_Types_Religion_Payload>;
  Update_Indian_Administrative_DivisionsInput: Update_Indian_Administrative_DivisionsInput;
  Update_Indian_Administrative_DivisionsPayload: ResolverTypeWrapper<Update_Indian_Administrative_DivisionsPayload>;
  Update_Indian_District_Input: Update_Indian_District_Input;
  Update_Indian_District_Payload: ResolverTypeWrapper<Update_Indian_District_Payload>;
  Update_Indian_District_Region_Input: Update_Indian_District_Region_Input;
  Update_Indian_District_Region_Payload: ResolverTypeWrapper<Update_Indian_District_Region_Payload>;
  Update_Indian_Government_Official_Role_Input: Update_Indian_Government_Official_Role_Input;
  Update_Indian_Government_Official_Role_Payload: ResolverTypeWrapper<Update_Indian_Government_Official_Role_Payload>;
  Update_Indian_Government_System_Input: Update_Indian_Government_System_Input;
  Update_Indian_Government_System_Payload: ResolverTypeWrapper<Update_Indian_Government_System_Payload>;
  Update_Indian_Legal_Document_Input: Update_Indian_Legal_Document_Input;
  Update_Indian_Legal_Document_Payload: ResolverTypeWrapper<Update_Indian_Legal_Document_Payload>;
  Update_Indian_Legislative_DivisionsInput: Update_Indian_Legislative_DivisionsInput;
  Update_Indian_Legislative_DivisionsPayload: ResolverTypeWrapper<Update_Indian_Legislative_DivisionsPayload>;
  Update_Indian_Loksabha_Constituency_Election_Candidate_Input: Update_Indian_Loksabha_Constituency_Election_Candidate_Input;
  Update_Indian_Loksabha_Constituency_Election_Candidate_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Constituency_Election_Candidate_Payload>;
  Update_Indian_Loksabha_Constituency_Election_Input: Update_Indian_Loksabha_Constituency_Election_Input;
  Update_Indian_Loksabha_Constituency_Election_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Constituency_Election_Payload>;
  Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input: Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input;
  Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload>;
  Update_Indian_Loksabha_Constituency_Election_Result_Input: Update_Indian_Loksabha_Constituency_Election_Result_Input;
  Update_Indian_Loksabha_Constituency_Election_Result_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Constituency_Election_Result_Payload>;
  Update_Indian_Loksabha_Constituency_Input: Update_Indian_Loksabha_Constituency_Input;
  Update_Indian_Loksabha_Constituency_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Constituency_Payload>;
  Update_Indian_Loksabha_Constituency_Region_Input: Update_Indian_Loksabha_Constituency_Region_Input;
  Update_Indian_Loksabha_Constituency_Region_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Constituency_Region_Payload>;
  Update_Indian_Loksabha_Election_Input: Update_Indian_Loksabha_Election_Input;
  Update_Indian_Loksabha_Election_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Election_Payload>;
  Update_Indian_Loksabha_Election_Phase_Input: Update_Indian_Loksabha_Election_Phase_Input;
  Update_Indian_Loksabha_Election_Phase_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Election_Phase_Payload>;
  Update_Indian_Loksabha_Election_Result_Input: Update_Indian_Loksabha_Election_Result_Input;
  Update_Indian_Loksabha_Election_Result_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Election_Result_Payload>;
  Update_Indian_Loksabha_Input: Update_Indian_Loksabha_Input;
  Update_Indian_Loksabha_Member_Input: Update_Indian_Loksabha_Member_Input;
  Update_Indian_Loksabha_Member_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Member_Payload>;
  Update_Indian_Loksabha_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Payload>;
  Update_Indian_Loksabha_Session_Input: Update_Indian_Loksabha_Session_Input;
  Update_Indian_Loksabha_Session_Payload: ResolverTypeWrapper<Update_Indian_Loksabha_Session_Payload>;
  Update_Indian_Political_Party_Input: Update_Indian_Political_Party_Input;
  Update_Indian_Political_Party_Loksabha_Election_Input: Update_Indian_Political_Party_Loksabha_Election_Input;
  Update_Indian_Political_Party_Loksabha_Election_Payload: ResolverTypeWrapper<Update_Indian_Political_Party_Loksabha_Election_Payload>;
  Update_Indian_Political_Party_Member_Input: Update_Indian_Political_Party_Member_Input;
  Update_Indian_Political_Party_Member_Payload: ResolverTypeWrapper<Update_Indian_Political_Party_Member_Payload>;
  Update_Indian_Political_Party_Payload: ResolverTypeWrapper<Update_Indian_Political_Party_Payload>;
  Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input: Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input;
  Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload: ResolverTypeWrapper<Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload>;
  Update_Indian_Politician_Input: Update_Indian_Politician_Input;
  Update_Indian_Politician_Payload: ResolverTypeWrapper<Update_Indian_Politician_Payload>;
  Update_Indian_Prime_Minister_Input: Update_Indian_Prime_Minister_Input;
  Update_Indian_Prime_Minister_Payload: ResolverTypeWrapper<Update_Indian_Prime_Minister_Payload>;
  Update_Indian_State_Union_Territory_Input: Update_Indian_State_Union_Territory_Input;
  Update_Indian_State_Union_Territory_Payload: ResolverTypeWrapper<Update_Indian_State_Union_Territory_Payload>;
  Update_Indian_State_Union_Territory_Region_Input: Update_Indian_State_Union_Territory_Region_Input;
  Update_Indian_State_Union_Territory_Region_Payload: ResolverTypeWrapper<Update_Indian_State_Union_Territory_Region_Payload>;
  Update_Indian_Union_Council_Of_Ministers_Input: Update_Indian_Union_Council_Of_Ministers_Input;
  Update_Indian_Union_Council_Of_Ministers_Payload: ResolverTypeWrapper<Update_Indian_Union_Council_Of_Ministers_Payload>;
  Update_Indian_Union_Government_Cabinet_Input: Update_Indian_Union_Government_Cabinet_Input;
  Update_Indian_Union_Government_Cabinet_Minister_Input: Update_Indian_Union_Government_Cabinet_Minister_Input;
  Update_Indian_Union_Government_Cabinet_Minister_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Cabinet_Minister_Payload>;
  Update_Indian_Union_Government_Cabinet_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Cabinet_Payload>;
  Update_Indian_Union_Government_Department_Input: Update_Indian_Union_Government_Department_Input;
  Update_Indian_Union_Government_Department_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Department_Payload>;
  Update_Indian_Union_Government_Input: Update_Indian_Union_Government_Input;
  Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input: Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input;
  Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload>;
  Update_Indian_Union_Government_Minister_Of_State_Input: Update_Indian_Union_Government_Minister_Of_State_Input;
  Update_Indian_Union_Government_Minister_Of_State_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Minister_Of_State_Payload>;
  Update_Indian_Union_Government_Ministry_Input: Update_Indian_Union_Government_Ministry_Input;
  Update_Indian_Union_Government_Ministry_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Ministry_Payload>;
  Update_Indian_Union_Government_Payload: ResolverTypeWrapper<Update_Indian_Union_Government_Payload>;
  Update_Indian_Vidhansabha_Constituency_Input: Update_Indian_Vidhansabha_Constituency_Input;
  Update_Indian_Vidhansabha_Constituency_Payload: ResolverTypeWrapper<Update_Indian_Vidhansabha_Constituency_Payload>;
  Update_Indian_Vidhansabha_Constituency_Region_Input: Update_Indian_Vidhansabha_Constituency_Region_Input;
  Update_Indian_Vidhansabha_Constituency_Region_Payload: ResolverTypeWrapper<Update_Indian_Vidhansabha_Constituency_Region_Payload>;
  Update_Language_Input: Update_Language_Input;
  Update_Language_Payload: ResolverTypeWrapper<Update_Language_Payload>;
  Update_Language_Script_Input: Update_Language_Script_Input;
  Update_Language_Script_Payload: ResolverTypeWrapper<Update_Language_Script_Payload>;
  Update_Name_Input: Update_Name_Input;
  Update_Name_Payload: ResolverTypeWrapper<Update_Name_Payload>;
  Update_Node_Update_Input: Update_Node_Update_Input;
  Update_Node_Update_Payload: ResolverTypeWrapper<Update_Node_Update_Payload>;
  Update_Person_Input: Update_Person_Input;
  Update_Person_Payload: ResolverTypeWrapper<Update_Person_Payload>;
  Update_Public_Policy_Domain_Government_Ministries_Departments_Input: Update_Public_Policy_Domain_Government_Ministries_Departments_Input;
  Update_Public_Policy_Domain_Government_Ministries_Departments_Payload: ResolverTypeWrapper<Update_Public_Policy_Domain_Government_Ministries_Departments_Payload>;
  Update_Public_Policy_Domain_Input: Update_Public_Policy_Domain_Input;
  Update_Public_Policy_Domain_Payload: ResolverTypeWrapper<Update_Public_Policy_Domain_Payload>;
  Update_Script_Input: Update_Script_Input;
  Update_Script_Payload: ResolverTypeWrapper<Update_Script_Payload>;
  User: ResolverTypeWrapper<User>;
  UserAggregateResult: ResolverTypeWrapper<UserAggregateResult>;
  UserFilter: UserFilter;
  UserHasFilter: UserHasFilter;
  UserOrder: UserOrder;
  UserOrderable: UserOrderable;
  UserPatch: UserPatch;
  UserRef: UserRef;
  VerificationToken: ResolverTypeWrapper<VerificationToken>;
  VerificationTokenAggregateResult: ResolverTypeWrapper<VerificationTokenAggregateResult>;
  VerificationTokenFilter: VerificationTokenFilter;
  VerificationTokenHasFilter: VerificationTokenHasFilter;
  VerificationTokenOrder: VerificationTokenOrder;
  VerificationTokenOrderable: VerificationTokenOrderable;
  VerificationTokenPatch: VerificationTokenPatch;
  VerificationTokenRef: VerificationTokenRef;
  WithinFilter: WithinFilter;
  _Country_: ResolverTypeWrapper<_Country_>;
  _Country_AggregateResult: ResolverTypeWrapper<_Country_AggregateResult>;
  _Country_Event_: ResolverTypeWrapper<_Country_Event_>;
  _Country_Event_AggregateResult: ResolverTypeWrapper<_Country_Event_AggregateResult>;
  _Country_Event_Filter: _Country_Event_Filter;
  _Country_Event_HasFilter: _Country_Event_HasFilter;
  _Country_Event_Order: _Country_Event_Order;
  _Country_Event_Orderable: _Country_Event_Orderable;
  _Country_Event_Patch: _Country_Event_Patch;
  _Country_Event_Ref: _Country_Event_Ref;
  _Country_Filter: _Country_Filter;
  _Country_Government_: ResolverTypeWrapper<_Country_Government_>;
  _Country_Government_AggregateResult: ResolverTypeWrapper<_Country_Government_AggregateResult>;
  _Country_Government_Filter: _Country_Government_Filter;
  _Country_Government_HasFilter: _Country_Government_HasFilter;
  _Country_Government_Order: _Country_Government_Order;
  _Country_Government_Orderable: _Country_Government_Orderable;
  _Country_Government_Patch: _Country_Government_Patch;
  _Country_Government_Ref: _Country_Government_Ref;
  _Country_HasFilter: _Country_HasFilter;
  _Country_Order: _Country_Order;
  _Country_Orderable: _Country_Orderable;
  _Country_Patch: _Country_Patch;
  _Country_Ref: _Country_Ref;
  _Country_Region_: ResolverTypeWrapper<_Country_Region_>;
  _Country_Region_AggregateResult: ResolverTypeWrapper<_Country_Region_AggregateResult>;
  _Country_Region_Filter: _Country_Region_Filter;
  _Country_Region_HasFilter: _Country_Region_HasFilter;
  _Country_Region_Order: _Country_Region_Order;
  _Country_Region_Orderable: _Country_Region_Orderable;
  _Country_Region_Patch: _Country_Region_Patch;
  _Country_Region_Ref: _Country_Region_Ref;
  _Date_Time_: ResolverTypeWrapper<_Date_Time_>;
  _Date_Time_AggregateResult: ResolverTypeWrapper<_Date_Time_AggregateResult>;
  _Date_Time_Filter: _Date_Time_Filter;
  _Date_Time_HasFilter: _Date_Time_HasFilter;
  _Date_Time_Order: _Date_Time_Order;
  _Date_Time_Orderable: _Date_Time_Orderable;
  _Date_Time_Patch: _Date_Time_Patch;
  _Date_Time_Ref: _Date_Time_Ref;
  _Geo_: ResolverTypeWrapper<_Geo_>;
  _Geo_AggregateResult: ResolverTypeWrapper<_Geo_AggregateResult>;
  _Geo_Filter: _Geo_Filter;
  _Geo_HasFilter: _Geo_HasFilter;
  _Geo_Order: _Geo_Order;
  _Geo_Orderable: _Geo_Orderable;
  _Geo_Patch: _Geo_Patch;
  _Geo_Precision_: _Geo_Precision_;
  _Geo_Ref: _Geo_Ref;
  _Government_Branches_: _Government_Branches_;
  _Government_System_Type_: ResolverTypeWrapper<_Government_System_Type_>;
  _Government_System_Type_AggregateResult: ResolverTypeWrapper<_Government_System_Type_AggregateResult>;
  _Government_System_Type_Filter: _Government_System_Type_Filter;
  _Government_System_Type_HasFilter: _Government_System_Type_HasFilter;
  _Government_System_Type_Order: _Government_System_Type_Order;
  _Government_System_Type_Orderable: _Government_System_Type_Orderable;
  _Government_System_Type_Patch: _Government_System_Type_Patch;
  _Government_System_Type_Ref: _Government_System_Type_Ref;
  _Government_System_Types_Authority_Concentration_: ResolverTypeWrapper<_Government_System_Types_Authority_Concentration_>;
  _Government_System_Types_Authority_Concentration_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Authority_Concentration_AggregateResult>;
  _Government_System_Types_Authority_Concentration_Filter: _Government_System_Types_Authority_Concentration_Filter;
  _Government_System_Types_Authority_Concentration_HasFilter: _Government_System_Types_Authority_Concentration_HasFilter;
  _Government_System_Types_Authority_Concentration_Order: _Government_System_Types_Authority_Concentration_Order;
  _Government_System_Types_Authority_Concentration_Orderable: _Government_System_Types_Authority_Concentration_Orderable;
  _Government_System_Types_Authority_Concentration_Patch: _Government_System_Types_Authority_Concentration_Patch;
  _Government_System_Types_Authority_Concentration_Ref: _Government_System_Types_Authority_Concentration_Ref;
  _Government_System_Types_Authority_Distribution_: ResolverTypeWrapper<_Government_System_Types_Authority_Distribution_>;
  _Government_System_Types_Authority_Distribution_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Authority_Distribution_AggregateResult>;
  _Government_System_Types_Authority_Distribution_Filter: _Government_System_Types_Authority_Distribution_Filter;
  _Government_System_Types_Authority_Distribution_HasFilter: _Government_System_Types_Authority_Distribution_HasFilter;
  _Government_System_Types_Authority_Distribution_Order: _Government_System_Types_Authority_Distribution_Order;
  _Government_System_Types_Authority_Distribution_Orderable: _Government_System_Types_Authority_Distribution_Orderable;
  _Government_System_Types_Authority_Distribution_Patch: _Government_System_Types_Authority_Distribution_Patch;
  _Government_System_Types_Authority_Distribution_Ref: _Government_System_Types_Authority_Distribution_Ref;
  _Government_System_Types_Authority_Source_: ResolverTypeWrapper<_Government_System_Types_Authority_Source_>;
  _Government_System_Types_Authority_Source_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Authority_Source_AggregateResult>;
  _Government_System_Types_Authority_Source_Filter: _Government_System_Types_Authority_Source_Filter;
  _Government_System_Types_Authority_Source_HasFilter: _Government_System_Types_Authority_Source_HasFilter;
  _Government_System_Types_Authority_Source_Order: _Government_System_Types_Authority_Source_Order;
  _Government_System_Types_Authority_Source_Orderable: _Government_System_Types_Authority_Source_Orderable;
  _Government_System_Types_Authority_Source_Patch: _Government_System_Types_Authority_Source_Patch;
  _Government_System_Types_Authority_Source_Ref: _Government_System_Types_Authority_Source_Ref;
  _Government_System_Types_Authority_Status_: ResolverTypeWrapper<_Government_System_Types_Authority_Status_>;
  _Government_System_Types_Authority_Status_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Authority_Status_AggregateResult>;
  _Government_System_Types_Authority_Status_Filter: _Government_System_Types_Authority_Status_Filter;
  _Government_System_Types_Authority_Status_HasFilter: _Government_System_Types_Authority_Status_HasFilter;
  _Government_System_Types_Authority_Status_Order: _Government_System_Types_Authority_Status_Order;
  _Government_System_Types_Authority_Status_Orderable: _Government_System_Types_Authority_Status_Orderable;
  _Government_System_Types_Authority_Status_Patch: _Government_System_Types_Authority_Status_Patch;
  _Government_System_Types_Authority_Status_Ref: _Government_System_Types_Authority_Status_Ref;
  _Government_System_Types_Autocratic_: ResolverTypeWrapper<_Government_System_Types_Autocratic_>;
  _Government_System_Types_Autocratic_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Autocratic_AggregateResult>;
  _Government_System_Types_Autocratic_Filter: _Government_System_Types_Autocratic_Filter;
  _Government_System_Types_Autocratic_HasFilter: _Government_System_Types_Autocratic_HasFilter;
  _Government_System_Types_Autocratic_Order: _Government_System_Types_Autocratic_Order;
  _Government_System_Types_Autocratic_Orderable: _Government_System_Types_Autocratic_Orderable;
  _Government_System_Types_Autocratic_Patch: _Government_System_Types_Autocratic_Patch;
  _Government_System_Types_Autocratic_Ref: _Government_System_Types_Autocratic_Ref;
  _Government_System_Types_Democracy_: ResolverTypeWrapper<_Government_System_Types_Democracy_>;
  _Government_System_Types_Democracy_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Democracy_AggregateResult>;
  _Government_System_Types_Democracy_Filter: _Government_System_Types_Democracy_Filter;
  _Government_System_Types_Democracy_HasFilter: _Government_System_Types_Democracy_HasFilter;
  _Government_System_Types_Democracy_Order: _Government_System_Types_Democracy_Order;
  _Government_System_Types_Democracy_Orderable: _Government_System_Types_Democracy_Orderable;
  _Government_System_Types_Democracy_Patch: _Government_System_Types_Democracy_Patch;
  _Government_System_Types_Democracy_Ref: _Government_System_Types_Democracy_Ref;
  _Government_System_Types_Economic_System_: ResolverTypeWrapper<_Government_System_Types_Economic_System_>;
  _Government_System_Types_Economic_System_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Economic_System_AggregateResult>;
  _Government_System_Types_Economic_System_Filter: _Government_System_Types_Economic_System_Filter;
  _Government_System_Types_Economic_System_HasFilter: _Government_System_Types_Economic_System_HasFilter;
  _Government_System_Types_Economic_System_Order: _Government_System_Types_Economic_System_Order;
  _Government_System_Types_Economic_System_Orderable: _Government_System_Types_Economic_System_Orderable;
  _Government_System_Types_Economic_System_Patch: _Government_System_Types_Economic_System_Patch;
  _Government_System_Types_Economic_System_Ref: _Government_System_Types_Economic_System_Ref;
  _Government_System_Types_Head_Of_State_Or_Government: ResolverTypeWrapper<_Government_System_Types_Head_Of_State_Or_Government>;
  _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult: ResolverTypeWrapper<_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult>;
  _Government_System_Types_Head_Of_State_Or_GovernmentFilter: _Government_System_Types_Head_Of_State_Or_GovernmentFilter;
  _Government_System_Types_Head_Of_State_Or_GovernmentHasFilter: _Government_System_Types_Head_Of_State_Or_GovernmentHasFilter;
  _Government_System_Types_Head_Of_State_Or_GovernmentOrder: _Government_System_Types_Head_Of_State_Or_GovernmentOrder;
  _Government_System_Types_Head_Of_State_Or_GovernmentOrderable: _Government_System_Types_Head_Of_State_Or_GovernmentOrderable;
  _Government_System_Types_Head_Of_State_Or_GovernmentPatch: _Government_System_Types_Head_Of_State_Or_GovernmentPatch;
  _Government_System_Types_Head_Of_State_Or_GovernmentRef: _Government_System_Types_Head_Of_State_Or_GovernmentRef;
  _Government_System_Types_Monarchy_: ResolverTypeWrapper<_Government_System_Types_Monarchy_>;
  _Government_System_Types_Monarchy_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Monarchy_AggregateResult>;
  _Government_System_Types_Monarchy_Filter: _Government_System_Types_Monarchy_Filter;
  _Government_System_Types_Monarchy_HasFilter: _Government_System_Types_Monarchy_HasFilter;
  _Government_System_Types_Monarchy_Order: _Government_System_Types_Monarchy_Order;
  _Government_System_Types_Monarchy_Orderable: _Government_System_Types_Monarchy_Orderable;
  _Government_System_Types_Monarchy_Patch: _Government_System_Types_Monarchy_Patch;
  _Government_System_Types_Monarchy_Ref: _Government_System_Types_Monarchy_Ref;
  _Government_System_Types_Oligarchy_: ResolverTypeWrapper<_Government_System_Types_Oligarchy_>;
  _Government_System_Types_Oligarchy_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Oligarchy_AggregateResult>;
  _Government_System_Types_Oligarchy_Filter: _Government_System_Types_Oligarchy_Filter;
  _Government_System_Types_Oligarchy_HasFilter: _Government_System_Types_Oligarchy_HasFilter;
  _Government_System_Types_Oligarchy_Order: _Government_System_Types_Oligarchy_Order;
  _Government_System_Types_Oligarchy_Orderable: _Government_System_Types_Oligarchy_Orderable;
  _Government_System_Types_Oligarchy_Patch: _Government_System_Types_Oligarchy_Patch;
  _Government_System_Types_Oligarchy_Ref: _Government_System_Types_Oligarchy_Ref;
  _Government_System_Types_Partisan_Systems_: ResolverTypeWrapper<_Government_System_Types_Partisan_Systems_>;
  _Government_System_Types_Partisan_Systems_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Partisan_Systems_AggregateResult>;
  _Government_System_Types_Partisan_Systems_Filter: _Government_System_Types_Partisan_Systems_Filter;
  _Government_System_Types_Partisan_Systems_HasFilter: _Government_System_Types_Partisan_Systems_HasFilter;
  _Government_System_Types_Partisan_Systems_Order: _Government_System_Types_Partisan_Systems_Order;
  _Government_System_Types_Partisan_Systems_Orderable: _Government_System_Types_Partisan_Systems_Orderable;
  _Government_System_Types_Partisan_Systems_Patch: _Government_System_Types_Partisan_Systems_Patch;
  _Government_System_Types_Partisan_Systems_Ref: _Government_System_Types_Partisan_Systems_Ref;
  _Government_System_Types_Religion_: ResolverTypeWrapper<_Government_System_Types_Religion_>;
  _Government_System_Types_Religion_AggregateResult: ResolverTypeWrapper<_Government_System_Types_Religion_AggregateResult>;
  _Government_System_Types_Religion_Filter: _Government_System_Types_Religion_Filter;
  _Government_System_Types_Religion_HasFilter: _Government_System_Types_Religion_HasFilter;
  _Government_System_Types_Religion_Order: _Government_System_Types_Religion_Order;
  _Government_System_Types_Religion_Orderable: _Government_System_Types_Religion_Orderable;
  _Government_System_Types_Religion_Patch: _Government_System_Types_Religion_Patch;
  _Government_System_Types_Religion_Ref: _Government_System_Types_Religion_Ref;
  _Indian_Administrative_Divisions: ResolverTypeWrapper<_Indian_Administrative_Divisions>;
  _Indian_Administrative_DivisionsAggregateResult: ResolverTypeWrapper<_Indian_Administrative_DivisionsAggregateResult>;
  _Indian_Administrative_DivisionsFilter: _Indian_Administrative_DivisionsFilter;
  _Indian_Administrative_DivisionsHasFilter: _Indian_Administrative_DivisionsHasFilter;
  _Indian_Administrative_DivisionsPatch: _Indian_Administrative_DivisionsPatch;
  _Indian_Administrative_DivisionsRef: _Indian_Administrative_DivisionsRef;
  _Indian_District_: ResolverTypeWrapper<_Indian_District_>;
  _Indian_District_AggregateResult: ResolverTypeWrapper<_Indian_District_AggregateResult>;
  _Indian_District_Filter: _Indian_District_Filter;
  _Indian_District_HasFilter: _Indian_District_HasFilter;
  _Indian_District_Order: _Indian_District_Order;
  _Indian_District_Orderable: _Indian_District_Orderable;
  _Indian_District_Patch: _Indian_District_Patch;
  _Indian_District_Ref: _Indian_District_Ref;
  _Indian_District_Region_: ResolverTypeWrapper<_Indian_District_Region_>;
  _Indian_District_Region_AggregateResult: ResolverTypeWrapper<_Indian_District_Region_AggregateResult>;
  _Indian_District_Region_Filter: _Indian_District_Region_Filter;
  _Indian_District_Region_HasFilter: _Indian_District_Region_HasFilter;
  _Indian_District_Region_Order: _Indian_District_Region_Order;
  _Indian_District_Region_Orderable: _Indian_District_Region_Orderable;
  _Indian_District_Region_Patch: _Indian_District_Region_Patch;
  _Indian_District_Region_Ref: _Indian_District_Region_Ref;
  _Indian_Government_Official_Role_: ResolverTypeWrapper<_Indian_Government_Official_Role_>;
  _Indian_Government_Official_Role_AggregateResult: ResolverTypeWrapper<_Indian_Government_Official_Role_AggregateResult>;
  _Indian_Government_Official_Role_Filter: _Indian_Government_Official_Role_Filter;
  _Indian_Government_Official_Role_HasFilter: _Indian_Government_Official_Role_HasFilter;
  _Indian_Government_Official_Role_Order: _Indian_Government_Official_Role_Order;
  _Indian_Government_Official_Role_Orderable: _Indian_Government_Official_Role_Orderable;
  _Indian_Government_Official_Role_Patch: _Indian_Government_Official_Role_Patch;
  _Indian_Government_Official_Role_Ref: _Indian_Government_Official_Role_Ref;
  _Indian_Government_System_: ResolverTypeWrapper<_Indian_Government_System_>;
  _Indian_Government_System_AggregateResult: ResolverTypeWrapper<_Indian_Government_System_AggregateResult>;
  _Indian_Government_System_Filter: _Indian_Government_System_Filter;
  _Indian_Government_System_HasFilter: _Indian_Government_System_HasFilter;
  _Indian_Government_System_Order: _Indian_Government_System_Order;
  _Indian_Government_System_Orderable: _Indian_Government_System_Orderable;
  _Indian_Government_System_Patch: _Indian_Government_System_Patch;
  _Indian_Government_System_Ref: _Indian_Government_System_Ref;
  _Indian_Legal_Document_: ResolverTypeWrapper<_Indian_Legal_Document_>;
  _Indian_Legal_Document_AggregateResult: ResolverTypeWrapper<_Indian_Legal_Document_AggregateResult>;
  _Indian_Legal_Document_Category_: _Indian_Legal_Document_Category_;
  _Indian_Legal_Document_Category__exact: _Indian_Legal_Document_Category__Exact;
  _Indian_Legal_Document_Filter: _Indian_Legal_Document_Filter;
  _Indian_Legal_Document_HasFilter: _Indian_Legal_Document_HasFilter;
  _Indian_Legal_Document_Order: _Indian_Legal_Document_Order;
  _Indian_Legal_Document_Orderable: _Indian_Legal_Document_Orderable;
  _Indian_Legal_Document_Patch: _Indian_Legal_Document_Patch;
  _Indian_Legal_Document_Ref: _Indian_Legal_Document_Ref;
  _Indian_Legislative_Divisions: ResolverTypeWrapper<_Indian_Legislative_Divisions>;
  _Indian_Legislative_DivisionsAggregateResult: ResolverTypeWrapper<_Indian_Legislative_DivisionsAggregateResult>;
  _Indian_Legislative_DivisionsFilter: _Indian_Legislative_DivisionsFilter;
  _Indian_Legislative_DivisionsHasFilter: _Indian_Legislative_DivisionsHasFilter;
  _Indian_Legislative_DivisionsPatch: _Indian_Legislative_DivisionsPatch;
  _Indian_Legislative_DivisionsRef: _Indian_Legislative_DivisionsRef;
  _Indian_Loksabha_: ResolverTypeWrapper<_Indian_Loksabha_>;
  _Indian_Loksabha_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_AggregateResult>;
  _Indian_Loksabha_Constituency_: ResolverTypeWrapper<_Indian_Loksabha_Constituency_>;
  _Indian_Loksabha_Constituency_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Constituency_AggregateResult>;
  _Indian_Loksabha_Constituency_Election_: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_>;
  _Indian_Loksabha_Constituency_Election_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_AggregateResult>;
  _Indian_Loksabha_Constituency_Election_Candidate_: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_Candidate_>;
  _Indian_Loksabha_Constituency_Election_Candidate_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult>;
  _Indian_Loksabha_Constituency_Election_Candidate_Filter: _Indian_Loksabha_Constituency_Election_Candidate_Filter;
  _Indian_Loksabha_Constituency_Election_Candidate_HasFilter: _Indian_Loksabha_Constituency_Election_Candidate_HasFilter;
  _Indian_Loksabha_Constituency_Election_Candidate_Order: _Indian_Loksabha_Constituency_Election_Candidate_Order;
  _Indian_Loksabha_Constituency_Election_Candidate_Orderable: _Indian_Loksabha_Constituency_Election_Candidate_Orderable;
  _Indian_Loksabha_Constituency_Election_Candidate_Patch: _Indian_Loksabha_Constituency_Election_Candidate_Patch;
  _Indian_Loksabha_Constituency_Election_Candidate_Ref: _Indian_Loksabha_Constituency_Election_Candidate_Ref;
  _Indian_Loksabha_Constituency_Election_Filter: _Indian_Loksabha_Constituency_Election_Filter;
  _Indian_Loksabha_Constituency_Election_HasFilter: _Indian_Loksabha_Constituency_Election_HasFilter;
  _Indian_Loksabha_Constituency_Election_Order: _Indian_Loksabha_Constituency_Election_Order;
  _Indian_Loksabha_Constituency_Election_Orderable: _Indian_Loksabha_Constituency_Election_Orderable;
  _Indian_Loksabha_Constituency_Election_Patch: _Indian_Loksabha_Constituency_Election_Patch;
  _Indian_Loksabha_Constituency_Election_Ref: _Indian_Loksabha_Constituency_Election_Ref;
  _Indian_Loksabha_Constituency_Election_Result_: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_Result_>;
  _Indian_Loksabha_Constituency_Election_Result_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_Result_AggregateResult>;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_>;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult>;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_HasFilter: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_HasFilter;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Orderable: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Orderable;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref;
  _Indian_Loksabha_Constituency_Election_Result_Filter: _Indian_Loksabha_Constituency_Election_Result_Filter;
  _Indian_Loksabha_Constituency_Election_Result_HasFilter: _Indian_Loksabha_Constituency_Election_Result_HasFilter;
  _Indian_Loksabha_Constituency_Election_Result_Order: _Indian_Loksabha_Constituency_Election_Result_Order;
  _Indian_Loksabha_Constituency_Election_Result_Orderable: _Indian_Loksabha_Constituency_Election_Result_Orderable;
  _Indian_Loksabha_Constituency_Election_Result_Patch: _Indian_Loksabha_Constituency_Election_Result_Patch;
  _Indian_Loksabha_Constituency_Election_Result_Ref: _Indian_Loksabha_Constituency_Election_Result_Ref;
  _Indian_Loksabha_Constituency_Filter: _Indian_Loksabha_Constituency_Filter;
  _Indian_Loksabha_Constituency_HasFilter: _Indian_Loksabha_Constituency_HasFilter;
  _Indian_Loksabha_Constituency_Order: _Indian_Loksabha_Constituency_Order;
  _Indian_Loksabha_Constituency_Orderable: _Indian_Loksabha_Constituency_Orderable;
  _Indian_Loksabha_Constituency_Patch: _Indian_Loksabha_Constituency_Patch;
  _Indian_Loksabha_Constituency_Ref: _Indian_Loksabha_Constituency_Ref;
  _Indian_Loksabha_Constituency_Region_: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Region_>;
  _Indian_Loksabha_Constituency_Region_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Constituency_Region_AggregateResult>;
  _Indian_Loksabha_Constituency_Region_Filter: _Indian_Loksabha_Constituency_Region_Filter;
  _Indian_Loksabha_Constituency_Region_HasFilter: _Indian_Loksabha_Constituency_Region_HasFilter;
  _Indian_Loksabha_Constituency_Region_Order: _Indian_Loksabha_Constituency_Region_Order;
  _Indian_Loksabha_Constituency_Region_Orderable: _Indian_Loksabha_Constituency_Region_Orderable;
  _Indian_Loksabha_Constituency_Region_Patch: _Indian_Loksabha_Constituency_Region_Patch;
  _Indian_Loksabha_Constituency_Region_Ref: _Indian_Loksabha_Constituency_Region_Ref;
  _Indian_Loksabha_Election_: ResolverTypeWrapper<_Indian_Loksabha_Election_>;
  _Indian_Loksabha_Election_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Election_AggregateResult>;
  _Indian_Loksabha_Election_Filter: _Indian_Loksabha_Election_Filter;
  _Indian_Loksabha_Election_HasFilter: _Indian_Loksabha_Election_HasFilter;
  _Indian_Loksabha_Election_Order: _Indian_Loksabha_Election_Order;
  _Indian_Loksabha_Election_Orderable: _Indian_Loksabha_Election_Orderable;
  _Indian_Loksabha_Election_Patch: _Indian_Loksabha_Election_Patch;
  _Indian_Loksabha_Election_Phase_: ResolverTypeWrapper<_Indian_Loksabha_Election_Phase_>;
  _Indian_Loksabha_Election_Phase_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Election_Phase_AggregateResult>;
  _Indian_Loksabha_Election_Phase_Filter: _Indian_Loksabha_Election_Phase_Filter;
  _Indian_Loksabha_Election_Phase_HasFilter: _Indian_Loksabha_Election_Phase_HasFilter;
  _Indian_Loksabha_Election_Phase_Order: _Indian_Loksabha_Election_Phase_Order;
  _Indian_Loksabha_Election_Phase_Orderable: _Indian_Loksabha_Election_Phase_Orderable;
  _Indian_Loksabha_Election_Phase_Patch: _Indian_Loksabha_Election_Phase_Patch;
  _Indian_Loksabha_Election_Phase_Ref: _Indian_Loksabha_Election_Phase_Ref;
  _Indian_Loksabha_Election_Ref: _Indian_Loksabha_Election_Ref;
  _Indian_Loksabha_Election_Result_: ResolverTypeWrapper<_Indian_Loksabha_Election_Result_>;
  _Indian_Loksabha_Election_Result_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Election_Result_AggregateResult>;
  _Indian_Loksabha_Election_Result_Filter: _Indian_Loksabha_Election_Result_Filter;
  _Indian_Loksabha_Election_Result_HasFilter: _Indian_Loksabha_Election_Result_HasFilter;
  _Indian_Loksabha_Election_Result_Order: _Indian_Loksabha_Election_Result_Order;
  _Indian_Loksabha_Election_Result_Orderable: _Indian_Loksabha_Election_Result_Orderable;
  _Indian_Loksabha_Election_Result_Patch: _Indian_Loksabha_Election_Result_Patch;
  _Indian_Loksabha_Election_Result_Ref: _Indian_Loksabha_Election_Result_Ref;
  _Indian_Loksabha_Filter: _Indian_Loksabha_Filter;
  _Indian_Loksabha_HasFilter: _Indian_Loksabha_HasFilter;
  _Indian_Loksabha_Member_: ResolverTypeWrapper<_Indian_Loksabha_Member_>;
  _Indian_Loksabha_Member_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Member_AggregateResult>;
  _Indian_Loksabha_Member_Filter: _Indian_Loksabha_Member_Filter;
  _Indian_Loksabha_Member_HasFilter: _Indian_Loksabha_Member_HasFilter;
  _Indian_Loksabha_Member_Order: _Indian_Loksabha_Member_Order;
  _Indian_Loksabha_Member_Orderable: _Indian_Loksabha_Member_Orderable;
  _Indian_Loksabha_Member_Patch: _Indian_Loksabha_Member_Patch;
  _Indian_Loksabha_Member_Ref: _Indian_Loksabha_Member_Ref;
  _Indian_Loksabha_Order: _Indian_Loksabha_Order;
  _Indian_Loksabha_Orderable: _Indian_Loksabha_Orderable;
  _Indian_Loksabha_Patch: _Indian_Loksabha_Patch;
  _Indian_Loksabha_Ref: _Indian_Loksabha_Ref;
  _Indian_Loksabha_Session_: ResolverTypeWrapper<_Indian_Loksabha_Session_>;
  _Indian_Loksabha_Session_AggregateResult: ResolverTypeWrapper<_Indian_Loksabha_Session_AggregateResult>;
  _Indian_Loksabha_Session_Filter: _Indian_Loksabha_Session_Filter;
  _Indian_Loksabha_Session_HasFilter: _Indian_Loksabha_Session_HasFilter;
  _Indian_Loksabha_Session_Order: _Indian_Loksabha_Session_Order;
  _Indian_Loksabha_Session_Orderable: _Indian_Loksabha_Session_Orderable;
  _Indian_Loksabha_Session_Patch: _Indian_Loksabha_Session_Patch;
  _Indian_Loksabha_Session_Ref: _Indian_Loksabha_Session_Ref;
  _Indian_Political_Party_: ResolverTypeWrapper<_Indian_Political_Party_>;
  _Indian_Political_Party_AggregateResult: ResolverTypeWrapper<_Indian_Political_Party_AggregateResult>;
  _Indian_Political_Party_Filter: _Indian_Political_Party_Filter;
  _Indian_Political_Party_HasFilter: _Indian_Political_Party_HasFilter;
  _Indian_Political_Party_Loksabha_Election_: ResolverTypeWrapper<_Indian_Political_Party_Loksabha_Election_>;
  _Indian_Political_Party_Loksabha_Election_AggregateResult: ResolverTypeWrapper<_Indian_Political_Party_Loksabha_Election_AggregateResult>;
  _Indian_Political_Party_Loksabha_Election_Filter: _Indian_Political_Party_Loksabha_Election_Filter;
  _Indian_Political_Party_Loksabha_Election_HasFilter: _Indian_Political_Party_Loksabha_Election_HasFilter;
  _Indian_Political_Party_Loksabha_Election_Order: _Indian_Political_Party_Loksabha_Election_Order;
  _Indian_Political_Party_Loksabha_Election_Orderable: _Indian_Political_Party_Loksabha_Election_Orderable;
  _Indian_Political_Party_Loksabha_Election_Patch: _Indian_Political_Party_Loksabha_Election_Patch;
  _Indian_Political_Party_Loksabha_Election_Ref: _Indian_Political_Party_Loksabha_Election_Ref;
  _Indian_Political_Party_Member_: ResolverTypeWrapper<_Indian_Political_Party_Member_>;
  _Indian_Political_Party_Member_AggregateResult: ResolverTypeWrapper<_Indian_Political_Party_Member_AggregateResult>;
  _Indian_Political_Party_Member_Filter: _Indian_Political_Party_Member_Filter;
  _Indian_Political_Party_Member_HasFilter: _Indian_Political_Party_Member_HasFilter;
  _Indian_Political_Party_Member_Order: _Indian_Political_Party_Member_Order;
  _Indian_Political_Party_Member_Orderable: _Indian_Political_Party_Member_Orderable;
  _Indian_Political_Party_Member_Patch: _Indian_Political_Party_Member_Patch;
  _Indian_Political_Party_Member_Ref: _Indian_Political_Party_Member_Ref;
  _Indian_Political_Party_Order: _Indian_Political_Party_Order;
  _Indian_Political_Party_Orderable: _Indian_Political_Party_Orderable;
  _Indian_Political_Party_Patch: _Indian_Political_Party_Patch;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_: ResolverTypeWrapper<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_>;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult: ResolverTypeWrapper<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult>;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_HasFilter: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_HasFilter;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Orderable: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Orderable;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref;
  _Indian_Political_Party_Ref: _Indian_Political_Party_Ref;
  _Indian_Politician_: ResolverTypeWrapper<_Indian_Politician_>;
  _Indian_Politician_AggregateResult: ResolverTypeWrapper<_Indian_Politician_AggregateResult>;
  _Indian_Politician_Filter: _Indian_Politician_Filter;
  _Indian_Politician_HasFilter: _Indian_Politician_HasFilter;
  _Indian_Politician_Order: _Indian_Politician_Order;
  _Indian_Politician_Orderable: _Indian_Politician_Orderable;
  _Indian_Politician_Patch: _Indian_Politician_Patch;
  _Indian_Politician_Ref: _Indian_Politician_Ref;
  _Indian_Prime_Minister_: ResolverTypeWrapper<_Indian_Prime_Minister_>;
  _Indian_Prime_Minister_AggregateResult: ResolverTypeWrapper<_Indian_Prime_Minister_AggregateResult>;
  _Indian_Prime_Minister_Filter: _Indian_Prime_Minister_Filter;
  _Indian_Prime_Minister_HasFilter: _Indian_Prime_Minister_HasFilter;
  _Indian_Prime_Minister_Order: _Indian_Prime_Minister_Order;
  _Indian_Prime_Minister_Orderable: _Indian_Prime_Minister_Orderable;
  _Indian_Prime_Minister_Patch: _Indian_Prime_Minister_Patch;
  _Indian_Prime_Minister_Ref: _Indian_Prime_Minister_Ref;
  _Indian_State_Or_Union_Territory_Category_: _Indian_State_Or_Union_Territory_Category_;
  _Indian_State_Union_Territory_: ResolverTypeWrapper<_Indian_State_Union_Territory_>;
  _Indian_State_Union_Territory_AggregateResult: ResolverTypeWrapper<_Indian_State_Union_Territory_AggregateResult>;
  _Indian_State_Union_Territory_Filter: _Indian_State_Union_Territory_Filter;
  _Indian_State_Union_Territory_HasFilter: _Indian_State_Union_Territory_HasFilter;
  _Indian_State_Union_Territory_Order: _Indian_State_Union_Territory_Order;
  _Indian_State_Union_Territory_Orderable: _Indian_State_Union_Territory_Orderable;
  _Indian_State_Union_Territory_Patch: _Indian_State_Union_Territory_Patch;
  _Indian_State_Union_Territory_Ref: _Indian_State_Union_Territory_Ref;
  _Indian_State_Union_Territory_Region_: ResolverTypeWrapper<_Indian_State_Union_Territory_Region_>;
  _Indian_State_Union_Territory_Region_AggregateResult: ResolverTypeWrapper<_Indian_State_Union_Territory_Region_AggregateResult>;
  _Indian_State_Union_Territory_Region_Filter: _Indian_State_Union_Territory_Region_Filter;
  _Indian_State_Union_Territory_Region_HasFilter: _Indian_State_Union_Territory_Region_HasFilter;
  _Indian_State_Union_Territory_Region_Order: _Indian_State_Union_Territory_Region_Order;
  _Indian_State_Union_Territory_Region_Orderable: _Indian_State_Union_Territory_Region_Orderable;
  _Indian_State_Union_Territory_Region_Patch: _Indian_State_Union_Territory_Region_Patch;
  _Indian_State_Union_Territory_Region_Ref: _Indian_State_Union_Territory_Region_Ref;
  _Indian_Union_Council_Of_Ministers_: ResolverTypeWrapper<_Indian_Union_Council_Of_Ministers_>;
  _Indian_Union_Council_Of_Ministers_AggregateResult: ResolverTypeWrapper<_Indian_Union_Council_Of_Ministers_AggregateResult>;
  _Indian_Union_Council_Of_Ministers_Filter: _Indian_Union_Council_Of_Ministers_Filter;
  _Indian_Union_Council_Of_Ministers_HasFilter: _Indian_Union_Council_Of_Ministers_HasFilter;
  _Indian_Union_Council_Of_Ministers_Order: _Indian_Union_Council_Of_Ministers_Order;
  _Indian_Union_Council_Of_Ministers_Orderable: _Indian_Union_Council_Of_Ministers_Orderable;
  _Indian_Union_Council_Of_Ministers_Patch: _Indian_Union_Council_Of_Ministers_Patch;
  _Indian_Union_Council_Of_Ministers_Ref: _Indian_Union_Council_Of_Ministers_Ref;
  _Indian_Union_Government_: ResolverTypeWrapper<_Indian_Union_Government_>;
  _Indian_Union_Government_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_AggregateResult>;
  _Indian_Union_Government_Cabinet_: ResolverTypeWrapper<_Indian_Union_Government_Cabinet_>;
  _Indian_Union_Government_Cabinet_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_Cabinet_AggregateResult>;
  _Indian_Union_Government_Cabinet_Filter: _Indian_Union_Government_Cabinet_Filter;
  _Indian_Union_Government_Cabinet_HasFilter: _Indian_Union_Government_Cabinet_HasFilter;
  _Indian_Union_Government_Cabinet_Minister_: ResolverTypeWrapper<_Indian_Union_Government_Cabinet_Minister_>;
  _Indian_Union_Government_Cabinet_Minister_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_Cabinet_Minister_AggregateResult>;
  _Indian_Union_Government_Cabinet_Minister_Filter: _Indian_Union_Government_Cabinet_Minister_Filter;
  _Indian_Union_Government_Cabinet_Minister_HasFilter: _Indian_Union_Government_Cabinet_Minister_HasFilter;
  _Indian_Union_Government_Cabinet_Minister_Order: _Indian_Union_Government_Cabinet_Minister_Order;
  _Indian_Union_Government_Cabinet_Minister_Orderable: _Indian_Union_Government_Cabinet_Minister_Orderable;
  _Indian_Union_Government_Cabinet_Minister_Patch: _Indian_Union_Government_Cabinet_Minister_Patch;
  _Indian_Union_Government_Cabinet_Minister_Ref: _Indian_Union_Government_Cabinet_Minister_Ref;
  _Indian_Union_Government_Cabinet_Order: _Indian_Union_Government_Cabinet_Order;
  _Indian_Union_Government_Cabinet_Orderable: _Indian_Union_Government_Cabinet_Orderable;
  _Indian_Union_Government_Cabinet_Patch: _Indian_Union_Government_Cabinet_Patch;
  _Indian_Union_Government_Cabinet_Ref: _Indian_Union_Government_Cabinet_Ref;
  _Indian_Union_Government_Department_: ResolverTypeWrapper<_Indian_Union_Government_Department_>;
  _Indian_Union_Government_Department_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_Department_AggregateResult>;
  _Indian_Union_Government_Department_Filter: _Indian_Union_Government_Department_Filter;
  _Indian_Union_Government_Department_HasFilter: _Indian_Union_Government_Department_HasFilter;
  _Indian_Union_Government_Department_Order: _Indian_Union_Government_Department_Order;
  _Indian_Union_Government_Department_Orderable: _Indian_Union_Government_Department_Orderable;
  _Indian_Union_Government_Department_Patch: _Indian_Union_Government_Department_Patch;
  _Indian_Union_Government_Department_Ref: _Indian_Union_Government_Department_Ref;
  _Indian_Union_Government_Filter: _Indian_Union_Government_Filter;
  _Indian_Union_Government_HasFilter: _Indian_Union_Government_HasFilter;
  _Indian_Union_Government_Minister_Of_State_: ResolverTypeWrapper<_Indian_Union_Government_Minister_Of_State_>;
  _Indian_Union_Government_Minister_Of_State_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_Minister_Of_State_AggregateResult>;
  _Indian_Union_Government_Minister_Of_State_Filter: _Indian_Union_Government_Minister_Of_State_Filter;
  _Indian_Union_Government_Minister_Of_State_HasFilter: _Indian_Union_Government_Minister_Of_State_HasFilter;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_: ResolverTypeWrapper<_Indian_Union_Government_Minister_Of_State_Independent_Charge_>;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult>;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_HasFilter: _Indian_Union_Government_Minister_Of_State_Independent_Charge_HasFilter;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Order: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Order;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Orderable: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Orderable;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref;
  _Indian_Union_Government_Minister_Of_State_Order: _Indian_Union_Government_Minister_Of_State_Order;
  _Indian_Union_Government_Minister_Of_State_Orderable: _Indian_Union_Government_Minister_Of_State_Orderable;
  _Indian_Union_Government_Minister_Of_State_Patch: _Indian_Union_Government_Minister_Of_State_Patch;
  _Indian_Union_Government_Minister_Of_State_Ref: _Indian_Union_Government_Minister_Of_State_Ref;
  _Indian_Union_Government_Ministry_: ResolverTypeWrapper<_Indian_Union_Government_Ministry_>;
  _Indian_Union_Government_Ministry_AggregateResult: ResolverTypeWrapper<_Indian_Union_Government_Ministry_AggregateResult>;
  _Indian_Union_Government_Ministry_Filter: _Indian_Union_Government_Ministry_Filter;
  _Indian_Union_Government_Ministry_HasFilter: _Indian_Union_Government_Ministry_HasFilter;
  _Indian_Union_Government_Ministry_Order: _Indian_Union_Government_Ministry_Order;
  _Indian_Union_Government_Ministry_Orderable: _Indian_Union_Government_Ministry_Orderable;
  _Indian_Union_Government_Ministry_Patch: _Indian_Union_Government_Ministry_Patch;
  _Indian_Union_Government_Ministry_Ref: _Indian_Union_Government_Ministry_Ref;
  _Indian_Union_Government_Order: _Indian_Union_Government_Order;
  _Indian_Union_Government_Orderable: _Indian_Union_Government_Orderable;
  _Indian_Union_Government_Patch: _Indian_Union_Government_Patch;
  _Indian_Union_Government_Ref: _Indian_Union_Government_Ref;
  _Indian_Vidhansabha_Constituency_: ResolverTypeWrapper<_Indian_Vidhansabha_Constituency_>;
  _Indian_Vidhansabha_Constituency_AggregateResult: ResolverTypeWrapper<_Indian_Vidhansabha_Constituency_AggregateResult>;
  _Indian_Vidhansabha_Constituency_Filter: _Indian_Vidhansabha_Constituency_Filter;
  _Indian_Vidhansabha_Constituency_HasFilter: _Indian_Vidhansabha_Constituency_HasFilter;
  _Indian_Vidhansabha_Constituency_Order: _Indian_Vidhansabha_Constituency_Order;
  _Indian_Vidhansabha_Constituency_Orderable: _Indian_Vidhansabha_Constituency_Orderable;
  _Indian_Vidhansabha_Constituency_Patch: _Indian_Vidhansabha_Constituency_Patch;
  _Indian_Vidhansabha_Constituency_Ref: _Indian_Vidhansabha_Constituency_Ref;
  _Indian_Vidhansabha_Constituency_Region_: ResolverTypeWrapper<_Indian_Vidhansabha_Constituency_Region_>;
  _Indian_Vidhansabha_Constituency_Region_AggregateResult: ResolverTypeWrapper<_Indian_Vidhansabha_Constituency_Region_AggregateResult>;
  _Indian_Vidhansabha_Constituency_Region_Filter: _Indian_Vidhansabha_Constituency_Region_Filter;
  _Indian_Vidhansabha_Constituency_Region_HasFilter: _Indian_Vidhansabha_Constituency_Region_HasFilter;
  _Indian_Vidhansabha_Constituency_Region_Order: _Indian_Vidhansabha_Constituency_Region_Order;
  _Indian_Vidhansabha_Constituency_Region_Orderable: _Indian_Vidhansabha_Constituency_Region_Orderable;
  _Indian_Vidhansabha_Constituency_Region_Patch: _Indian_Vidhansabha_Constituency_Region_Patch;
  _Indian_Vidhansabha_Constituency_Region_Ref: _Indian_Vidhansabha_Constituency_Region_Ref;
  _Language_: ResolverTypeWrapper<_Language_>;
  _Language_AggregateResult: ResolverTypeWrapper<_Language_AggregateResult>;
  _Language_Filter: _Language_Filter;
  _Language_HasFilter: _Language_HasFilter;
  _Language_Order: _Language_Order;
  _Language_Orderable: _Language_Orderable;
  _Language_Patch: _Language_Patch;
  _Language_Ref: _Language_Ref;
  _Language_Script_: ResolverTypeWrapper<_Language_Script_>;
  _Language_Script_AggregateResult: ResolverTypeWrapper<_Language_Script_AggregateResult>;
  _Language_Script_Filter: _Language_Script_Filter;
  _Language_Script_HasFilter: _Language_Script_HasFilter;
  _Language_Script_Order: _Language_Script_Order;
  _Language_Script_Orderable: _Language_Script_Orderable;
  _Language_Script_Patch: _Language_Script_Patch;
  _Language_Script_Ref: _Language_Script_Ref;
  _Location_Or_Region_Category_: _Location_Or_Region_Category_;
  _Location_Or_Region_Category__exact: _Location_Or_Region_Category__Exact;
  _Name_: ResolverTypeWrapper<_Name_>;
  _Name_AggregateResult: ResolverTypeWrapper<_Name_AggregateResult>;
  _Name_Filter: _Name_Filter;
  _Name_HasFilter: _Name_HasFilter;
  _Name_Order: _Name_Order;
  _Name_Orderable: _Name_Orderable;
  _Name_Patch: _Name_Patch;
  _Name_Ref: _Name_Ref;
  _Node_Update_: ResolverTypeWrapper<_Node_Update_>;
  _Node_Update_AggregateResult: ResolverTypeWrapper<_Node_Update_AggregateResult>;
  _Node_Update_Filter: _Node_Update_Filter;
  _Node_Update_HasFilter: _Node_Update_HasFilter;
  _Node_Update_Order: _Node_Update_Order;
  _Node_Update_Orderable: _Node_Update_Orderable;
  _Node_Update_Patch: _Node_Update_Patch;
  _Node_Update_Ref: _Node_Update_Ref;
  _Person_: ResolverTypeWrapper<_Person_>;
  _Person_AggregateResult: ResolverTypeWrapper<_Person_AggregateResult>;
  _Person_Filter: _Person_Filter;
  _Person_HasFilter: _Person_HasFilter;
  _Person_Order: _Person_Order;
  _Person_Orderable: _Person_Orderable;
  _Person_Patch: _Person_Patch;
  _Person_Ref: _Person_Ref;
  _Public_Policy_Domain_: ResolverTypeWrapper<_Public_Policy_Domain_>;
  _Public_Policy_Domain_AggregateResult: ResolverTypeWrapper<_Public_Policy_Domain_AggregateResult>;
  _Public_Policy_Domain_Filter: _Public_Policy_Domain_Filter;
  _Public_Policy_Domain_Government_Ministries_Departments_: ResolverTypeWrapper<_Public_Policy_Domain_Government_Ministries_Departments_>;
  _Public_Policy_Domain_Government_Ministries_Departments_AggregateResult: ResolverTypeWrapper<_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult>;
  _Public_Policy_Domain_Government_Ministries_Departments_Filter: _Public_Policy_Domain_Government_Ministries_Departments_Filter;
  _Public_Policy_Domain_Government_Ministries_Departments_HasFilter: _Public_Policy_Domain_Government_Ministries_Departments_HasFilter;
  _Public_Policy_Domain_Government_Ministries_Departments_Order: _Public_Policy_Domain_Government_Ministries_Departments_Order;
  _Public_Policy_Domain_Government_Ministries_Departments_Orderable: _Public_Policy_Domain_Government_Ministries_Departments_Orderable;
  _Public_Policy_Domain_Government_Ministries_Departments_Patch: _Public_Policy_Domain_Government_Ministries_Departments_Patch;
  _Public_Policy_Domain_Government_Ministries_Departments_Ref: _Public_Policy_Domain_Government_Ministries_Departments_Ref;
  _Public_Policy_Domain_HasFilter: _Public_Policy_Domain_HasFilter;
  _Public_Policy_Domain_Order: _Public_Policy_Domain_Order;
  _Public_Policy_Domain_Orderable: _Public_Policy_Domain_Orderable;
  _Public_Policy_Domain_Patch: _Public_Policy_Domain_Patch;
  _Public_Policy_Domain_Ref: _Public_Policy_Domain_Ref;
  _Script_: ResolverTypeWrapper<_Script_>;
  _Script_AggregateResult: ResolverTypeWrapper<_Script_AggregateResult>;
  _Script_Filter: _Script_Filter;
  _Script_HasFilter: _Script_HasFilter;
  _Script_Order: _Script_Order;
  _Script_Orderable: _Script_Orderable;
  _Script_Patch: _Script_Patch;
  _Script_Ref: _Script_Ref;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Account: Account;
  AccountAggregateResult: AccountAggregateResult;
  AccountFilter: AccountFilter;
  AccountOrder: AccountOrder;
  AccountPatch: AccountPatch;
  AccountRef: AccountRef;
  AddAccountInput: AddAccountInput;
  AddAccountPayload: AddAccountPayload;
  AddSessionInput: AddSessionInput;
  AddSessionPayload: AddSessionPayload;
  AddUserInput: AddUserInput;
  AddUserPayload: AddUserPayload;
  AddVerificationTokenInput: AddVerificationTokenInput;
  AddVerificationTokenPayload: AddVerificationTokenPayload;
  Add_Country_Event_Input: Add_Country_Event_Input;
  Add_Country_Event_Payload: Add_Country_Event_Payload;
  Add_Country_Government_Input: Add_Country_Government_Input;
  Add_Country_Government_Payload: Add_Country_Government_Payload;
  Add_Country_Input: Add_Country_Input;
  Add_Country_Payload: Add_Country_Payload;
  Add_Country_Region_Input: Add_Country_Region_Input;
  Add_Country_Region_Payload: Add_Country_Region_Payload;
  Add_Date_Time_Input: Add_Date_Time_Input;
  Add_Date_Time_Payload: Add_Date_Time_Payload;
  Add_Geo_Input: Add_Geo_Input;
  Add_Geo_Payload: Add_Geo_Payload;
  Add_Government_System_Type_Input: Add_Government_System_Type_Input;
  Add_Government_System_Type_Payload: Add_Government_System_Type_Payload;
  Add_Government_System_Types_Authority_Concentration_Input: Add_Government_System_Types_Authority_Concentration_Input;
  Add_Government_System_Types_Authority_Concentration_Payload: Add_Government_System_Types_Authority_Concentration_Payload;
  Add_Government_System_Types_Authority_Distribution_Input: Add_Government_System_Types_Authority_Distribution_Input;
  Add_Government_System_Types_Authority_Distribution_Payload: Add_Government_System_Types_Authority_Distribution_Payload;
  Add_Government_System_Types_Authority_Source_Input: Add_Government_System_Types_Authority_Source_Input;
  Add_Government_System_Types_Authority_Source_Payload: Add_Government_System_Types_Authority_Source_Payload;
  Add_Government_System_Types_Authority_Status_Input: Add_Government_System_Types_Authority_Status_Input;
  Add_Government_System_Types_Authority_Status_Payload: Add_Government_System_Types_Authority_Status_Payload;
  Add_Government_System_Types_Autocratic_Input: Add_Government_System_Types_Autocratic_Input;
  Add_Government_System_Types_Autocratic_Payload: Add_Government_System_Types_Autocratic_Payload;
  Add_Government_System_Types_Democracy_Input: Add_Government_System_Types_Democracy_Input;
  Add_Government_System_Types_Democracy_Payload: Add_Government_System_Types_Democracy_Payload;
  Add_Government_System_Types_Economic_System_Input: Add_Government_System_Types_Economic_System_Input;
  Add_Government_System_Types_Economic_System_Payload: Add_Government_System_Types_Economic_System_Payload;
  Add_Government_System_Types_Head_Of_State_Or_GovernmentInput: Add_Government_System_Types_Head_Of_State_Or_GovernmentInput;
  Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload: Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload;
  Add_Government_System_Types_Monarchy_Input: Add_Government_System_Types_Monarchy_Input;
  Add_Government_System_Types_Monarchy_Payload: Add_Government_System_Types_Monarchy_Payload;
  Add_Government_System_Types_Oligarchy_Input: Add_Government_System_Types_Oligarchy_Input;
  Add_Government_System_Types_Oligarchy_Payload: Add_Government_System_Types_Oligarchy_Payload;
  Add_Government_System_Types_Partisan_Systems_Input: Add_Government_System_Types_Partisan_Systems_Input;
  Add_Government_System_Types_Partisan_Systems_Payload: Add_Government_System_Types_Partisan_Systems_Payload;
  Add_Government_System_Types_Religion_Input: Add_Government_System_Types_Religion_Input;
  Add_Government_System_Types_Religion_Payload: Add_Government_System_Types_Religion_Payload;
  Add_Indian_Administrative_DivisionsInput: Add_Indian_Administrative_DivisionsInput;
  Add_Indian_Administrative_DivisionsPayload: Add_Indian_Administrative_DivisionsPayload;
  Add_Indian_District_Input: Add_Indian_District_Input;
  Add_Indian_District_Payload: Add_Indian_District_Payload;
  Add_Indian_District_Region_Input: Add_Indian_District_Region_Input;
  Add_Indian_District_Region_Payload: Add_Indian_District_Region_Payload;
  Add_Indian_Government_Official_Role_Input: Add_Indian_Government_Official_Role_Input;
  Add_Indian_Government_Official_Role_Payload: Add_Indian_Government_Official_Role_Payload;
  Add_Indian_Government_System_Input: Add_Indian_Government_System_Input;
  Add_Indian_Government_System_Payload: Add_Indian_Government_System_Payload;
  Add_Indian_Legal_Document_Input: Add_Indian_Legal_Document_Input;
  Add_Indian_Legal_Document_Payload: Add_Indian_Legal_Document_Payload;
  Add_Indian_Legislative_DivisionsInput: Add_Indian_Legislative_DivisionsInput;
  Add_Indian_Legislative_DivisionsPayload: Add_Indian_Legislative_DivisionsPayload;
  Add_Indian_Loksabha_Constituency_Election_Candidate_Input: Add_Indian_Loksabha_Constituency_Election_Candidate_Input;
  Add_Indian_Loksabha_Constituency_Election_Candidate_Payload: Add_Indian_Loksabha_Constituency_Election_Candidate_Payload;
  Add_Indian_Loksabha_Constituency_Election_Input: Add_Indian_Loksabha_Constituency_Election_Input;
  Add_Indian_Loksabha_Constituency_Election_Payload: Add_Indian_Loksabha_Constituency_Election_Payload;
  Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input: Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input;
  Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload: Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload;
  Add_Indian_Loksabha_Constituency_Election_Result_Input: Add_Indian_Loksabha_Constituency_Election_Result_Input;
  Add_Indian_Loksabha_Constituency_Election_Result_Payload: Add_Indian_Loksabha_Constituency_Election_Result_Payload;
  Add_Indian_Loksabha_Constituency_Input: Add_Indian_Loksabha_Constituency_Input;
  Add_Indian_Loksabha_Constituency_Payload: Add_Indian_Loksabha_Constituency_Payload;
  Add_Indian_Loksabha_Constituency_Region_Input: Add_Indian_Loksabha_Constituency_Region_Input;
  Add_Indian_Loksabha_Constituency_Region_Payload: Add_Indian_Loksabha_Constituency_Region_Payload;
  Add_Indian_Loksabha_Election_Input: Add_Indian_Loksabha_Election_Input;
  Add_Indian_Loksabha_Election_Payload: Add_Indian_Loksabha_Election_Payload;
  Add_Indian_Loksabha_Election_Phase_Input: Add_Indian_Loksabha_Election_Phase_Input;
  Add_Indian_Loksabha_Election_Phase_Payload: Add_Indian_Loksabha_Election_Phase_Payload;
  Add_Indian_Loksabha_Election_Result_Input: Add_Indian_Loksabha_Election_Result_Input;
  Add_Indian_Loksabha_Election_Result_Payload: Add_Indian_Loksabha_Election_Result_Payload;
  Add_Indian_Loksabha_Input: Add_Indian_Loksabha_Input;
  Add_Indian_Loksabha_Member_Input: Add_Indian_Loksabha_Member_Input;
  Add_Indian_Loksabha_Member_Payload: Add_Indian_Loksabha_Member_Payload;
  Add_Indian_Loksabha_Payload: Add_Indian_Loksabha_Payload;
  Add_Indian_Loksabha_Session_Input: Add_Indian_Loksabha_Session_Input;
  Add_Indian_Loksabha_Session_Payload: Add_Indian_Loksabha_Session_Payload;
  Add_Indian_Political_Party_Input: Add_Indian_Political_Party_Input;
  Add_Indian_Political_Party_Loksabha_Election_Input: Add_Indian_Political_Party_Loksabha_Election_Input;
  Add_Indian_Political_Party_Loksabha_Election_Payload: Add_Indian_Political_Party_Loksabha_Election_Payload;
  Add_Indian_Political_Party_Member_Input: Add_Indian_Political_Party_Member_Input;
  Add_Indian_Political_Party_Member_Payload: Add_Indian_Political_Party_Member_Payload;
  Add_Indian_Political_Party_Payload: Add_Indian_Political_Party_Payload;
  Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input: Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input;
  Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload: Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload;
  Add_Indian_Politician_Input: Add_Indian_Politician_Input;
  Add_Indian_Politician_Payload: Add_Indian_Politician_Payload;
  Add_Indian_Prime_Minister_Input: Add_Indian_Prime_Minister_Input;
  Add_Indian_Prime_Minister_Payload: Add_Indian_Prime_Minister_Payload;
  Add_Indian_State_Union_Territory_Input: Add_Indian_State_Union_Territory_Input;
  Add_Indian_State_Union_Territory_Payload: Add_Indian_State_Union_Territory_Payload;
  Add_Indian_State_Union_Territory_Region_Input: Add_Indian_State_Union_Territory_Region_Input;
  Add_Indian_State_Union_Territory_Region_Payload: Add_Indian_State_Union_Territory_Region_Payload;
  Add_Indian_Union_Council_Of_Ministers_Input: Add_Indian_Union_Council_Of_Ministers_Input;
  Add_Indian_Union_Council_Of_Ministers_Payload: Add_Indian_Union_Council_Of_Ministers_Payload;
  Add_Indian_Union_Government_Cabinet_Input: Add_Indian_Union_Government_Cabinet_Input;
  Add_Indian_Union_Government_Cabinet_Minister_Input: Add_Indian_Union_Government_Cabinet_Minister_Input;
  Add_Indian_Union_Government_Cabinet_Minister_Payload: Add_Indian_Union_Government_Cabinet_Minister_Payload;
  Add_Indian_Union_Government_Cabinet_Payload: Add_Indian_Union_Government_Cabinet_Payload;
  Add_Indian_Union_Government_Department_Input: Add_Indian_Union_Government_Department_Input;
  Add_Indian_Union_Government_Department_Payload: Add_Indian_Union_Government_Department_Payload;
  Add_Indian_Union_Government_Input: Add_Indian_Union_Government_Input;
  Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input: Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input;
  Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload: Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload;
  Add_Indian_Union_Government_Minister_Of_State_Input: Add_Indian_Union_Government_Minister_Of_State_Input;
  Add_Indian_Union_Government_Minister_Of_State_Payload: Add_Indian_Union_Government_Minister_Of_State_Payload;
  Add_Indian_Union_Government_Ministry_Input: Add_Indian_Union_Government_Ministry_Input;
  Add_Indian_Union_Government_Ministry_Payload: Add_Indian_Union_Government_Ministry_Payload;
  Add_Indian_Union_Government_Payload: Add_Indian_Union_Government_Payload;
  Add_Indian_Vidhansabha_Constituency_Input: Add_Indian_Vidhansabha_Constituency_Input;
  Add_Indian_Vidhansabha_Constituency_Payload: Add_Indian_Vidhansabha_Constituency_Payload;
  Add_Indian_Vidhansabha_Constituency_Region_Input: Add_Indian_Vidhansabha_Constituency_Region_Input;
  Add_Indian_Vidhansabha_Constituency_Region_Payload: Add_Indian_Vidhansabha_Constituency_Region_Payload;
  Add_Language_Input: Add_Language_Input;
  Add_Language_Payload: Add_Language_Payload;
  Add_Language_Script_Input: Add_Language_Script_Input;
  Add_Language_Script_Payload: Add_Language_Script_Payload;
  Add_Name_Input: Add_Name_Input;
  Add_Name_Payload: Add_Name_Payload;
  Add_Node_Update_Input: Add_Node_Update_Input;
  Add_Node_Update_Payload: Add_Node_Update_Payload;
  Add_Person_Input: Add_Person_Input;
  Add_Person_Payload: Add_Person_Payload;
  Add_Public_Policy_Domain_Government_Ministries_Departments_Input: Add_Public_Policy_Domain_Government_Ministries_Departments_Input;
  Add_Public_Policy_Domain_Government_Ministries_Departments_Payload: Add_Public_Policy_Domain_Government_Ministries_Departments_Payload;
  Add_Public_Policy_Domain_Input: Add_Public_Policy_Domain_Input;
  Add_Public_Policy_Domain_Payload: Add_Public_Policy_Domain_Payload;
  Add_Script_Input: Add_Script_Input;
  Add_Script_Payload: Add_Script_Payload;
  AuthRule: AuthRule;
  Boolean: Scalars["Boolean"]["output"];
  ContainsFilter: ContainsFilter;
  CustomHTTP: CustomHttp;
  DateTime: Scalars["DateTime"]["output"];
  DateTimeFilter: DateTimeFilter;
  DateTimeRange: DateTimeRange;
  Date_Time_Precision_Category_exact: Date_Time_Precision_Category_Exact;
  DeleteAccountPayload: DeleteAccountPayload;
  DeleteSessionPayload: DeleteSessionPayload;
  DeleteUserPayload: DeleteUserPayload;
  DeleteVerificationTokenPayload: DeleteVerificationTokenPayload;
  Delete_Country_Event_Payload: Delete_Country_Event_Payload;
  Delete_Country_Government_Payload: Delete_Country_Government_Payload;
  Delete_Country_Payload: Delete_Country_Payload;
  Delete_Country_Region_Payload: Delete_Country_Region_Payload;
  Delete_Date_Time_Payload: Delete_Date_Time_Payload;
  Delete_Geo_Payload: Delete_Geo_Payload;
  Delete_Government_System_Type_Payload: Delete_Government_System_Type_Payload;
  Delete_Government_System_Types_Authority_Concentration_Payload: Delete_Government_System_Types_Authority_Concentration_Payload;
  Delete_Government_System_Types_Authority_Distribution_Payload: Delete_Government_System_Types_Authority_Distribution_Payload;
  Delete_Government_System_Types_Authority_Source_Payload: Delete_Government_System_Types_Authority_Source_Payload;
  Delete_Government_System_Types_Authority_Status_Payload: Delete_Government_System_Types_Authority_Status_Payload;
  Delete_Government_System_Types_Autocratic_Payload: Delete_Government_System_Types_Autocratic_Payload;
  Delete_Government_System_Types_Democracy_Payload: Delete_Government_System_Types_Democracy_Payload;
  Delete_Government_System_Types_Economic_System_Payload: Delete_Government_System_Types_Economic_System_Payload;
  Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload: Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload;
  Delete_Government_System_Types_Monarchy_Payload: Delete_Government_System_Types_Monarchy_Payload;
  Delete_Government_System_Types_Oligarchy_Payload: Delete_Government_System_Types_Oligarchy_Payload;
  Delete_Government_System_Types_Partisan_Systems_Payload: Delete_Government_System_Types_Partisan_Systems_Payload;
  Delete_Government_System_Types_Religion_Payload: Delete_Government_System_Types_Religion_Payload;
  Delete_Indian_Administrative_DivisionsPayload: Delete_Indian_Administrative_DivisionsPayload;
  Delete_Indian_District_Payload: Delete_Indian_District_Payload;
  Delete_Indian_District_Region_Payload: Delete_Indian_District_Region_Payload;
  Delete_Indian_Government_Official_Role_Payload: Delete_Indian_Government_Official_Role_Payload;
  Delete_Indian_Government_System_Payload: Delete_Indian_Government_System_Payload;
  Delete_Indian_Legal_Document_Payload: Delete_Indian_Legal_Document_Payload;
  Delete_Indian_Legislative_DivisionsPayload: Delete_Indian_Legislative_DivisionsPayload;
  Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload: Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload;
  Delete_Indian_Loksabha_Constituency_Election_Payload: Delete_Indian_Loksabha_Constituency_Election_Payload;
  Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload: Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload;
  Delete_Indian_Loksabha_Constituency_Election_Result_Payload: Delete_Indian_Loksabha_Constituency_Election_Result_Payload;
  Delete_Indian_Loksabha_Constituency_Payload: Delete_Indian_Loksabha_Constituency_Payload;
  Delete_Indian_Loksabha_Constituency_Region_Payload: Delete_Indian_Loksabha_Constituency_Region_Payload;
  Delete_Indian_Loksabha_Election_Payload: Delete_Indian_Loksabha_Election_Payload;
  Delete_Indian_Loksabha_Election_Phase_Payload: Delete_Indian_Loksabha_Election_Phase_Payload;
  Delete_Indian_Loksabha_Election_Result_Payload: Delete_Indian_Loksabha_Election_Result_Payload;
  Delete_Indian_Loksabha_Member_Payload: Delete_Indian_Loksabha_Member_Payload;
  Delete_Indian_Loksabha_Payload: Delete_Indian_Loksabha_Payload;
  Delete_Indian_Loksabha_Session_Payload: Delete_Indian_Loksabha_Session_Payload;
  Delete_Indian_Political_Party_Loksabha_Election_Payload: Delete_Indian_Political_Party_Loksabha_Election_Payload;
  Delete_Indian_Political_Party_Member_Payload: Delete_Indian_Political_Party_Member_Payload;
  Delete_Indian_Political_Party_Payload: Delete_Indian_Political_Party_Payload;
  Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload: Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload;
  Delete_Indian_Politician_Payload: Delete_Indian_Politician_Payload;
  Delete_Indian_Prime_Minister_Payload: Delete_Indian_Prime_Minister_Payload;
  Delete_Indian_State_Union_Territory_Payload: Delete_Indian_State_Union_Territory_Payload;
  Delete_Indian_State_Union_Territory_Region_Payload: Delete_Indian_State_Union_Territory_Region_Payload;
  Delete_Indian_Union_Council_Of_Ministers_Payload: Delete_Indian_Union_Council_Of_Ministers_Payload;
  Delete_Indian_Union_Government_Cabinet_Minister_Payload: Delete_Indian_Union_Government_Cabinet_Minister_Payload;
  Delete_Indian_Union_Government_Cabinet_Payload: Delete_Indian_Union_Government_Cabinet_Payload;
  Delete_Indian_Union_Government_Department_Payload: Delete_Indian_Union_Government_Department_Payload;
  Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload: Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload;
  Delete_Indian_Union_Government_Minister_Of_State_Payload: Delete_Indian_Union_Government_Minister_Of_State_Payload;
  Delete_Indian_Union_Government_Ministry_Payload: Delete_Indian_Union_Government_Ministry_Payload;
  Delete_Indian_Union_Government_Payload: Delete_Indian_Union_Government_Payload;
  Delete_Indian_Vidhansabha_Constituency_Payload: Delete_Indian_Vidhansabha_Constituency_Payload;
  Delete_Indian_Vidhansabha_Constituency_Region_Payload: Delete_Indian_Vidhansabha_Constituency_Region_Payload;
  Delete_Language_Payload: Delete_Language_Payload;
  Delete_Language_Script_Payload: Delete_Language_Script_Payload;
  Delete_Name_Payload: Delete_Name_Payload;
  Delete_Node_Update_Payload: Delete_Node_Update_Payload;
  Delete_Person_Payload: Delete_Person_Payload;
  Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload: Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload;
  Delete_Public_Policy_Domain_Payload: Delete_Public_Policy_Domain_Payload;
  Delete_Script_Payload: Delete_Script_Payload;
  DgraphDefault: DgraphDefault;
  Float: Scalars["Float"]["output"];
  FloatFilter: FloatFilter;
  FloatRange: FloatRange;
  GenerateMutationParams: GenerateMutationParams;
  GenerateQueryParams: GenerateQueryParams;
  ID: Scalars["ID"]["output"];
  Int: Scalars["Int"]["output"];
  Int64: Scalars["Int64"]["output"];
  Int64Filter: Int64Filter;
  Int64Range: Int64Range;
  IntFilter: IntFilter;
  IntRange: IntRange;
  IntersectsFilter: IntersectsFilter;
  MultiPolygon: MultiPolygon;
  MultiPolygonRef: MultiPolygonRef;
  Mutation: {};
  NearFilter: NearFilter;
  Point: Point;
  PointGeoFilter: PointGeoFilter;
  PointList: PointList;
  PointListRef: PointListRef;
  PointRef: PointRef;
  Polygon: Polygon;
  PolygonGeoFilter: PolygonGeoFilter;
  PolygonRef: PolygonRef;
  Query: {};
  Session: Session;
  SessionAggregateResult: SessionAggregateResult;
  SessionFilter: SessionFilter;
  SessionOrder: SessionOrder;
  SessionPatch: SessionPatch;
  SessionRef: SessionRef;
  String: Scalars["String"]["output"];
  StringExactFilter: StringExactFilter;
  StringExactFilter_StringFullTextFilter_StringTermFilter: StringExactFilter_StringFullTextFilter_StringTermFilter;
  StringFullTextFilter: StringFullTextFilter;
  StringFullTextFilter_StringHashFilter_StringTermFilter: StringFullTextFilter_StringHashFilter_StringTermFilter;
  StringHashFilter: StringHashFilter;
  StringRange: StringRange;
  StringRegExpFilter: StringRegExpFilter;
  StringTermFilter: StringTermFilter;
  UpdateAccountInput: UpdateAccountInput;
  UpdateAccountPayload: UpdateAccountPayload;
  UpdateSessionInput: UpdateSessionInput;
  UpdateSessionPayload: UpdateSessionPayload;
  UpdateUserInput: UpdateUserInput;
  UpdateUserPayload: UpdateUserPayload;
  UpdateVerificationTokenInput: UpdateVerificationTokenInput;
  UpdateVerificationTokenPayload: UpdateVerificationTokenPayload;
  Update_Country_Event_Input: Update_Country_Event_Input;
  Update_Country_Event_Payload: Update_Country_Event_Payload;
  Update_Country_Government_Input: Update_Country_Government_Input;
  Update_Country_Government_Payload: Update_Country_Government_Payload;
  Update_Country_Input: Update_Country_Input;
  Update_Country_Payload: Update_Country_Payload;
  Update_Country_Region_Input: Update_Country_Region_Input;
  Update_Country_Region_Payload: Update_Country_Region_Payload;
  Update_Date_Time_Input: Update_Date_Time_Input;
  Update_Date_Time_Payload: Update_Date_Time_Payload;
  Update_Geo_Input: Update_Geo_Input;
  Update_Geo_Payload: Update_Geo_Payload;
  Update_Government_System_Type_Input: Update_Government_System_Type_Input;
  Update_Government_System_Type_Payload: Update_Government_System_Type_Payload;
  Update_Government_System_Types_Authority_Concentration_Input: Update_Government_System_Types_Authority_Concentration_Input;
  Update_Government_System_Types_Authority_Concentration_Payload: Update_Government_System_Types_Authority_Concentration_Payload;
  Update_Government_System_Types_Authority_Distribution_Input: Update_Government_System_Types_Authority_Distribution_Input;
  Update_Government_System_Types_Authority_Distribution_Payload: Update_Government_System_Types_Authority_Distribution_Payload;
  Update_Government_System_Types_Authority_Source_Input: Update_Government_System_Types_Authority_Source_Input;
  Update_Government_System_Types_Authority_Source_Payload: Update_Government_System_Types_Authority_Source_Payload;
  Update_Government_System_Types_Authority_Status_Input: Update_Government_System_Types_Authority_Status_Input;
  Update_Government_System_Types_Authority_Status_Payload: Update_Government_System_Types_Authority_Status_Payload;
  Update_Government_System_Types_Autocratic_Input: Update_Government_System_Types_Autocratic_Input;
  Update_Government_System_Types_Autocratic_Payload: Update_Government_System_Types_Autocratic_Payload;
  Update_Government_System_Types_Democracy_Input: Update_Government_System_Types_Democracy_Input;
  Update_Government_System_Types_Democracy_Payload: Update_Government_System_Types_Democracy_Payload;
  Update_Government_System_Types_Economic_System_Input: Update_Government_System_Types_Economic_System_Input;
  Update_Government_System_Types_Economic_System_Payload: Update_Government_System_Types_Economic_System_Payload;
  Update_Government_System_Types_Head_Of_State_Or_GovernmentInput: Update_Government_System_Types_Head_Of_State_Or_GovernmentInput;
  Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload: Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload;
  Update_Government_System_Types_Monarchy_Input: Update_Government_System_Types_Monarchy_Input;
  Update_Government_System_Types_Monarchy_Payload: Update_Government_System_Types_Monarchy_Payload;
  Update_Government_System_Types_Oligarchy_Input: Update_Government_System_Types_Oligarchy_Input;
  Update_Government_System_Types_Oligarchy_Payload: Update_Government_System_Types_Oligarchy_Payload;
  Update_Government_System_Types_Partisan_Systems_Input: Update_Government_System_Types_Partisan_Systems_Input;
  Update_Government_System_Types_Partisan_Systems_Payload: Update_Government_System_Types_Partisan_Systems_Payload;
  Update_Government_System_Types_Religion_Input: Update_Government_System_Types_Religion_Input;
  Update_Government_System_Types_Religion_Payload: Update_Government_System_Types_Religion_Payload;
  Update_Indian_Administrative_DivisionsInput: Update_Indian_Administrative_DivisionsInput;
  Update_Indian_Administrative_DivisionsPayload: Update_Indian_Administrative_DivisionsPayload;
  Update_Indian_District_Input: Update_Indian_District_Input;
  Update_Indian_District_Payload: Update_Indian_District_Payload;
  Update_Indian_District_Region_Input: Update_Indian_District_Region_Input;
  Update_Indian_District_Region_Payload: Update_Indian_District_Region_Payload;
  Update_Indian_Government_Official_Role_Input: Update_Indian_Government_Official_Role_Input;
  Update_Indian_Government_Official_Role_Payload: Update_Indian_Government_Official_Role_Payload;
  Update_Indian_Government_System_Input: Update_Indian_Government_System_Input;
  Update_Indian_Government_System_Payload: Update_Indian_Government_System_Payload;
  Update_Indian_Legal_Document_Input: Update_Indian_Legal_Document_Input;
  Update_Indian_Legal_Document_Payload: Update_Indian_Legal_Document_Payload;
  Update_Indian_Legislative_DivisionsInput: Update_Indian_Legislative_DivisionsInput;
  Update_Indian_Legislative_DivisionsPayload: Update_Indian_Legislative_DivisionsPayload;
  Update_Indian_Loksabha_Constituency_Election_Candidate_Input: Update_Indian_Loksabha_Constituency_Election_Candidate_Input;
  Update_Indian_Loksabha_Constituency_Election_Candidate_Payload: Update_Indian_Loksabha_Constituency_Election_Candidate_Payload;
  Update_Indian_Loksabha_Constituency_Election_Input: Update_Indian_Loksabha_Constituency_Election_Input;
  Update_Indian_Loksabha_Constituency_Election_Payload: Update_Indian_Loksabha_Constituency_Election_Payload;
  Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input: Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Input;
  Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload: Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload;
  Update_Indian_Loksabha_Constituency_Election_Result_Input: Update_Indian_Loksabha_Constituency_Election_Result_Input;
  Update_Indian_Loksabha_Constituency_Election_Result_Payload: Update_Indian_Loksabha_Constituency_Election_Result_Payload;
  Update_Indian_Loksabha_Constituency_Input: Update_Indian_Loksabha_Constituency_Input;
  Update_Indian_Loksabha_Constituency_Payload: Update_Indian_Loksabha_Constituency_Payload;
  Update_Indian_Loksabha_Constituency_Region_Input: Update_Indian_Loksabha_Constituency_Region_Input;
  Update_Indian_Loksabha_Constituency_Region_Payload: Update_Indian_Loksabha_Constituency_Region_Payload;
  Update_Indian_Loksabha_Election_Input: Update_Indian_Loksabha_Election_Input;
  Update_Indian_Loksabha_Election_Payload: Update_Indian_Loksabha_Election_Payload;
  Update_Indian_Loksabha_Election_Phase_Input: Update_Indian_Loksabha_Election_Phase_Input;
  Update_Indian_Loksabha_Election_Phase_Payload: Update_Indian_Loksabha_Election_Phase_Payload;
  Update_Indian_Loksabha_Election_Result_Input: Update_Indian_Loksabha_Election_Result_Input;
  Update_Indian_Loksabha_Election_Result_Payload: Update_Indian_Loksabha_Election_Result_Payload;
  Update_Indian_Loksabha_Input: Update_Indian_Loksabha_Input;
  Update_Indian_Loksabha_Member_Input: Update_Indian_Loksabha_Member_Input;
  Update_Indian_Loksabha_Member_Payload: Update_Indian_Loksabha_Member_Payload;
  Update_Indian_Loksabha_Payload: Update_Indian_Loksabha_Payload;
  Update_Indian_Loksabha_Session_Input: Update_Indian_Loksabha_Session_Input;
  Update_Indian_Loksabha_Session_Payload: Update_Indian_Loksabha_Session_Payload;
  Update_Indian_Political_Party_Input: Update_Indian_Political_Party_Input;
  Update_Indian_Political_Party_Loksabha_Election_Input: Update_Indian_Political_Party_Loksabha_Election_Input;
  Update_Indian_Political_Party_Loksabha_Election_Payload: Update_Indian_Political_Party_Loksabha_Election_Payload;
  Update_Indian_Political_Party_Member_Input: Update_Indian_Political_Party_Member_Input;
  Update_Indian_Political_Party_Member_Payload: Update_Indian_Political_Party_Member_Payload;
  Update_Indian_Political_Party_Payload: Update_Indian_Political_Party_Payload;
  Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input: Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Input;
  Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload: Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload;
  Update_Indian_Politician_Input: Update_Indian_Politician_Input;
  Update_Indian_Politician_Payload: Update_Indian_Politician_Payload;
  Update_Indian_Prime_Minister_Input: Update_Indian_Prime_Minister_Input;
  Update_Indian_Prime_Minister_Payload: Update_Indian_Prime_Minister_Payload;
  Update_Indian_State_Union_Territory_Input: Update_Indian_State_Union_Territory_Input;
  Update_Indian_State_Union_Territory_Payload: Update_Indian_State_Union_Territory_Payload;
  Update_Indian_State_Union_Territory_Region_Input: Update_Indian_State_Union_Territory_Region_Input;
  Update_Indian_State_Union_Territory_Region_Payload: Update_Indian_State_Union_Territory_Region_Payload;
  Update_Indian_Union_Council_Of_Ministers_Input: Update_Indian_Union_Council_Of_Ministers_Input;
  Update_Indian_Union_Council_Of_Ministers_Payload: Update_Indian_Union_Council_Of_Ministers_Payload;
  Update_Indian_Union_Government_Cabinet_Input: Update_Indian_Union_Government_Cabinet_Input;
  Update_Indian_Union_Government_Cabinet_Minister_Input: Update_Indian_Union_Government_Cabinet_Minister_Input;
  Update_Indian_Union_Government_Cabinet_Minister_Payload: Update_Indian_Union_Government_Cabinet_Minister_Payload;
  Update_Indian_Union_Government_Cabinet_Payload: Update_Indian_Union_Government_Cabinet_Payload;
  Update_Indian_Union_Government_Department_Input: Update_Indian_Union_Government_Department_Input;
  Update_Indian_Union_Government_Department_Payload: Update_Indian_Union_Government_Department_Payload;
  Update_Indian_Union_Government_Input: Update_Indian_Union_Government_Input;
  Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input: Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Input;
  Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload: Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload;
  Update_Indian_Union_Government_Minister_Of_State_Input: Update_Indian_Union_Government_Minister_Of_State_Input;
  Update_Indian_Union_Government_Minister_Of_State_Payload: Update_Indian_Union_Government_Minister_Of_State_Payload;
  Update_Indian_Union_Government_Ministry_Input: Update_Indian_Union_Government_Ministry_Input;
  Update_Indian_Union_Government_Ministry_Payload: Update_Indian_Union_Government_Ministry_Payload;
  Update_Indian_Union_Government_Payload: Update_Indian_Union_Government_Payload;
  Update_Indian_Vidhansabha_Constituency_Input: Update_Indian_Vidhansabha_Constituency_Input;
  Update_Indian_Vidhansabha_Constituency_Payload: Update_Indian_Vidhansabha_Constituency_Payload;
  Update_Indian_Vidhansabha_Constituency_Region_Input: Update_Indian_Vidhansabha_Constituency_Region_Input;
  Update_Indian_Vidhansabha_Constituency_Region_Payload: Update_Indian_Vidhansabha_Constituency_Region_Payload;
  Update_Language_Input: Update_Language_Input;
  Update_Language_Payload: Update_Language_Payload;
  Update_Language_Script_Input: Update_Language_Script_Input;
  Update_Language_Script_Payload: Update_Language_Script_Payload;
  Update_Name_Input: Update_Name_Input;
  Update_Name_Payload: Update_Name_Payload;
  Update_Node_Update_Input: Update_Node_Update_Input;
  Update_Node_Update_Payload: Update_Node_Update_Payload;
  Update_Person_Input: Update_Person_Input;
  Update_Person_Payload: Update_Person_Payload;
  Update_Public_Policy_Domain_Government_Ministries_Departments_Input: Update_Public_Policy_Domain_Government_Ministries_Departments_Input;
  Update_Public_Policy_Domain_Government_Ministries_Departments_Payload: Update_Public_Policy_Domain_Government_Ministries_Departments_Payload;
  Update_Public_Policy_Domain_Input: Update_Public_Policy_Domain_Input;
  Update_Public_Policy_Domain_Payload: Update_Public_Policy_Domain_Payload;
  Update_Script_Input: Update_Script_Input;
  Update_Script_Payload: Update_Script_Payload;
  User: User;
  UserAggregateResult: UserAggregateResult;
  UserFilter: UserFilter;
  UserOrder: UserOrder;
  UserPatch: UserPatch;
  UserRef: UserRef;
  VerificationToken: VerificationToken;
  VerificationTokenAggregateResult: VerificationTokenAggregateResult;
  VerificationTokenFilter: VerificationTokenFilter;
  VerificationTokenOrder: VerificationTokenOrder;
  VerificationTokenPatch: VerificationTokenPatch;
  VerificationTokenRef: VerificationTokenRef;
  WithinFilter: WithinFilter;
  _Country_: _Country_;
  _Country_AggregateResult: _Country_AggregateResult;
  _Country_Event_: _Country_Event_;
  _Country_Event_AggregateResult: _Country_Event_AggregateResult;
  _Country_Event_Filter: _Country_Event_Filter;
  _Country_Event_Order: _Country_Event_Order;
  _Country_Event_Patch: _Country_Event_Patch;
  _Country_Event_Ref: _Country_Event_Ref;
  _Country_Filter: _Country_Filter;
  _Country_Government_: _Country_Government_;
  _Country_Government_AggregateResult: _Country_Government_AggregateResult;
  _Country_Government_Filter: _Country_Government_Filter;
  _Country_Government_Order: _Country_Government_Order;
  _Country_Government_Patch: _Country_Government_Patch;
  _Country_Government_Ref: _Country_Government_Ref;
  _Country_Order: _Country_Order;
  _Country_Patch: _Country_Patch;
  _Country_Ref: _Country_Ref;
  _Country_Region_: _Country_Region_;
  _Country_Region_AggregateResult: _Country_Region_AggregateResult;
  _Country_Region_Filter: _Country_Region_Filter;
  _Country_Region_Order: _Country_Region_Order;
  _Country_Region_Patch: _Country_Region_Patch;
  _Country_Region_Ref: _Country_Region_Ref;
  _Date_Time_: _Date_Time_;
  _Date_Time_AggregateResult: _Date_Time_AggregateResult;
  _Date_Time_Filter: _Date_Time_Filter;
  _Date_Time_Order: _Date_Time_Order;
  _Date_Time_Patch: _Date_Time_Patch;
  _Date_Time_Ref: _Date_Time_Ref;
  _Geo_: _Geo_;
  _Geo_AggregateResult: _Geo_AggregateResult;
  _Geo_Filter: _Geo_Filter;
  _Geo_Order: _Geo_Order;
  _Geo_Patch: _Geo_Patch;
  _Geo_Ref: _Geo_Ref;
  _Government_System_Type_: _Government_System_Type_;
  _Government_System_Type_AggregateResult: _Government_System_Type_AggregateResult;
  _Government_System_Type_Filter: _Government_System_Type_Filter;
  _Government_System_Type_Order: _Government_System_Type_Order;
  _Government_System_Type_Patch: _Government_System_Type_Patch;
  _Government_System_Type_Ref: _Government_System_Type_Ref;
  _Government_System_Types_Authority_Concentration_: _Government_System_Types_Authority_Concentration_;
  _Government_System_Types_Authority_Concentration_AggregateResult: _Government_System_Types_Authority_Concentration_AggregateResult;
  _Government_System_Types_Authority_Concentration_Filter: _Government_System_Types_Authority_Concentration_Filter;
  _Government_System_Types_Authority_Concentration_Order: _Government_System_Types_Authority_Concentration_Order;
  _Government_System_Types_Authority_Concentration_Patch: _Government_System_Types_Authority_Concentration_Patch;
  _Government_System_Types_Authority_Concentration_Ref: _Government_System_Types_Authority_Concentration_Ref;
  _Government_System_Types_Authority_Distribution_: _Government_System_Types_Authority_Distribution_;
  _Government_System_Types_Authority_Distribution_AggregateResult: _Government_System_Types_Authority_Distribution_AggregateResult;
  _Government_System_Types_Authority_Distribution_Filter: _Government_System_Types_Authority_Distribution_Filter;
  _Government_System_Types_Authority_Distribution_Order: _Government_System_Types_Authority_Distribution_Order;
  _Government_System_Types_Authority_Distribution_Patch: _Government_System_Types_Authority_Distribution_Patch;
  _Government_System_Types_Authority_Distribution_Ref: _Government_System_Types_Authority_Distribution_Ref;
  _Government_System_Types_Authority_Source_: _Government_System_Types_Authority_Source_;
  _Government_System_Types_Authority_Source_AggregateResult: _Government_System_Types_Authority_Source_AggregateResult;
  _Government_System_Types_Authority_Source_Filter: _Government_System_Types_Authority_Source_Filter;
  _Government_System_Types_Authority_Source_Order: _Government_System_Types_Authority_Source_Order;
  _Government_System_Types_Authority_Source_Patch: _Government_System_Types_Authority_Source_Patch;
  _Government_System_Types_Authority_Source_Ref: _Government_System_Types_Authority_Source_Ref;
  _Government_System_Types_Authority_Status_: _Government_System_Types_Authority_Status_;
  _Government_System_Types_Authority_Status_AggregateResult: _Government_System_Types_Authority_Status_AggregateResult;
  _Government_System_Types_Authority_Status_Filter: _Government_System_Types_Authority_Status_Filter;
  _Government_System_Types_Authority_Status_Order: _Government_System_Types_Authority_Status_Order;
  _Government_System_Types_Authority_Status_Patch: _Government_System_Types_Authority_Status_Patch;
  _Government_System_Types_Authority_Status_Ref: _Government_System_Types_Authority_Status_Ref;
  _Government_System_Types_Autocratic_: _Government_System_Types_Autocratic_;
  _Government_System_Types_Autocratic_AggregateResult: _Government_System_Types_Autocratic_AggregateResult;
  _Government_System_Types_Autocratic_Filter: _Government_System_Types_Autocratic_Filter;
  _Government_System_Types_Autocratic_Order: _Government_System_Types_Autocratic_Order;
  _Government_System_Types_Autocratic_Patch: _Government_System_Types_Autocratic_Patch;
  _Government_System_Types_Autocratic_Ref: _Government_System_Types_Autocratic_Ref;
  _Government_System_Types_Democracy_: _Government_System_Types_Democracy_;
  _Government_System_Types_Democracy_AggregateResult: _Government_System_Types_Democracy_AggregateResult;
  _Government_System_Types_Democracy_Filter: _Government_System_Types_Democracy_Filter;
  _Government_System_Types_Democracy_Order: _Government_System_Types_Democracy_Order;
  _Government_System_Types_Democracy_Patch: _Government_System_Types_Democracy_Patch;
  _Government_System_Types_Democracy_Ref: _Government_System_Types_Democracy_Ref;
  _Government_System_Types_Economic_System_: _Government_System_Types_Economic_System_;
  _Government_System_Types_Economic_System_AggregateResult: _Government_System_Types_Economic_System_AggregateResult;
  _Government_System_Types_Economic_System_Filter: _Government_System_Types_Economic_System_Filter;
  _Government_System_Types_Economic_System_Order: _Government_System_Types_Economic_System_Order;
  _Government_System_Types_Economic_System_Patch: _Government_System_Types_Economic_System_Patch;
  _Government_System_Types_Economic_System_Ref: _Government_System_Types_Economic_System_Ref;
  _Government_System_Types_Head_Of_State_Or_Government: _Government_System_Types_Head_Of_State_Or_Government;
  _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult: _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult;
  _Government_System_Types_Head_Of_State_Or_GovernmentFilter: _Government_System_Types_Head_Of_State_Or_GovernmentFilter;
  _Government_System_Types_Head_Of_State_Or_GovernmentOrder: _Government_System_Types_Head_Of_State_Or_GovernmentOrder;
  _Government_System_Types_Head_Of_State_Or_GovernmentPatch: _Government_System_Types_Head_Of_State_Or_GovernmentPatch;
  _Government_System_Types_Head_Of_State_Or_GovernmentRef: _Government_System_Types_Head_Of_State_Or_GovernmentRef;
  _Government_System_Types_Monarchy_: _Government_System_Types_Monarchy_;
  _Government_System_Types_Monarchy_AggregateResult: _Government_System_Types_Monarchy_AggregateResult;
  _Government_System_Types_Monarchy_Filter: _Government_System_Types_Monarchy_Filter;
  _Government_System_Types_Monarchy_Order: _Government_System_Types_Monarchy_Order;
  _Government_System_Types_Monarchy_Patch: _Government_System_Types_Monarchy_Patch;
  _Government_System_Types_Monarchy_Ref: _Government_System_Types_Monarchy_Ref;
  _Government_System_Types_Oligarchy_: _Government_System_Types_Oligarchy_;
  _Government_System_Types_Oligarchy_AggregateResult: _Government_System_Types_Oligarchy_AggregateResult;
  _Government_System_Types_Oligarchy_Filter: _Government_System_Types_Oligarchy_Filter;
  _Government_System_Types_Oligarchy_Order: _Government_System_Types_Oligarchy_Order;
  _Government_System_Types_Oligarchy_Patch: _Government_System_Types_Oligarchy_Patch;
  _Government_System_Types_Oligarchy_Ref: _Government_System_Types_Oligarchy_Ref;
  _Government_System_Types_Partisan_Systems_: _Government_System_Types_Partisan_Systems_;
  _Government_System_Types_Partisan_Systems_AggregateResult: _Government_System_Types_Partisan_Systems_AggregateResult;
  _Government_System_Types_Partisan_Systems_Filter: _Government_System_Types_Partisan_Systems_Filter;
  _Government_System_Types_Partisan_Systems_Order: _Government_System_Types_Partisan_Systems_Order;
  _Government_System_Types_Partisan_Systems_Patch: _Government_System_Types_Partisan_Systems_Patch;
  _Government_System_Types_Partisan_Systems_Ref: _Government_System_Types_Partisan_Systems_Ref;
  _Government_System_Types_Religion_: _Government_System_Types_Religion_;
  _Government_System_Types_Religion_AggregateResult: _Government_System_Types_Religion_AggregateResult;
  _Government_System_Types_Religion_Filter: _Government_System_Types_Religion_Filter;
  _Government_System_Types_Religion_Order: _Government_System_Types_Religion_Order;
  _Government_System_Types_Religion_Patch: _Government_System_Types_Religion_Patch;
  _Government_System_Types_Religion_Ref: _Government_System_Types_Religion_Ref;
  _Indian_Administrative_Divisions: _Indian_Administrative_Divisions;
  _Indian_Administrative_DivisionsAggregateResult: _Indian_Administrative_DivisionsAggregateResult;
  _Indian_Administrative_DivisionsFilter: _Indian_Administrative_DivisionsFilter;
  _Indian_Administrative_DivisionsPatch: _Indian_Administrative_DivisionsPatch;
  _Indian_Administrative_DivisionsRef: _Indian_Administrative_DivisionsRef;
  _Indian_District_: _Indian_District_;
  _Indian_District_AggregateResult: _Indian_District_AggregateResult;
  _Indian_District_Filter: _Indian_District_Filter;
  _Indian_District_Order: _Indian_District_Order;
  _Indian_District_Patch: _Indian_District_Patch;
  _Indian_District_Ref: _Indian_District_Ref;
  _Indian_District_Region_: _Indian_District_Region_;
  _Indian_District_Region_AggregateResult: _Indian_District_Region_AggregateResult;
  _Indian_District_Region_Filter: _Indian_District_Region_Filter;
  _Indian_District_Region_Order: _Indian_District_Region_Order;
  _Indian_District_Region_Patch: _Indian_District_Region_Patch;
  _Indian_District_Region_Ref: _Indian_District_Region_Ref;
  _Indian_Government_Official_Role_: _Indian_Government_Official_Role_;
  _Indian_Government_Official_Role_AggregateResult: _Indian_Government_Official_Role_AggregateResult;
  _Indian_Government_Official_Role_Filter: _Indian_Government_Official_Role_Filter;
  _Indian_Government_Official_Role_Order: _Indian_Government_Official_Role_Order;
  _Indian_Government_Official_Role_Patch: _Indian_Government_Official_Role_Patch;
  _Indian_Government_Official_Role_Ref: _Indian_Government_Official_Role_Ref;
  _Indian_Government_System_: _Indian_Government_System_;
  _Indian_Government_System_AggregateResult: _Indian_Government_System_AggregateResult;
  _Indian_Government_System_Filter: _Indian_Government_System_Filter;
  _Indian_Government_System_Order: _Indian_Government_System_Order;
  _Indian_Government_System_Patch: _Indian_Government_System_Patch;
  _Indian_Government_System_Ref: _Indian_Government_System_Ref;
  _Indian_Legal_Document_: _Indian_Legal_Document_;
  _Indian_Legal_Document_AggregateResult: _Indian_Legal_Document_AggregateResult;
  _Indian_Legal_Document_Category__exact: _Indian_Legal_Document_Category__Exact;
  _Indian_Legal_Document_Filter: _Indian_Legal_Document_Filter;
  _Indian_Legal_Document_Order: _Indian_Legal_Document_Order;
  _Indian_Legal_Document_Patch: _Indian_Legal_Document_Patch;
  _Indian_Legal_Document_Ref: _Indian_Legal_Document_Ref;
  _Indian_Legislative_Divisions: _Indian_Legislative_Divisions;
  _Indian_Legislative_DivisionsAggregateResult: _Indian_Legislative_DivisionsAggregateResult;
  _Indian_Legislative_DivisionsFilter: _Indian_Legislative_DivisionsFilter;
  _Indian_Legislative_DivisionsPatch: _Indian_Legislative_DivisionsPatch;
  _Indian_Legislative_DivisionsRef: _Indian_Legislative_DivisionsRef;
  _Indian_Loksabha_: _Indian_Loksabha_;
  _Indian_Loksabha_AggregateResult: _Indian_Loksabha_AggregateResult;
  _Indian_Loksabha_Constituency_: _Indian_Loksabha_Constituency_;
  _Indian_Loksabha_Constituency_AggregateResult: _Indian_Loksabha_Constituency_AggregateResult;
  _Indian_Loksabha_Constituency_Election_: _Indian_Loksabha_Constituency_Election_;
  _Indian_Loksabha_Constituency_Election_AggregateResult: _Indian_Loksabha_Constituency_Election_AggregateResult;
  _Indian_Loksabha_Constituency_Election_Candidate_: _Indian_Loksabha_Constituency_Election_Candidate_;
  _Indian_Loksabha_Constituency_Election_Candidate_AggregateResult: _Indian_Loksabha_Constituency_Election_Candidate_AggregateResult;
  _Indian_Loksabha_Constituency_Election_Candidate_Filter: _Indian_Loksabha_Constituency_Election_Candidate_Filter;
  _Indian_Loksabha_Constituency_Election_Candidate_Order: _Indian_Loksabha_Constituency_Election_Candidate_Order;
  _Indian_Loksabha_Constituency_Election_Candidate_Patch: _Indian_Loksabha_Constituency_Election_Candidate_Patch;
  _Indian_Loksabha_Constituency_Election_Candidate_Ref: _Indian_Loksabha_Constituency_Election_Candidate_Ref;
  _Indian_Loksabha_Constituency_Election_Filter: _Indian_Loksabha_Constituency_Election_Filter;
  _Indian_Loksabha_Constituency_Election_Order: _Indian_Loksabha_Constituency_Election_Order;
  _Indian_Loksabha_Constituency_Election_Patch: _Indian_Loksabha_Constituency_Election_Patch;
  _Indian_Loksabha_Constituency_Election_Ref: _Indian_Loksabha_Constituency_Election_Ref;
  _Indian_Loksabha_Constituency_Election_Result_: _Indian_Loksabha_Constituency_Election_Result_;
  _Indian_Loksabha_Constituency_Election_Result_AggregateResult: _Indian_Loksabha_Constituency_Election_Result_AggregateResult;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Filter;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Order;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Patch;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Ref;
  _Indian_Loksabha_Constituency_Election_Result_Filter: _Indian_Loksabha_Constituency_Election_Result_Filter;
  _Indian_Loksabha_Constituency_Election_Result_Order: _Indian_Loksabha_Constituency_Election_Result_Order;
  _Indian_Loksabha_Constituency_Election_Result_Patch: _Indian_Loksabha_Constituency_Election_Result_Patch;
  _Indian_Loksabha_Constituency_Election_Result_Ref: _Indian_Loksabha_Constituency_Election_Result_Ref;
  _Indian_Loksabha_Constituency_Filter: _Indian_Loksabha_Constituency_Filter;
  _Indian_Loksabha_Constituency_Order: _Indian_Loksabha_Constituency_Order;
  _Indian_Loksabha_Constituency_Patch: _Indian_Loksabha_Constituency_Patch;
  _Indian_Loksabha_Constituency_Ref: _Indian_Loksabha_Constituency_Ref;
  _Indian_Loksabha_Constituency_Region_: _Indian_Loksabha_Constituency_Region_;
  _Indian_Loksabha_Constituency_Region_AggregateResult: _Indian_Loksabha_Constituency_Region_AggregateResult;
  _Indian_Loksabha_Constituency_Region_Filter: _Indian_Loksabha_Constituency_Region_Filter;
  _Indian_Loksabha_Constituency_Region_Order: _Indian_Loksabha_Constituency_Region_Order;
  _Indian_Loksabha_Constituency_Region_Patch: _Indian_Loksabha_Constituency_Region_Patch;
  _Indian_Loksabha_Constituency_Region_Ref: _Indian_Loksabha_Constituency_Region_Ref;
  _Indian_Loksabha_Election_: _Indian_Loksabha_Election_;
  _Indian_Loksabha_Election_AggregateResult: _Indian_Loksabha_Election_AggregateResult;
  _Indian_Loksabha_Election_Filter: _Indian_Loksabha_Election_Filter;
  _Indian_Loksabha_Election_Order: _Indian_Loksabha_Election_Order;
  _Indian_Loksabha_Election_Patch: _Indian_Loksabha_Election_Patch;
  _Indian_Loksabha_Election_Phase_: _Indian_Loksabha_Election_Phase_;
  _Indian_Loksabha_Election_Phase_AggregateResult: _Indian_Loksabha_Election_Phase_AggregateResult;
  _Indian_Loksabha_Election_Phase_Filter: _Indian_Loksabha_Election_Phase_Filter;
  _Indian_Loksabha_Election_Phase_Order: _Indian_Loksabha_Election_Phase_Order;
  _Indian_Loksabha_Election_Phase_Patch: _Indian_Loksabha_Election_Phase_Patch;
  _Indian_Loksabha_Election_Phase_Ref: _Indian_Loksabha_Election_Phase_Ref;
  _Indian_Loksabha_Election_Ref: _Indian_Loksabha_Election_Ref;
  _Indian_Loksabha_Election_Result_: _Indian_Loksabha_Election_Result_;
  _Indian_Loksabha_Election_Result_AggregateResult: _Indian_Loksabha_Election_Result_AggregateResult;
  _Indian_Loksabha_Election_Result_Filter: _Indian_Loksabha_Election_Result_Filter;
  _Indian_Loksabha_Election_Result_Order: _Indian_Loksabha_Election_Result_Order;
  _Indian_Loksabha_Election_Result_Patch: _Indian_Loksabha_Election_Result_Patch;
  _Indian_Loksabha_Election_Result_Ref: _Indian_Loksabha_Election_Result_Ref;
  _Indian_Loksabha_Filter: _Indian_Loksabha_Filter;
  _Indian_Loksabha_Member_: _Indian_Loksabha_Member_;
  _Indian_Loksabha_Member_AggregateResult: _Indian_Loksabha_Member_AggregateResult;
  _Indian_Loksabha_Member_Filter: _Indian_Loksabha_Member_Filter;
  _Indian_Loksabha_Member_Order: _Indian_Loksabha_Member_Order;
  _Indian_Loksabha_Member_Patch: _Indian_Loksabha_Member_Patch;
  _Indian_Loksabha_Member_Ref: _Indian_Loksabha_Member_Ref;
  _Indian_Loksabha_Order: _Indian_Loksabha_Order;
  _Indian_Loksabha_Patch: _Indian_Loksabha_Patch;
  _Indian_Loksabha_Ref: _Indian_Loksabha_Ref;
  _Indian_Loksabha_Session_: _Indian_Loksabha_Session_;
  _Indian_Loksabha_Session_AggregateResult: _Indian_Loksabha_Session_AggregateResult;
  _Indian_Loksabha_Session_Filter: _Indian_Loksabha_Session_Filter;
  _Indian_Loksabha_Session_Order: _Indian_Loksabha_Session_Order;
  _Indian_Loksabha_Session_Patch: _Indian_Loksabha_Session_Patch;
  _Indian_Loksabha_Session_Ref: _Indian_Loksabha_Session_Ref;
  _Indian_Political_Party_: _Indian_Political_Party_;
  _Indian_Political_Party_AggregateResult: _Indian_Political_Party_AggregateResult;
  _Indian_Political_Party_Filter: _Indian_Political_Party_Filter;
  _Indian_Political_Party_Loksabha_Election_: _Indian_Political_Party_Loksabha_Election_;
  _Indian_Political_Party_Loksabha_Election_AggregateResult: _Indian_Political_Party_Loksabha_Election_AggregateResult;
  _Indian_Political_Party_Loksabha_Election_Filter: _Indian_Political_Party_Loksabha_Election_Filter;
  _Indian_Political_Party_Loksabha_Election_Order: _Indian_Political_Party_Loksabha_Election_Order;
  _Indian_Political_Party_Loksabha_Election_Patch: _Indian_Political_Party_Loksabha_Election_Patch;
  _Indian_Political_Party_Loksabha_Election_Ref: _Indian_Political_Party_Loksabha_Election_Ref;
  _Indian_Political_Party_Member_: _Indian_Political_Party_Member_;
  _Indian_Political_Party_Member_AggregateResult: _Indian_Political_Party_Member_AggregateResult;
  _Indian_Political_Party_Member_Filter: _Indian_Political_Party_Member_Filter;
  _Indian_Political_Party_Member_Order: _Indian_Political_Party_Member_Order;
  _Indian_Political_Party_Member_Patch: _Indian_Political_Party_Member_Patch;
  _Indian_Political_Party_Member_Ref: _Indian_Political_Party_Member_Ref;
  _Indian_Political_Party_Order: _Indian_Political_Party_Order;
  _Indian_Political_Party_Patch: _Indian_Political_Party_Patch;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Filter;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Order;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Patch;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Ref;
  _Indian_Political_Party_Ref: _Indian_Political_Party_Ref;
  _Indian_Politician_: _Indian_Politician_;
  _Indian_Politician_AggregateResult: _Indian_Politician_AggregateResult;
  _Indian_Politician_Filter: _Indian_Politician_Filter;
  _Indian_Politician_Order: _Indian_Politician_Order;
  _Indian_Politician_Patch: _Indian_Politician_Patch;
  _Indian_Politician_Ref: _Indian_Politician_Ref;
  _Indian_Prime_Minister_: _Indian_Prime_Minister_;
  _Indian_Prime_Minister_AggregateResult: _Indian_Prime_Minister_AggregateResult;
  _Indian_Prime_Minister_Filter: _Indian_Prime_Minister_Filter;
  _Indian_Prime_Minister_Order: _Indian_Prime_Minister_Order;
  _Indian_Prime_Minister_Patch: _Indian_Prime_Minister_Patch;
  _Indian_Prime_Minister_Ref: _Indian_Prime_Minister_Ref;
  _Indian_State_Union_Territory_: _Indian_State_Union_Territory_;
  _Indian_State_Union_Territory_AggregateResult: _Indian_State_Union_Territory_AggregateResult;
  _Indian_State_Union_Territory_Filter: _Indian_State_Union_Territory_Filter;
  _Indian_State_Union_Territory_Order: _Indian_State_Union_Territory_Order;
  _Indian_State_Union_Territory_Patch: _Indian_State_Union_Territory_Patch;
  _Indian_State_Union_Territory_Ref: _Indian_State_Union_Territory_Ref;
  _Indian_State_Union_Territory_Region_: _Indian_State_Union_Territory_Region_;
  _Indian_State_Union_Territory_Region_AggregateResult: _Indian_State_Union_Territory_Region_AggregateResult;
  _Indian_State_Union_Territory_Region_Filter: _Indian_State_Union_Territory_Region_Filter;
  _Indian_State_Union_Territory_Region_Order: _Indian_State_Union_Territory_Region_Order;
  _Indian_State_Union_Territory_Region_Patch: _Indian_State_Union_Territory_Region_Patch;
  _Indian_State_Union_Territory_Region_Ref: _Indian_State_Union_Territory_Region_Ref;
  _Indian_Union_Council_Of_Ministers_: _Indian_Union_Council_Of_Ministers_;
  _Indian_Union_Council_Of_Ministers_AggregateResult: _Indian_Union_Council_Of_Ministers_AggregateResult;
  _Indian_Union_Council_Of_Ministers_Filter: _Indian_Union_Council_Of_Ministers_Filter;
  _Indian_Union_Council_Of_Ministers_Order: _Indian_Union_Council_Of_Ministers_Order;
  _Indian_Union_Council_Of_Ministers_Patch: _Indian_Union_Council_Of_Ministers_Patch;
  _Indian_Union_Council_Of_Ministers_Ref: _Indian_Union_Council_Of_Ministers_Ref;
  _Indian_Union_Government_: _Indian_Union_Government_;
  _Indian_Union_Government_AggregateResult: _Indian_Union_Government_AggregateResult;
  _Indian_Union_Government_Cabinet_: _Indian_Union_Government_Cabinet_;
  _Indian_Union_Government_Cabinet_AggregateResult: _Indian_Union_Government_Cabinet_AggregateResult;
  _Indian_Union_Government_Cabinet_Filter: _Indian_Union_Government_Cabinet_Filter;
  _Indian_Union_Government_Cabinet_Minister_: _Indian_Union_Government_Cabinet_Minister_;
  _Indian_Union_Government_Cabinet_Minister_AggregateResult: _Indian_Union_Government_Cabinet_Minister_AggregateResult;
  _Indian_Union_Government_Cabinet_Minister_Filter: _Indian_Union_Government_Cabinet_Minister_Filter;
  _Indian_Union_Government_Cabinet_Minister_Order: _Indian_Union_Government_Cabinet_Minister_Order;
  _Indian_Union_Government_Cabinet_Minister_Patch: _Indian_Union_Government_Cabinet_Minister_Patch;
  _Indian_Union_Government_Cabinet_Minister_Ref: _Indian_Union_Government_Cabinet_Minister_Ref;
  _Indian_Union_Government_Cabinet_Order: _Indian_Union_Government_Cabinet_Order;
  _Indian_Union_Government_Cabinet_Patch: _Indian_Union_Government_Cabinet_Patch;
  _Indian_Union_Government_Cabinet_Ref: _Indian_Union_Government_Cabinet_Ref;
  _Indian_Union_Government_Department_: _Indian_Union_Government_Department_;
  _Indian_Union_Government_Department_AggregateResult: _Indian_Union_Government_Department_AggregateResult;
  _Indian_Union_Government_Department_Filter: _Indian_Union_Government_Department_Filter;
  _Indian_Union_Government_Department_Order: _Indian_Union_Government_Department_Order;
  _Indian_Union_Government_Department_Patch: _Indian_Union_Government_Department_Patch;
  _Indian_Union_Government_Department_Ref: _Indian_Union_Government_Department_Ref;
  _Indian_Union_Government_Filter: _Indian_Union_Government_Filter;
  _Indian_Union_Government_Minister_Of_State_: _Indian_Union_Government_Minister_Of_State_;
  _Indian_Union_Government_Minister_Of_State_AggregateResult: _Indian_Union_Government_Minister_Of_State_AggregateResult;
  _Indian_Union_Government_Minister_Of_State_Filter: _Indian_Union_Government_Minister_Of_State_Filter;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_: _Indian_Union_Government_Minister_Of_State_Independent_Charge_;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult: _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Filter;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Order: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Order;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Patch;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Ref;
  _Indian_Union_Government_Minister_Of_State_Order: _Indian_Union_Government_Minister_Of_State_Order;
  _Indian_Union_Government_Minister_Of_State_Patch: _Indian_Union_Government_Minister_Of_State_Patch;
  _Indian_Union_Government_Minister_Of_State_Ref: _Indian_Union_Government_Minister_Of_State_Ref;
  _Indian_Union_Government_Ministry_: _Indian_Union_Government_Ministry_;
  _Indian_Union_Government_Ministry_AggregateResult: _Indian_Union_Government_Ministry_AggregateResult;
  _Indian_Union_Government_Ministry_Filter: _Indian_Union_Government_Ministry_Filter;
  _Indian_Union_Government_Ministry_Order: _Indian_Union_Government_Ministry_Order;
  _Indian_Union_Government_Ministry_Patch: _Indian_Union_Government_Ministry_Patch;
  _Indian_Union_Government_Ministry_Ref: _Indian_Union_Government_Ministry_Ref;
  _Indian_Union_Government_Order: _Indian_Union_Government_Order;
  _Indian_Union_Government_Patch: _Indian_Union_Government_Patch;
  _Indian_Union_Government_Ref: _Indian_Union_Government_Ref;
  _Indian_Vidhansabha_Constituency_: _Indian_Vidhansabha_Constituency_;
  _Indian_Vidhansabha_Constituency_AggregateResult: _Indian_Vidhansabha_Constituency_AggregateResult;
  _Indian_Vidhansabha_Constituency_Filter: _Indian_Vidhansabha_Constituency_Filter;
  _Indian_Vidhansabha_Constituency_Order: _Indian_Vidhansabha_Constituency_Order;
  _Indian_Vidhansabha_Constituency_Patch: _Indian_Vidhansabha_Constituency_Patch;
  _Indian_Vidhansabha_Constituency_Ref: _Indian_Vidhansabha_Constituency_Ref;
  _Indian_Vidhansabha_Constituency_Region_: _Indian_Vidhansabha_Constituency_Region_;
  _Indian_Vidhansabha_Constituency_Region_AggregateResult: _Indian_Vidhansabha_Constituency_Region_AggregateResult;
  _Indian_Vidhansabha_Constituency_Region_Filter: _Indian_Vidhansabha_Constituency_Region_Filter;
  _Indian_Vidhansabha_Constituency_Region_Order: _Indian_Vidhansabha_Constituency_Region_Order;
  _Indian_Vidhansabha_Constituency_Region_Patch: _Indian_Vidhansabha_Constituency_Region_Patch;
  _Indian_Vidhansabha_Constituency_Region_Ref: _Indian_Vidhansabha_Constituency_Region_Ref;
  _Language_: _Language_;
  _Language_AggregateResult: _Language_AggregateResult;
  _Language_Filter: _Language_Filter;
  _Language_Order: _Language_Order;
  _Language_Patch: _Language_Patch;
  _Language_Ref: _Language_Ref;
  _Language_Script_: _Language_Script_;
  _Language_Script_AggregateResult: _Language_Script_AggregateResult;
  _Language_Script_Filter: _Language_Script_Filter;
  _Language_Script_Order: _Language_Script_Order;
  _Language_Script_Patch: _Language_Script_Patch;
  _Language_Script_Ref: _Language_Script_Ref;
  _Location_Or_Region_Category__exact: _Location_Or_Region_Category__Exact;
  _Name_: _Name_;
  _Name_AggregateResult: _Name_AggregateResult;
  _Name_Filter: _Name_Filter;
  _Name_Order: _Name_Order;
  _Name_Patch: _Name_Patch;
  _Name_Ref: _Name_Ref;
  _Node_Update_: _Node_Update_;
  _Node_Update_AggregateResult: _Node_Update_AggregateResult;
  _Node_Update_Filter: _Node_Update_Filter;
  _Node_Update_Order: _Node_Update_Order;
  _Node_Update_Patch: _Node_Update_Patch;
  _Node_Update_Ref: _Node_Update_Ref;
  _Person_: _Person_;
  _Person_AggregateResult: _Person_AggregateResult;
  _Person_Filter: _Person_Filter;
  _Person_Order: _Person_Order;
  _Person_Patch: _Person_Patch;
  _Person_Ref: _Person_Ref;
  _Public_Policy_Domain_: _Public_Policy_Domain_;
  _Public_Policy_Domain_AggregateResult: _Public_Policy_Domain_AggregateResult;
  _Public_Policy_Domain_Filter: _Public_Policy_Domain_Filter;
  _Public_Policy_Domain_Government_Ministries_Departments_: _Public_Policy_Domain_Government_Ministries_Departments_;
  _Public_Policy_Domain_Government_Ministries_Departments_AggregateResult: _Public_Policy_Domain_Government_Ministries_Departments_AggregateResult;
  _Public_Policy_Domain_Government_Ministries_Departments_Filter: _Public_Policy_Domain_Government_Ministries_Departments_Filter;
  _Public_Policy_Domain_Government_Ministries_Departments_Order: _Public_Policy_Domain_Government_Ministries_Departments_Order;
  _Public_Policy_Domain_Government_Ministries_Departments_Patch: _Public_Policy_Domain_Government_Ministries_Departments_Patch;
  _Public_Policy_Domain_Government_Ministries_Departments_Ref: _Public_Policy_Domain_Government_Ministries_Departments_Ref;
  _Public_Policy_Domain_Order: _Public_Policy_Domain_Order;
  _Public_Policy_Domain_Patch: _Public_Policy_Domain_Patch;
  _Public_Policy_Domain_Ref: _Public_Policy_Domain_Ref;
  _Script_: _Script_;
  _Script_AggregateResult: _Script_AggregateResult;
  _Script_Filter: _Script_Filter;
  _Script_Order: _Script_Order;
  _Script_Patch: _Script_Patch;
  _Script_Ref: _Script_Ref;
};

export type AuthDirectiveArgs = {
  add?: Maybe<AuthRule>;
  delete?: Maybe<AuthRule>;
  password?: Maybe<AuthRule>;
  query?: Maybe<AuthRule>;
  update?: Maybe<AuthRule>;
};

export type AuthDirectiveResolver<Result, Parent, ContextType = any, Args = AuthDirectiveArgs> = DirectiveResolverFn<
  Result,
  Parent,
  ContextType,
  Args
>;

export type CacheControlDirectiveArgs = {
  maxAge: Scalars["Int"]["input"];
};

export type CacheControlDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = CacheControlDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type CascadeDirectiveArgs = {
  fields?: Maybe<Array<Maybe<Scalars["String"]["input"]>>>;
};

export type CascadeDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = CascadeDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type CustomDirectiveArgs = {
  dql?: Maybe<Scalars["String"]["input"]>;
  http?: Maybe<CustomHttp>;
};

export type CustomDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = CustomDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type DefaultDirectiveArgs = {
  add?: Maybe<DgraphDefault>;
  update?: Maybe<DgraphDefault>;
};

export type DefaultDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = DefaultDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type DgraphDirectiveArgs = {
  pred?: Maybe<Scalars["String"]["input"]>;
  type?: Maybe<Scalars["String"]["input"]>;
};

export type DgraphDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = DgraphDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type EmbeddingDirectiveArgs = {};

export type EmbeddingDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = EmbeddingDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type GenerateDirectiveArgs = {
  mutation?: Maybe<GenerateMutationParams>;
  query?: Maybe<GenerateQueryParams>;
  subscription?: Maybe<Scalars["Boolean"]["input"]>;
};

export type GenerateDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = GenerateDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type HasInverseDirectiveArgs = {
  field: Scalars["String"]["input"];
};

export type HasInverseDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = HasInverseDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type IdDirectiveArgs = {
  interface?: Maybe<Scalars["Boolean"]["input"]>;
};

export type IdDirectiveResolver<Result, Parent, ContextType = any, Args = IdDirectiveArgs> = DirectiveResolverFn<
  Result,
  Parent,
  ContextType,
  Args
>;

export type LambdaDirectiveArgs = {};

export type LambdaDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = LambdaDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type LambdaOnMutateDirectiveArgs = {
  add?: Maybe<Scalars["Boolean"]["input"]>;
  delete?: Maybe<Scalars["Boolean"]["input"]>;
  update?: Maybe<Scalars["Boolean"]["input"]>;
};

export type LambdaOnMutateDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = LambdaOnMutateDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type RemoteDirectiveArgs = {};

export type RemoteDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = RemoteDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type RemoteResponseDirectiveArgs = {
  name?: Maybe<Scalars["String"]["input"]>;
};

export type RemoteResponseDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = RemoteResponseDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type SearchDirectiveArgs = {
  by?: Maybe<Array<Scalars["String"]["input"]>>;
};

export type SearchDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = SearchDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type SecretDirectiveArgs = {
  field: Scalars["String"]["input"];
  pred?: Maybe<Scalars["String"]["input"]>;
};

export type SecretDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = SecretDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type WithSubscriptionDirectiveArgs = {};

export type WithSubscriptionDirectiveResolver<
  Result,
  Parent,
  ContextType = any,
  Args = WithSubscriptionDirectiveArgs
> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type AccountResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Account"] = ResolversParentTypes["Account"]
> = {
  accessToken?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  access_token?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  expires_at?: Resolver<Maybe<ResolversTypes["Int64"]>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes["ID"]>, ParentType, ContextType>;
  id_token?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  provider?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  providerAccountId?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  refreshToken?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  refresh_token?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  scope?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  session_state?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  token_type?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType, Partial<AccountUserArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["AccountAggregateResult"] = ResolversParentTypes["AccountAggregateResult"]
> = {
  accessTokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  accessTokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  access_tokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  access_tokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  expires_atAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  expires_atMax?: Resolver<Maybe<ResolversTypes["Int64"]>, ParentType, ContextType>;
  expires_atMin?: Resolver<Maybe<ResolversTypes["Int64"]>, ParentType, ContextType>;
  expires_atSum?: Resolver<Maybe<ResolversTypes["Int64"]>, ParentType, ContextType>;
  id_tokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  id_tokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  providerAccountIdMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  providerAccountIdMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  providerMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  providerMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  refreshTokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  refreshTokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  refresh_tokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  refresh_tokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  scopeMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  scopeMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  session_stateMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  session_stateMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  token_typeMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  token_typeMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  typeMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  typeMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddAccountPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["AddAccountPayload"] = ResolversParentTypes["AddAccountPayload"]
> = {
  account?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Account"]>>>,
    ParentType,
    ContextType,
    Partial<AddAccountPayloadAccountArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddSessionPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["AddSessionPayload"] = ResolversParentTypes["AddSessionPayload"]
> = {
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  session?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Session"]>>>,
    ParentType,
    ContextType,
    Partial<AddSessionPayloadSessionArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddUserPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["AddUserPayload"] = ResolversParentTypes["AddUserPayload"]
> = {
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  user?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["User"]>>>,
    ParentType,
    ContextType,
    Partial<AddUserPayloadUserArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddVerificationTokenPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["AddVerificationTokenPayload"] = ResolversParentTypes["AddVerificationTokenPayload"]
> = {
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  verificationToken?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["VerificationToken"]>>>,
    ParentType,
    ContextType,
    Partial<AddVerificationTokenPayloadVerificationTokenArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Country_Event_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Country_Event_Payload"] = ResolversParentTypes["Add_Country_Event_Payload"]
> = {
  _Country_Event_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Country_Event_Payload_Country_Event_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Country_Government_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Country_Government_Payload"] = ResolversParentTypes["Add_Country_Government_Payload"]
> = {
  _Country_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Country_Government_Payload_Country_Government_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Country_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Country_Payload"] = ResolversParentTypes["Add_Country_Payload"]
> = {
  _Country_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Country_Payload_Country_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Country_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Country_Region_Payload"] = ResolversParentTypes["Add_Country_Region_Payload"]
> = {
  _Country_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Country_Region_Payload_Country_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Date_Time_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Date_Time_Payload"] = ResolversParentTypes["Add_Date_Time_Payload"]
> = {
  _Date_Time_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Date_Time_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Date_Time_Payload_Date_Time_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Geo_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Geo_Payload"] = ResolversParentTypes["Add_Geo_Payload"]
> = {
  _Geo_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Geo_Payload_Geo_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Type_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Type_Payload"] = ResolversParentTypes["Add_Government_System_Type_Payload"]
> = {
  _Government_System_Type_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Type_Payload_Government_System_Type_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Authority_Concentration_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Authority_Concentration_Payload"] = ResolversParentTypes["Add_Government_System_Types_Authority_Concentration_Payload"]
> = {
  _Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Authority_Concentration_Payload_Government_System_Types_Authority_Concentration_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Authority_Distribution_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Authority_Distribution_Payload"] = ResolversParentTypes["Add_Government_System_Types_Authority_Distribution_Payload"]
> = {
  _Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Authority_Distribution_Payload_Government_System_Types_Authority_Distribution_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Authority_Source_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Authority_Source_Payload"] = ResolversParentTypes["Add_Government_System_Types_Authority_Source_Payload"]
> = {
  _Government_System_Types_Authority_Source_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Authority_Source_Payload_Government_System_Types_Authority_Source_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Authority_Status_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Authority_Status_Payload"] = ResolversParentTypes["Add_Government_System_Types_Authority_Status_Payload"]
> = {
  _Government_System_Types_Authority_Status_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Authority_Status_Payload_Government_System_Types_Authority_Status_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Autocratic_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Autocratic_Payload"] = ResolversParentTypes["Add_Government_System_Types_Autocratic_Payload"]
> = {
  _Government_System_Types_Autocratic_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Autocratic_Payload_Government_System_Types_Autocratic_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Democracy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Democracy_Payload"] = ResolversParentTypes["Add_Government_System_Types_Democracy_Payload"]
> = {
  _Government_System_Types_Democracy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Democracy_Payload_Government_System_Types_Democracy_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Economic_System_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Economic_System_Payload"] = ResolversParentTypes["Add_Government_System_Types_Economic_System_Payload"]
> = {
  _Government_System_Types_Economic_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Economic_System_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Economic_System_Payload_Government_System_Types_Economic_System_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Head_Of_State_Or_GovernmentPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload"] = ResolversParentTypes["Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload"]
> = {
  _Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload_Government_System_Types_Head_Of_State_Or_GovernmentArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Monarchy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Monarchy_Payload"] = ResolversParentTypes["Add_Government_System_Types_Monarchy_Payload"]
> = {
  _Government_System_Types_Monarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Monarchy_Payload_Government_System_Types_Monarchy_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Oligarchy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Oligarchy_Payload"] = ResolversParentTypes["Add_Government_System_Types_Oligarchy_Payload"]
> = {
  _Government_System_Types_Oligarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Oligarchy_Payload_Government_System_Types_Oligarchy_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Partisan_Systems_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Partisan_Systems_Payload"] = ResolversParentTypes["Add_Government_System_Types_Partisan_Systems_Payload"]
> = {
  _Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Partisan_Systems_Payload_Government_System_Types_Partisan_Systems_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Government_System_Types_Religion_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Government_System_Types_Religion_Payload"] = ResolversParentTypes["Add_Government_System_Types_Religion_Payload"]
> = {
  _Government_System_Types_Religion_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Religion_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Government_System_Types_Religion_Payload_Government_System_Types_Religion_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Administrative_DivisionsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Administrative_DivisionsPayload"] = ResolversParentTypes["Add_Indian_Administrative_DivisionsPayload"]
> = {
  _Indian_Administrative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Administrative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Administrative_DivisionsPayload_Indian_Administrative_DivisionsArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_District_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_District_Payload"] = ResolversParentTypes["Add_Indian_District_Payload"]
> = {
  _Indian_District_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_District_Payload_Indian_District_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_District_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_District_Region_Payload"] = ResolversParentTypes["Add_Indian_District_Region_Payload"]
> = {
  _Indian_District_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_District_Region_Payload_Indian_District_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Government_Official_Role_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Government_Official_Role_Payload"] = ResolversParentTypes["Add_Indian_Government_Official_Role_Payload"]
> = {
  _Indian_Government_Official_Role_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_Official_Role_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Government_Official_Role_Payload_Indian_Government_Official_Role_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Government_System_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Government_System_Payload"] = ResolversParentTypes["Add_Indian_Government_System_Payload"]
> = {
  _Indian_Government_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_System_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Government_System_Payload_Indian_Government_System_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Legal_Document_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Legal_Document_Payload"] = ResolversParentTypes["Add_Indian_Legal_Document_Payload"]
> = {
  _Indian_Legal_Document_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legal_Document_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Legal_Document_Payload_Indian_Legal_Document_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Legislative_DivisionsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Legislative_DivisionsPayload"] = ResolversParentTypes["Add_Indian_Legislative_DivisionsPayload"]
> = {
  _Indian_Legislative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legislative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Legislative_DivisionsPayload_Indian_Legislative_DivisionsArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Constituency_Election_Candidate_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Candidate_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Candidate_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Constituency_Election_Candidate_Payload_Indian_Loksabha_Constituency_Election_Candidate_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Constituency_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Constituency_Election_Payload_Indian_Loksabha_Constituency_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Constituency_Election_Result_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Result_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Constituency_Election_Result_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Constituency_Election_Result_Payload_Indian_Loksabha_Constituency_Election_Result_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Constituency_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Constituency_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Constituency_Payload"]
> = {
  _Indian_Loksabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Constituency_Payload_Indian_Loksabha_Constituency_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Constituency_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Constituency_Region_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Constituency_Region_Payload"]
> = {
  _Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Constituency_Region_Payload_Indian_Loksabha_Constituency_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Election_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Election_Payload"]
> = {
  _Indian_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Election_Payload_Indian_Loksabha_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Election_Phase_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Election_Phase_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Election_Phase_Payload"]
> = {
  _Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Election_Phase_Payload_Indian_Loksabha_Election_Phase_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Election_Result_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Election_Result_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Election_Result_Payload"]
> = {
  _Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Election_Result_Payload_Indian_Loksabha_Election_Result_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Member_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Member_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Member_Payload"]
> = {
  _Indian_Loksabha_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Member_Payload_Indian_Loksabha_Member_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Payload"]
> = {
  _Indian_Loksabha_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Payload_Indian_Loksabha_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Loksabha_Session_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Loksabha_Session_Payload"] = ResolversParentTypes["Add_Indian_Loksabha_Session_Payload"]
> = {
  _Indian_Loksabha_Session_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Session_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Loksabha_Session_Payload_Indian_Loksabha_Session_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Political_Party_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Political_Party_Loksabha_Election_Payload"] = ResolversParentTypes["Add_Indian_Political_Party_Loksabha_Election_Payload"]
> = {
  _Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Political_Party_Loksabha_Election_Payload_Indian_Political_Party_Loksabha_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Political_Party_Member_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Political_Party_Member_Payload"] = ResolversParentTypes["Add_Indian_Political_Party_Member_Payload"]
> = {
  _Indian_Political_Party_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Political_Party_Member_Payload_Indian_Political_Party_Member_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Political_Party_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Political_Party_Payload"] = ResolversParentTypes["Add_Indian_Political_Party_Payload"]
> = {
  _Indian_Political_Party_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Political_Party_Payload_Indian_Political_Party_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"] = ResolversParentTypes["Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"]
> = {
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Politician_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Politician_Payload"] = ResolversParentTypes["Add_Indian_Politician_Payload"]
> = {
  _Indian_Politician_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Politician_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Politician_Payload_Indian_Politician_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Prime_Minister_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Prime_Minister_Payload"] = ResolversParentTypes["Add_Indian_Prime_Minister_Payload"]
> = {
  _Indian_Prime_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Prime_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Prime_Minister_Payload_Indian_Prime_Minister_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_State_Union_Territory_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_State_Union_Territory_Payload"] = ResolversParentTypes["Add_Indian_State_Union_Territory_Payload"]
> = {
  _Indian_State_Union_Territory_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_State_Union_Territory_Payload_Indian_State_Union_Territory_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_State_Union_Territory_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_State_Union_Territory_Region_Payload"] = ResolversParentTypes["Add_Indian_State_Union_Territory_Region_Payload"]
> = {
  _Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_State_Union_Territory_Region_Payload_Indian_State_Union_Territory_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Council_Of_Ministers_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Council_Of_Ministers_Payload"] = ResolversParentTypes["Add_Indian_Union_Council_Of_Ministers_Payload"]
> = {
  _Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Council_Of_Ministers_Payload_Indian_Union_Council_Of_Ministers_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_Cabinet_Minister_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Cabinet_Minister_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Cabinet_Minister_Payload"]
> = {
  _Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Cabinet_Minister_Payload_Indian_Union_Government_Cabinet_Minister_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_Cabinet_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Cabinet_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Cabinet_Payload"]
> = {
  _Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Cabinet_Payload_Indian_Union_Government_Cabinet_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_Department_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Department_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Department_Payload"]
> = {
  _Indian_Union_Government_Department_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Department_Payload_Indian_Union_Government_Department_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"]
> = {
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_Minister_Of_State_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Minister_Of_State_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Minister_Of_State_Payload"]
> = {
  _Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Minister_Of_State_Payload_Indian_Union_Government_Minister_Of_State_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_Ministry_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Ministry_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Ministry_Payload"]
> = {
  _Indian_Union_Government_Ministry_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Ministry_Payload_Indian_Union_Government_Ministry_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Union_Government_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Union_Government_Payload"] = ResolversParentTypes["Add_Indian_Union_Government_Payload"]
> = {
  _Indian_Union_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Union_Government_Payload_Indian_Union_Government_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Vidhansabha_Constituency_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Vidhansabha_Constituency_Payload"] = ResolversParentTypes["Add_Indian_Vidhansabha_Constituency_Payload"]
> = {
  _Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Vidhansabha_Constituency_Payload_Indian_Vidhansabha_Constituency_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Indian_Vidhansabha_Constituency_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Indian_Vidhansabha_Constituency_Region_Payload"] = ResolversParentTypes["Add_Indian_Vidhansabha_Constituency_Region_Payload"]
> = {
  _Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Indian_Vidhansabha_Constituency_Region_Payload_Indian_Vidhansabha_Constituency_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Language_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Language_Payload"] = ResolversParentTypes["Add_Language_Payload"]
> = {
  _Language_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Language_Payload_Language_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Language_Script_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Language_Script_Payload"] = ResolversParentTypes["Add_Language_Script_Payload"]
> = {
  _Language_Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Language_Script_Payload_Language_Script_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Name_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Name_Payload"] = ResolversParentTypes["Add_Name_Payload"]
> = {
  _Name_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Name_Payload_Name_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Node_Update_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Node_Update_Payload"] = ResolversParentTypes["Add_Node_Update_Payload"]
> = {
  _Node_Update_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Node_Update_Payload_Node_Update_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Person_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Person_Payload"] = ResolversParentTypes["Add_Person_Payload"]
> = {
  _Person_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Person_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Person_Payload_Person_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Public_Policy_Domain_Government_Ministries_Departments_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Public_Policy_Domain_Government_Ministries_Departments_Payload"] = ResolversParentTypes["Add_Public_Policy_Domain_Government_Ministries_Departments_Payload"]
> = {
  _Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Public_Policy_Domain_Government_Ministries_Departments_Payload_Public_Policy_Domain_Government_Ministries_Departments_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Public_Policy_Domain_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Public_Policy_Domain_Payload"] = ResolversParentTypes["Add_Public_Policy_Domain_Payload"]
> = {
  _Public_Policy_Domain_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Public_Policy_Domain_Payload_Public_Policy_Domain_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Add_Script_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Add_Script_Payload"] = ResolversParentTypes["Add_Script_Payload"]
> = {
  _Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<Add_Script_Payload_Script_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes["DateTime"], any> {
  name: "DateTime";
}

export type DeleteAccountPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["DeleteAccountPayload"] = ResolversParentTypes["DeleteAccountPayload"]
> = {
  account?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Account"]>>>,
    ParentType,
    ContextType,
    Partial<DeleteAccountPayloadAccountArgs>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteSessionPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["DeleteSessionPayload"] = ResolversParentTypes["DeleteSessionPayload"]
> = {
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  session?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Session"]>>>,
    ParentType,
    ContextType,
    Partial<DeleteSessionPayloadSessionArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteUserPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["DeleteUserPayload"] = ResolversParentTypes["DeleteUserPayload"]
> = {
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  user?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["User"]>>>,
    ParentType,
    ContextType,
    Partial<DeleteUserPayloadUserArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteVerificationTokenPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["DeleteVerificationTokenPayload"] = ResolversParentTypes["DeleteVerificationTokenPayload"]
> = {
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  verificationToken?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["VerificationToken"]>>>,
    ParentType,
    ContextType,
    Partial<DeleteVerificationTokenPayloadVerificationTokenArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Country_Event_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Country_Event_Payload"] = ResolversParentTypes["Delete_Country_Event_Payload"]
> = {
  _Country_Event_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Country_Event_Payload_Country_Event_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Country_Government_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Country_Government_Payload"] = ResolversParentTypes["Delete_Country_Government_Payload"]
> = {
  _Country_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Country_Government_Payload_Country_Government_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Country_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Country_Payload"] = ResolversParentTypes["Delete_Country_Payload"]
> = {
  _Country_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Country_Payload_Country_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Country_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Country_Region_Payload"] = ResolversParentTypes["Delete_Country_Region_Payload"]
> = {
  _Country_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Country_Region_Payload_Country_Region_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Date_Time_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Date_Time_Payload"] = ResolversParentTypes["Delete_Date_Time_Payload"]
> = {
  _Date_Time_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Date_Time_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Date_Time_Payload_Date_Time_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Geo_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Geo_Payload"] = ResolversParentTypes["Delete_Geo_Payload"]
> = {
  _Geo_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Geo_Payload_Geo_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Type_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Type_Payload"] = ResolversParentTypes["Delete_Government_System_Type_Payload"]
> = {
  _Government_System_Type_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Type_Payload_Government_System_Type_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Authority_Concentration_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Authority_Concentration_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Authority_Concentration_Payload"]
> = {
  _Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Authority_Concentration_Payload_Government_System_Types_Authority_Concentration_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Authority_Distribution_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Authority_Distribution_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Authority_Distribution_Payload"]
> = {
  _Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Authority_Distribution_Payload_Government_System_Types_Authority_Distribution_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Authority_Source_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Authority_Source_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Authority_Source_Payload"]
> = {
  _Government_System_Types_Authority_Source_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Authority_Source_Payload_Government_System_Types_Authority_Source_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Authority_Status_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Authority_Status_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Authority_Status_Payload"]
> = {
  _Government_System_Types_Authority_Status_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Authority_Status_Payload_Government_System_Types_Authority_Status_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Autocratic_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Autocratic_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Autocratic_Payload"]
> = {
  _Government_System_Types_Autocratic_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Autocratic_Payload_Government_System_Types_Autocratic_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Democracy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Democracy_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Democracy_Payload"]
> = {
  _Government_System_Types_Democracy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Democracy_Payload_Government_System_Types_Democracy_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Economic_System_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Economic_System_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Economic_System_Payload"]
> = {
  _Government_System_Types_Economic_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Economic_System_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Economic_System_Payload_Government_System_Types_Economic_System_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload"] = ResolversParentTypes["Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload"]
> = {
  _Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload_Government_System_Types_Head_Of_State_Or_GovernmentArgs>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Monarchy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Monarchy_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Monarchy_Payload"]
> = {
  _Government_System_Types_Monarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Monarchy_Payload_Government_System_Types_Monarchy_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Oligarchy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Oligarchy_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Oligarchy_Payload"]
> = {
  _Government_System_Types_Oligarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Oligarchy_Payload_Government_System_Types_Oligarchy_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Partisan_Systems_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Partisan_Systems_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Partisan_Systems_Payload"]
> = {
  _Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Partisan_Systems_Payload_Government_System_Types_Partisan_Systems_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Government_System_Types_Religion_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Government_System_Types_Religion_Payload"] = ResolversParentTypes["Delete_Government_System_Types_Religion_Payload"]
> = {
  _Government_System_Types_Religion_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Religion_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Government_System_Types_Religion_Payload_Government_System_Types_Religion_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Administrative_DivisionsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Administrative_DivisionsPayload"] = ResolversParentTypes["Delete_Indian_Administrative_DivisionsPayload"]
> = {
  _Indian_Administrative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Administrative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Administrative_DivisionsPayload_Indian_Administrative_DivisionsArgs>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_District_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_District_Payload"] = ResolversParentTypes["Delete_Indian_District_Payload"]
> = {
  _Indian_District_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_District_Payload_Indian_District_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_District_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_District_Region_Payload"] = ResolversParentTypes["Delete_Indian_District_Region_Payload"]
> = {
  _Indian_District_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_District_Region_Payload_Indian_District_Region_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Government_Official_Role_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Government_Official_Role_Payload"] = ResolversParentTypes["Delete_Indian_Government_Official_Role_Payload"]
> = {
  _Indian_Government_Official_Role_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_Official_Role_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Government_Official_Role_Payload_Indian_Government_Official_Role_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Government_System_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Government_System_Payload"] = ResolversParentTypes["Delete_Indian_Government_System_Payload"]
> = {
  _Indian_Government_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_System_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Government_System_Payload_Indian_Government_System_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Legal_Document_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Legal_Document_Payload"] = ResolversParentTypes["Delete_Indian_Legal_Document_Payload"]
> = {
  _Indian_Legal_Document_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legal_Document_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Legal_Document_Payload_Indian_Legal_Document_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Legislative_DivisionsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Legislative_DivisionsPayload"] = ResolversParentTypes["Delete_Indian_Legislative_DivisionsPayload"]
> = {
  _Indian_Legislative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legislative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Legislative_DivisionsPayload_Indian_Legislative_DivisionsArgs>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Candidate_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload_Indian_Loksabha_Constituency_Election_Candidate_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Constituency_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Constituency_Election_Payload_Indian_Loksabha_Constituency_Election_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Constituency_Election_Result_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Result_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Election_Result_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Constituency_Election_Result_Payload_Indian_Loksabha_Constituency_Election_Result_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Constituency_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Payload"]
> = {
  _Indian_Loksabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Constituency_Payload_Indian_Loksabha_Constituency_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Constituency_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Region_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Constituency_Region_Payload"]
> = {
  _Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Constituency_Region_Payload_Indian_Loksabha_Constituency_Region_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Election_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Election_Payload"]
> = {
  _Indian_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Election_Payload_Indian_Loksabha_Election_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Election_Phase_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Election_Phase_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Election_Phase_Payload"]
> = {
  _Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Election_Phase_Payload_Indian_Loksabha_Election_Phase_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Election_Result_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Election_Result_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Election_Result_Payload"]
> = {
  _Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Election_Result_Payload_Indian_Loksabha_Election_Result_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Member_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Member_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Member_Payload"]
> = {
  _Indian_Loksabha_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Member_Payload_Indian_Loksabha_Member_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Payload"]
> = {
  _Indian_Loksabha_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Payload_Indian_Loksabha_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Loksabha_Session_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Loksabha_Session_Payload"] = ResolversParentTypes["Delete_Indian_Loksabha_Session_Payload"]
> = {
  _Indian_Loksabha_Session_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Session_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Loksabha_Session_Payload_Indian_Loksabha_Session_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Political_Party_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Political_Party_Loksabha_Election_Payload"] = ResolversParentTypes["Delete_Indian_Political_Party_Loksabha_Election_Payload"]
> = {
  _Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Political_Party_Loksabha_Election_Payload_Indian_Political_Party_Loksabha_Election_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Political_Party_Member_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Political_Party_Member_Payload"] = ResolversParentTypes["Delete_Indian_Political_Party_Member_Payload"]
> = {
  _Indian_Political_Party_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Political_Party_Member_Payload_Indian_Political_Party_Member_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Political_Party_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Political_Party_Payload"] = ResolversParentTypes["Delete_Indian_Political_Party_Payload"]
> = {
  _Indian_Political_Party_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Political_Party_Payload_Indian_Political_Party_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"] = ResolversParentTypes["Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"]
> = {
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Politician_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Politician_Payload"] = ResolversParentTypes["Delete_Indian_Politician_Payload"]
> = {
  _Indian_Politician_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Politician_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Politician_Payload_Indian_Politician_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Prime_Minister_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Prime_Minister_Payload"] = ResolversParentTypes["Delete_Indian_Prime_Minister_Payload"]
> = {
  _Indian_Prime_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Prime_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Prime_Minister_Payload_Indian_Prime_Minister_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_State_Union_Territory_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_State_Union_Territory_Payload"] = ResolversParentTypes["Delete_Indian_State_Union_Territory_Payload"]
> = {
  _Indian_State_Union_Territory_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_State_Union_Territory_Payload_Indian_State_Union_Territory_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_State_Union_Territory_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_State_Union_Territory_Region_Payload"] = ResolversParentTypes["Delete_Indian_State_Union_Territory_Region_Payload"]
> = {
  _Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_State_Union_Territory_Region_Payload_Indian_State_Union_Territory_Region_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Council_Of_Ministers_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Council_Of_Ministers_Payload"] = ResolversParentTypes["Delete_Indian_Union_Council_Of_Ministers_Payload"]
> = {
  _Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Council_Of_Ministers_Payload_Indian_Union_Council_Of_Ministers_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_Cabinet_Minister_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Cabinet_Minister_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Cabinet_Minister_Payload"]
> = {
  _Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Cabinet_Minister_Payload_Indian_Union_Government_Cabinet_Minister_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_Cabinet_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Cabinet_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Cabinet_Payload"]
> = {
  _Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Cabinet_Payload_Indian_Union_Government_Cabinet_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_Department_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Department_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Department_Payload"]
> = {
  _Indian_Union_Government_Department_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Department_Payload_Indian_Union_Government_Department_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"]
> = {
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_Minister_Of_State_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Minister_Of_State_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Minister_Of_State_Payload"]
> = {
  _Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Minister_Of_State_Payload_Indian_Union_Government_Minister_Of_State_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_Ministry_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Ministry_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Ministry_Payload"]
> = {
  _Indian_Union_Government_Ministry_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Ministry_Payload_Indian_Union_Government_Ministry_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Union_Government_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Union_Government_Payload"] = ResolversParentTypes["Delete_Indian_Union_Government_Payload"]
> = {
  _Indian_Union_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Union_Government_Payload_Indian_Union_Government_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Vidhansabha_Constituency_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Vidhansabha_Constituency_Payload"] = ResolversParentTypes["Delete_Indian_Vidhansabha_Constituency_Payload"]
> = {
  _Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Vidhansabha_Constituency_Payload_Indian_Vidhansabha_Constituency_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Indian_Vidhansabha_Constituency_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Indian_Vidhansabha_Constituency_Region_Payload"] = ResolversParentTypes["Delete_Indian_Vidhansabha_Constituency_Region_Payload"]
> = {
  _Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Indian_Vidhansabha_Constituency_Region_Payload_Indian_Vidhansabha_Constituency_Region_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Language_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Language_Payload"] = ResolversParentTypes["Delete_Language_Payload"]
> = {
  _Language_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Language_Payload_Language_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Language_Script_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Language_Script_Payload"] = ResolversParentTypes["Delete_Language_Script_Payload"]
> = {
  _Language_Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Language_Script_Payload_Language_Script_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Name_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Name_Payload"] = ResolversParentTypes["Delete_Name_Payload"]
> = {
  _Name_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Name_Payload_Name_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Node_Update_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Node_Update_Payload"] = ResolversParentTypes["Delete_Node_Update_Payload"]
> = {
  _Node_Update_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Node_Update_Payload_Node_Update_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Person_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Person_Payload"] = ResolversParentTypes["Delete_Person_Payload"]
> = {
  _Person_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Person_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Person_Payload_Person_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Public_Policy_Domain_Government_Ministries_Departments_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload"] = ResolversParentTypes["Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload"]
> = {
  _Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload_Public_Policy_Domain_Government_Ministries_Departments_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Public_Policy_Domain_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Public_Policy_Domain_Payload"] = ResolversParentTypes["Delete_Public_Policy_Domain_Payload"]
> = {
  _Public_Policy_Domain_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Public_Policy_Domain_Payload_Public_Policy_Domain_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Delete_Script_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Delete_Script_Payload"] = ResolversParentTypes["Delete_Script_Payload"]
> = {
  _Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<Delete_Script_Payload_Script_Args>
  >;
  msg?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface Int64ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes["Int64"], any> {
  name: "Int64";
}

export type MultiPolygonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["MultiPolygon"] = ResolversParentTypes["MultiPolygon"]
> = {
  polygons?: Resolver<Array<ResolversTypes["Polygon"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Mutation"] = ResolversParentTypes["Mutation"]
> = {
  addAccount?: Resolver<
    Maybe<ResolversTypes["AddAccountPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAddAccountArgs, "input">
  >;
  addSession?: Resolver<
    Maybe<ResolversTypes["AddSessionPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAddSessionArgs, "input">
  >;
  addUser?: Resolver<
    Maybe<ResolversTypes["AddUserPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAddUserArgs, "input">
  >;
  addVerificationToken?: Resolver<
    Maybe<ResolversTypes["AddVerificationTokenPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAddVerificationTokenArgs, "input">
  >;
  add_Country_?: Resolver<
    Maybe<ResolversTypes["Add_Country_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Country_Args, "input">
  >;
  add_Country_Event_?: Resolver<
    Maybe<ResolversTypes["Add_Country_Event_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Country_Event_Args, "input">
  >;
  add_Country_Government_?: Resolver<
    Maybe<ResolversTypes["Add_Country_Government_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Country_Government_Args, "input">
  >;
  add_Country_Region_?: Resolver<
    Maybe<ResolversTypes["Add_Country_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Country_Region_Args, "input">
  >;
  add_Date_Time_?: Resolver<
    Maybe<ResolversTypes["Add_Date_Time_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Date_Time_Args, "input">
  >;
  add_Geo_?: Resolver<
    Maybe<ResolversTypes["Add_Geo_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Geo_Args, "input">
  >;
  add_Government_System_Type_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Type_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Type_Args, "input">
  >;
  add_Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Authority_Concentration_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Authority_Concentration_Args, "input">
  >;
  add_Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Authority_Distribution_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Authority_Distribution_Args, "input">
  >;
  add_Government_System_Types_Authority_Source_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Authority_Source_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Authority_Source_Args, "input">
  >;
  add_Government_System_Types_Authority_Status_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Authority_Status_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Authority_Status_Args, "input">
  >;
  add_Government_System_Types_Autocratic_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Autocratic_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Autocratic_Args, "input">
  >;
  add_Government_System_Types_Democracy_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Democracy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Democracy_Args, "input">
  >;
  add_Government_System_Types_Economic_System_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Economic_System_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Economic_System_Args, "input">
  >;
  add_Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Head_Of_State_Or_GovernmentArgs, "input">
  >;
  add_Government_System_Types_Monarchy_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Monarchy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Monarchy_Args, "input">
  >;
  add_Government_System_Types_Oligarchy_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Oligarchy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Oligarchy_Args, "input">
  >;
  add_Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Partisan_Systems_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Partisan_Systems_Args, "input">
  >;
  add_Government_System_Types_Religion_?: Resolver<
    Maybe<ResolversTypes["Add_Government_System_Types_Religion_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Government_System_Types_Religion_Args, "input">
  >;
  add_Indian_Administrative_Divisions?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Administrative_DivisionsPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Administrative_DivisionsArgs, "input">
  >;
  add_Indian_District_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_District_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_District_Args, "input">
  >;
  add_Indian_District_Region_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_District_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_District_Region_Args, "input">
  >;
  add_Indian_Government_Official_Role_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Government_Official_Role_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Government_Official_Role_Args, "input">
  >;
  add_Indian_Government_System_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Government_System_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Government_System_Args, "input">
  >;
  add_Indian_Legal_Document_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Legal_Document_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Legal_Document_Args, "input">
  >;
  add_Indian_Legislative_Divisions?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Legislative_DivisionsPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Legislative_DivisionsArgs, "input">
  >;
  add_Indian_Loksabha_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Args, "input">
  >;
  add_Indian_Loksabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Constituency_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Constituency_Args, "input">
  >;
  add_Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Constituency_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Constituency_Election_Args, "input">
  >;
  add_Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Constituency_Election_Candidate_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Constituency_Election_Candidate_Args, "input">
  >;
  add_Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Constituency_Election_Result_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Constituency_Election_Result_Args, "input">
  >;
  add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args, "input">
  >;
  add_Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Constituency_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Constituency_Region_Args, "input">
  >;
  add_Indian_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Election_Args, "input">
  >;
  add_Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Election_Phase_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Election_Phase_Args, "input">
  >;
  add_Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Election_Result_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Election_Result_Args, "input">
  >;
  add_Indian_Loksabha_Member_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Member_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Member_Args, "input">
  >;
  add_Indian_Loksabha_Session_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Loksabha_Session_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Loksabha_Session_Args, "input">
  >;
  add_Indian_Political_Party_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Political_Party_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Political_Party_Args, "input">
  >;
  add_Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Political_Party_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Political_Party_Loksabha_Election_Args, "input">
  >;
  add_Indian_Political_Party_Member_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Political_Party_Member_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Political_Party_Member_Args, "input">
  >;
  add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args, "input">
  >;
  add_Indian_Politician_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Politician_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Politician_Args, "input">
  >;
  add_Indian_Prime_Minister_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Prime_Minister_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Prime_Minister_Args, "input">
  >;
  add_Indian_State_Union_Territory_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_State_Union_Territory_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_State_Union_Territory_Args, "input">
  >;
  add_Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_State_Union_Territory_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_State_Union_Territory_Region_Args, "input">
  >;
  add_Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Council_Of_Ministers_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Council_Of_Ministers_Args, "input">
  >;
  add_Indian_Union_Government_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Args, "input">
  >;
  add_Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Cabinet_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Cabinet_Args, "input">
  >;
  add_Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Cabinet_Minister_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Cabinet_Minister_Args, "input">
  >;
  add_Indian_Union_Government_Department_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Department_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Department_Args, "input">
  >;
  add_Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Minister_Of_State_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Minister_Of_State_Args, "input">
  >;
  add_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args, "input">
  >;
  add_Indian_Union_Government_Ministry_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Union_Government_Ministry_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Union_Government_Ministry_Args, "input">
  >;
  add_Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Vidhansabha_Constituency_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Vidhansabha_Constituency_Args, "input">
  >;
  add_Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["Add_Indian_Vidhansabha_Constituency_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Indian_Vidhansabha_Constituency_Region_Args, "input">
  >;
  add_Language_?: Resolver<
    Maybe<ResolversTypes["Add_Language_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Language_Args, "input">
  >;
  add_Language_Script_?: Resolver<
    Maybe<ResolversTypes["Add_Language_Script_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Language_Script_Args, "input">
  >;
  add_Name_?: Resolver<
    Maybe<ResolversTypes["Add_Name_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Name_Args, "input">
  >;
  add_Node_Update_?: Resolver<
    Maybe<ResolversTypes["Add_Node_Update_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Node_Update_Args, "input">
  >;
  add_Person_?: Resolver<
    Maybe<ResolversTypes["Add_Person_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Person_Args, "input">
  >;
  add_Public_Policy_Domain_?: Resolver<
    Maybe<ResolversTypes["Add_Public_Policy_Domain_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Public_Policy_Domain_Args, "input">
  >;
  add_Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<ResolversTypes["Add_Public_Policy_Domain_Government_Ministries_Departments_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Public_Policy_Domain_Government_Ministries_Departments_Args, "input">
  >;
  add_Script_?: Resolver<
    Maybe<ResolversTypes["Add_Script_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationAdd_Script_Args, "input">
  >;
  deleteAccount?: Resolver<
    Maybe<ResolversTypes["DeleteAccountPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteAccountArgs, "filter">
  >;
  deleteSession?: Resolver<
    Maybe<ResolversTypes["DeleteSessionPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteSessionArgs, "filter">
  >;
  deleteUser?: Resolver<
    Maybe<ResolversTypes["DeleteUserPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteUserArgs, "filter">
  >;
  deleteVerificationToken?: Resolver<
    Maybe<ResolversTypes["DeleteVerificationTokenPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteVerificationTokenArgs, "filter">
  >;
  delete_Country_?: Resolver<
    Maybe<ResolversTypes["Delete_Country_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Country_Args, "filter">
  >;
  delete_Country_Event_?: Resolver<
    Maybe<ResolversTypes["Delete_Country_Event_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Country_Event_Args, "filter">
  >;
  delete_Country_Government_?: Resolver<
    Maybe<ResolversTypes["Delete_Country_Government_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Country_Government_Args, "filter">
  >;
  delete_Country_Region_?: Resolver<
    Maybe<ResolversTypes["Delete_Country_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Country_Region_Args, "filter">
  >;
  delete_Date_Time_?: Resolver<
    Maybe<ResolversTypes["Delete_Date_Time_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Date_Time_Args, "filter">
  >;
  delete_Geo_?: Resolver<
    Maybe<ResolversTypes["Delete_Geo_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Geo_Args, "filter">
  >;
  delete_Government_System_Type_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Type_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Type_Args, "filter">
  >;
  delete_Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Authority_Concentration_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Authority_Concentration_Args, "filter">
  >;
  delete_Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Authority_Distribution_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Authority_Distribution_Args, "filter">
  >;
  delete_Government_System_Types_Authority_Source_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Authority_Source_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Authority_Source_Args, "filter">
  >;
  delete_Government_System_Types_Authority_Status_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Authority_Status_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Authority_Status_Args, "filter">
  >;
  delete_Government_System_Types_Autocratic_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Autocratic_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Autocratic_Args, "filter">
  >;
  delete_Government_System_Types_Democracy_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Democracy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Democracy_Args, "filter">
  >;
  delete_Government_System_Types_Economic_System_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Economic_System_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Economic_System_Args, "filter">
  >;
  delete_Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Head_Of_State_Or_GovernmentArgs, "filter">
  >;
  delete_Government_System_Types_Monarchy_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Monarchy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Monarchy_Args, "filter">
  >;
  delete_Government_System_Types_Oligarchy_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Oligarchy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Oligarchy_Args, "filter">
  >;
  delete_Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Partisan_Systems_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Partisan_Systems_Args, "filter">
  >;
  delete_Government_System_Types_Religion_?: Resolver<
    Maybe<ResolversTypes["Delete_Government_System_Types_Religion_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Government_System_Types_Religion_Args, "filter">
  >;
  delete_Indian_Administrative_Divisions?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Administrative_DivisionsPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Administrative_DivisionsArgs, "filter">
  >;
  delete_Indian_District_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_District_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_District_Args, "filter">
  >;
  delete_Indian_District_Region_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_District_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_District_Region_Args, "filter">
  >;
  delete_Indian_Government_Official_Role_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Government_Official_Role_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Government_Official_Role_Args, "filter">
  >;
  delete_Indian_Government_System_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Government_System_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Government_System_Args, "filter">
  >;
  delete_Indian_Legal_Document_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Legal_Document_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Legal_Document_Args, "filter">
  >;
  delete_Indian_Legislative_Divisions?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Legislative_DivisionsPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Legislative_DivisionsArgs, "filter">
  >;
  delete_Indian_Loksabha_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Args, "filter">
  >;
  delete_Indian_Loksabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Constituency_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Constituency_Args, "filter">
  >;
  delete_Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Constituency_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Constituency_Election_Args, "filter">
  >;
  delete_Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Constituency_Election_Candidate_Args, "filter">
  >;
  delete_Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Constituency_Election_Result_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Constituency_Election_Result_Args, "filter">
  >;
  delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args, "filter">
  >;
  delete_Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Constituency_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Constituency_Region_Args, "filter">
  >;
  delete_Indian_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Election_Args, "filter">
  >;
  delete_Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Election_Phase_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Election_Phase_Args, "filter">
  >;
  delete_Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Election_Result_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Election_Result_Args, "filter">
  >;
  delete_Indian_Loksabha_Member_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Member_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Member_Args, "filter">
  >;
  delete_Indian_Loksabha_Session_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Loksabha_Session_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Loksabha_Session_Args, "filter">
  >;
  delete_Indian_Political_Party_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Political_Party_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Political_Party_Args, "filter">
  >;
  delete_Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Political_Party_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Political_Party_Loksabha_Election_Args, "filter">
  >;
  delete_Indian_Political_Party_Member_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Political_Party_Member_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Political_Party_Member_Args, "filter">
  >;
  delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args, "filter">
  >;
  delete_Indian_Politician_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Politician_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Politician_Args, "filter">
  >;
  delete_Indian_Prime_Minister_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Prime_Minister_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Prime_Minister_Args, "filter">
  >;
  delete_Indian_State_Union_Territory_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_State_Union_Territory_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_State_Union_Territory_Args, "filter">
  >;
  delete_Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_State_Union_Territory_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_State_Union_Territory_Region_Args, "filter">
  >;
  delete_Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Council_Of_Ministers_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Council_Of_Ministers_Args, "filter">
  >;
  delete_Indian_Union_Government_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Args, "filter">
  >;
  delete_Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Cabinet_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Cabinet_Args, "filter">
  >;
  delete_Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Cabinet_Minister_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Cabinet_Minister_Args, "filter">
  >;
  delete_Indian_Union_Government_Department_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Department_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Department_Args, "filter">
  >;
  delete_Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Minister_Of_State_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Minister_Of_State_Args, "filter">
  >;
  delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args, "filter">
  >;
  delete_Indian_Union_Government_Ministry_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Union_Government_Ministry_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Union_Government_Ministry_Args, "filter">
  >;
  delete_Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Vidhansabha_Constituency_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Vidhansabha_Constituency_Args, "filter">
  >;
  delete_Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["Delete_Indian_Vidhansabha_Constituency_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Indian_Vidhansabha_Constituency_Region_Args, "filter">
  >;
  delete_Language_?: Resolver<
    Maybe<ResolversTypes["Delete_Language_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Language_Args, "filter">
  >;
  delete_Language_Script_?: Resolver<
    Maybe<ResolversTypes["Delete_Language_Script_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Language_Script_Args, "filter">
  >;
  delete_Name_?: Resolver<
    Maybe<ResolversTypes["Delete_Name_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Name_Args, "filter">
  >;
  delete_Node_Update_?: Resolver<
    Maybe<ResolversTypes["Delete_Node_Update_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Node_Update_Args, "filter">
  >;
  delete_Person_?: Resolver<
    Maybe<ResolversTypes["Delete_Person_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Person_Args, "filter">
  >;
  delete_Public_Policy_Domain_?: Resolver<
    Maybe<ResolversTypes["Delete_Public_Policy_Domain_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Public_Policy_Domain_Args, "filter">
  >;
  delete_Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<ResolversTypes["Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Public_Policy_Domain_Government_Ministries_Departments_Args, "filter">
  >;
  delete_Script_?: Resolver<
    Maybe<ResolversTypes["Delete_Script_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationDelete_Script_Args, "filter">
  >;
  updateAccount?: Resolver<
    Maybe<ResolversTypes["UpdateAccountPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateAccountArgs, "input">
  >;
  updateSession?: Resolver<
    Maybe<ResolversTypes["UpdateSessionPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateSessionArgs, "input">
  >;
  updateUser?: Resolver<
    Maybe<ResolversTypes["UpdateUserPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateUserArgs, "input">
  >;
  updateVerificationToken?: Resolver<
    Maybe<ResolversTypes["UpdateVerificationTokenPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateVerificationTokenArgs, "input">
  >;
  update_Country_?: Resolver<
    Maybe<ResolversTypes["Update_Country_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Country_Args, "input">
  >;
  update_Country_Event_?: Resolver<
    Maybe<ResolversTypes["Update_Country_Event_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Country_Event_Args, "input">
  >;
  update_Country_Government_?: Resolver<
    Maybe<ResolversTypes["Update_Country_Government_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Country_Government_Args, "input">
  >;
  update_Country_Region_?: Resolver<
    Maybe<ResolversTypes["Update_Country_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Country_Region_Args, "input">
  >;
  update_Date_Time_?: Resolver<
    Maybe<ResolversTypes["Update_Date_Time_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Date_Time_Args, "input">
  >;
  update_Geo_?: Resolver<
    Maybe<ResolversTypes["Update_Geo_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Geo_Args, "input">
  >;
  update_Government_System_Type_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Type_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Type_Args, "input">
  >;
  update_Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Authority_Concentration_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Authority_Concentration_Args, "input">
  >;
  update_Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Authority_Distribution_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Authority_Distribution_Args, "input">
  >;
  update_Government_System_Types_Authority_Source_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Authority_Source_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Authority_Source_Args, "input">
  >;
  update_Government_System_Types_Authority_Status_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Authority_Status_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Authority_Status_Args, "input">
  >;
  update_Government_System_Types_Autocratic_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Autocratic_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Autocratic_Args, "input">
  >;
  update_Government_System_Types_Democracy_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Democracy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Democracy_Args, "input">
  >;
  update_Government_System_Types_Economic_System_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Economic_System_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Economic_System_Args, "input">
  >;
  update_Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Head_Of_State_Or_GovernmentArgs, "input">
  >;
  update_Government_System_Types_Monarchy_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Monarchy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Monarchy_Args, "input">
  >;
  update_Government_System_Types_Oligarchy_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Oligarchy_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Oligarchy_Args, "input">
  >;
  update_Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Partisan_Systems_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Partisan_Systems_Args, "input">
  >;
  update_Government_System_Types_Religion_?: Resolver<
    Maybe<ResolversTypes["Update_Government_System_Types_Religion_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Government_System_Types_Religion_Args, "input">
  >;
  update_Indian_Administrative_Divisions?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Administrative_DivisionsPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Administrative_DivisionsArgs, "input">
  >;
  update_Indian_District_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_District_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_District_Args, "input">
  >;
  update_Indian_District_Region_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_District_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_District_Region_Args, "input">
  >;
  update_Indian_Government_Official_Role_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Government_Official_Role_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Government_Official_Role_Args, "input">
  >;
  update_Indian_Government_System_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Government_System_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Government_System_Args, "input">
  >;
  update_Indian_Legal_Document_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Legal_Document_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Legal_Document_Args, "input">
  >;
  update_Indian_Legislative_Divisions?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Legislative_DivisionsPayload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Legislative_DivisionsArgs, "input">
  >;
  update_Indian_Loksabha_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Args, "input">
  >;
  update_Indian_Loksabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Constituency_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Constituency_Args, "input">
  >;
  update_Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Constituency_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Constituency_Election_Args, "input">
  >;
  update_Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Constituency_Election_Candidate_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Constituency_Election_Candidate_Args, "input">
  >;
  update_Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Constituency_Election_Result_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Constituency_Election_Result_Args, "input">
  >;
  update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args, "input">
  >;
  update_Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Constituency_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Constituency_Region_Args, "input">
  >;
  update_Indian_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Election_Args, "input">
  >;
  update_Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Election_Phase_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Election_Phase_Args, "input">
  >;
  update_Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Election_Result_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Election_Result_Args, "input">
  >;
  update_Indian_Loksabha_Member_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Member_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Member_Args, "input">
  >;
  update_Indian_Loksabha_Session_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Loksabha_Session_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Loksabha_Session_Args, "input">
  >;
  update_Indian_Political_Party_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Political_Party_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Political_Party_Args, "input">
  >;
  update_Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Political_Party_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Political_Party_Loksabha_Election_Args, "input">
  >;
  update_Indian_Political_Party_Member_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Political_Party_Member_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Political_Party_Member_Args, "input">
  >;
  update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args, "input">
  >;
  update_Indian_Politician_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Politician_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Politician_Args, "input">
  >;
  update_Indian_Prime_Minister_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Prime_Minister_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Prime_Minister_Args, "input">
  >;
  update_Indian_State_Union_Territory_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_State_Union_Territory_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_State_Union_Territory_Args, "input">
  >;
  update_Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_State_Union_Territory_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_State_Union_Territory_Region_Args, "input">
  >;
  update_Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Council_Of_Ministers_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Council_Of_Ministers_Args, "input">
  >;
  update_Indian_Union_Government_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Args, "input">
  >;
  update_Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Cabinet_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Cabinet_Args, "input">
  >;
  update_Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Cabinet_Minister_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Cabinet_Minister_Args, "input">
  >;
  update_Indian_Union_Government_Department_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Department_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Department_Args, "input">
  >;
  update_Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Minister_Of_State_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Minister_Of_State_Args, "input">
  >;
  update_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args, "input">
  >;
  update_Indian_Union_Government_Ministry_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Union_Government_Ministry_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Union_Government_Ministry_Args, "input">
  >;
  update_Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Vidhansabha_Constituency_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Vidhansabha_Constituency_Args, "input">
  >;
  update_Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["Update_Indian_Vidhansabha_Constituency_Region_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Indian_Vidhansabha_Constituency_Region_Args, "input">
  >;
  update_Language_?: Resolver<
    Maybe<ResolversTypes["Update_Language_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Language_Args, "input">
  >;
  update_Language_Script_?: Resolver<
    Maybe<ResolversTypes["Update_Language_Script_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Language_Script_Args, "input">
  >;
  update_Name_?: Resolver<
    Maybe<ResolversTypes["Update_Name_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Name_Args, "input">
  >;
  update_Node_Update_?: Resolver<
    Maybe<ResolversTypes["Update_Node_Update_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Node_Update_Args, "input">
  >;
  update_Person_?: Resolver<
    Maybe<ResolversTypes["Update_Person_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Person_Args, "input">
  >;
  update_Public_Policy_Domain_?: Resolver<
    Maybe<ResolversTypes["Update_Public_Policy_Domain_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Public_Policy_Domain_Args, "input">
  >;
  update_Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<ResolversTypes["Update_Public_Policy_Domain_Government_Ministries_Departments_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Public_Policy_Domain_Government_Ministries_Departments_Args, "input">
  >;
  update_Script_?: Resolver<
    Maybe<ResolversTypes["Update_Script_Payload"]>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdate_Script_Args, "input">
  >;
};

export type PointResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Point"] = ResolversParentTypes["Point"]
> = {
  latitude?: Resolver<ResolversTypes["Float"], ParentType, ContextType>;
  longitude?: Resolver<ResolversTypes["Float"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PointListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["PointList"] = ResolversParentTypes["PointList"]
> = {
  points?: Resolver<Array<ResolversTypes["Point"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PolygonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Polygon"] = ResolversParentTypes["Polygon"]
> = {
  coordinates?: Resolver<Array<ResolversTypes["PointList"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
> = {
  aggregateAccount?: Resolver<
    Maybe<ResolversTypes["AccountAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregateAccountArgs>
  >;
  aggregateSession?: Resolver<
    Maybe<ResolversTypes["SessionAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregateSessionArgs>
  >;
  aggregateUser?: Resolver<
    Maybe<ResolversTypes["UserAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregateUserArgs>
  >;
  aggregateVerificationToken?: Resolver<
    Maybe<ResolversTypes["VerificationTokenAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregateVerificationTokenArgs>
  >;
  aggregate_Country_?: Resolver<
    Maybe<ResolversTypes["_Country_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Country_Args>
  >;
  aggregate_Country_Event_?: Resolver<
    Maybe<ResolversTypes["_Country_Event_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Country_Event_Args>
  >;
  aggregate_Country_Government_?: Resolver<
    Maybe<ResolversTypes["_Country_Government_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Country_Government_Args>
  >;
  aggregate_Country_Region_?: Resolver<
    Maybe<ResolversTypes["_Country_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Country_Region_Args>
  >;
  aggregate_Date_Time_?: Resolver<
    Maybe<ResolversTypes["_Date_Time_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Date_Time_Args>
  >;
  aggregate_Geo_?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Geo_Args>
  >;
  aggregate_Government_System_Type_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Type_Args>
  >;
  aggregate_Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Authority_Concentration_Args>
  >;
  aggregate_Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Authority_Distribution_Args>
  >;
  aggregate_Government_System_Types_Authority_Source_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Source_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Authority_Source_Args>
  >;
  aggregate_Government_System_Types_Authority_Status_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Status_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Authority_Status_Args>
  >;
  aggregate_Government_System_Types_Autocratic_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Autocratic_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Autocratic_Args>
  >;
  aggregate_Government_System_Types_Democracy_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Democracy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Democracy_Args>
  >;
  aggregate_Government_System_Types_Economic_System_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Economic_System_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Economic_System_Args>
  >;
  aggregate_Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Head_Of_State_Or_GovernmentArgs>
  >;
  aggregate_Government_System_Types_Monarchy_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Monarchy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Monarchy_Args>
  >;
  aggregate_Government_System_Types_Oligarchy_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Oligarchy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Oligarchy_Args>
  >;
  aggregate_Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Partisan_Systems_Args>
  >;
  aggregate_Government_System_Types_Religion_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Religion_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Government_System_Types_Religion_Args>
  >;
  aggregate_Indian_Administrative_Divisions?: Resolver<
    Maybe<ResolversTypes["_Indian_Administrative_DivisionsAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Administrative_DivisionsArgs>
  >;
  aggregate_Indian_District_?: Resolver<
    Maybe<ResolversTypes["_Indian_District_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_District_Args>
  >;
  aggregate_Indian_District_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_District_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_District_Region_Args>
  >;
  aggregate_Indian_Government_Official_Role_?: Resolver<
    Maybe<ResolversTypes["_Indian_Government_Official_Role_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Government_Official_Role_Args>
  >;
  aggregate_Indian_Government_System_?: Resolver<
    Maybe<ResolversTypes["_Indian_Government_System_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Government_System_Args>
  >;
  aggregate_Indian_Legal_Document_?: Resolver<
    Maybe<ResolversTypes["_Indian_Legal_Document_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Legal_Document_Args>
  >;
  aggregate_Indian_Legislative_Divisions?: Resolver<
    Maybe<ResolversTypes["_Indian_Legislative_DivisionsAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Legislative_DivisionsArgs>
  >;
  aggregate_Indian_Loksabha_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Args>
  >;
  aggregate_Indian_Loksabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Constituency_Args>
  >;
  aggregate_Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Constituency_Election_Args>
  >;
  aggregate_Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Constituency_Election_Candidate_Args>
  >;
  aggregate_Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Constituency_Election_Result_Args>
  >;
  aggregate_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args>
  >;
  aggregate_Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Constituency_Region_Args>
  >;
  aggregate_Indian_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Election_Args>
  >;
  aggregate_Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Election_Phase_Args>
  >;
  aggregate_Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Election_Result_Args>
  >;
  aggregate_Indian_Loksabha_Member_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Member_Args>
  >;
  aggregate_Indian_Loksabha_Session_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Session_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Loksabha_Session_Args>
  >;
  aggregate_Indian_Political_Party_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Political_Party_Args>
  >;
  aggregate_Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Political_Party_Loksabha_Election_Args>
  >;
  aggregate_Indian_Political_Party_Member_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Political_Party_Member_Args>
  >;
  aggregate_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args>
  >;
  aggregate_Indian_Politician_?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Politician_Args>
  >;
  aggregate_Indian_Prime_Minister_?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Prime_Minister_Args>
  >;
  aggregate_Indian_State_Union_Territory_?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_State_Union_Territory_Args>
  >;
  aggregate_Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_State_Union_Territory_Region_Args>
  >;
  aggregate_Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Council_Of_Ministers_Args>
  >;
  aggregate_Indian_Union_Government_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Args>
  >;
  aggregate_Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Cabinet_Args>
  >;
  aggregate_Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Cabinet_Minister_Args>
  >;
  aggregate_Indian_Union_Government_Department_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Department_Args>
  >;
  aggregate_Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Minister_Of_State_Args>
  >;
  aggregate_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args>
  >;
  aggregate_Indian_Union_Government_Ministry_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Union_Government_Ministry_Args>
  >;
  aggregate_Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Vidhansabha_Constituency_Args>
  >;
  aggregate_Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Indian_Vidhansabha_Constituency_Region_Args>
  >;
  aggregate_Language_?: Resolver<
    Maybe<ResolversTypes["_Language_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Language_Args>
  >;
  aggregate_Language_Script_?: Resolver<
    Maybe<ResolversTypes["_Language_Script_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Language_Script_Args>
  >;
  aggregate_Name_?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Name_Args>
  >;
  aggregate_Node_Update_?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Node_Update_Args>
  >;
  aggregate_Person_?: Resolver<
    Maybe<ResolversTypes["_Person_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Person_Args>
  >;
  aggregate_Public_Policy_Domain_?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Public_Policy_Domain_Args>
  >;
  aggregate_Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Public_Policy_Domain_Government_Ministries_Departments_Args>
  >;
  aggregate_Script_?: Resolver<
    Maybe<ResolversTypes["_Script_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<QueryAggregate_Script_Args>
  >;
  getAccount?: Resolver<
    Maybe<ResolversTypes["Account"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGetAccountArgs, "id">
  >;
  getSession?: Resolver<
    Maybe<ResolversTypes["Session"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSessionArgs, "id">
  >;
  getUser?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType, Partial<QueryGetUserArgs>>;
  getVerificationToken?: Resolver<
    Maybe<ResolversTypes["VerificationToken"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGetVerificationTokenArgs, "id">
  >;
  get_Country_?: Resolver<Maybe<ResolversTypes["_Country_"]>, ParentType, ContextType, Partial<QueryGet_Country_Args>>;
  get_Country_Event_?: Resolver<
    Maybe<ResolversTypes["_Country_Event_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Country_Event_Args, "id">
  >;
  get_Country_Government_?: Resolver<
    Maybe<ResolversTypes["_Country_Government_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Country_Government_Args>
  >;
  get_Country_Region_?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Country_Region_Args, "id">
  >;
  get_Date_Time_?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Date_Time_Args, "id">
  >;
  get_Geo_?: Resolver<Maybe<ResolversTypes["_Geo_"]>, ParentType, ContextType, RequireFields<QueryGet_Geo_Args, "id">>;
  get_Government_System_Type_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Type_Args>
  >;
  get_Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Authority_Concentration_Args>
  >;
  get_Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Authority_Distribution_Args>
  >;
  get_Government_System_Types_Authority_Source_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Authority_Source_Args>
  >;
  get_Government_System_Types_Authority_Status_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Authority_Status_Args>
  >;
  get_Government_System_Types_Autocratic_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Autocratic_Args>
  >;
  get_Government_System_Types_Democracy_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Democracy_Args>
  >;
  get_Government_System_Types_Economic_System_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Economic_System_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Economic_System_Args>
  >;
  get_Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Head_Of_State_Or_GovernmentArgs>
  >;
  get_Government_System_Types_Monarchy_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Monarchy_Args>
  >;
  get_Government_System_Types_Oligarchy_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Oligarchy_Args>
  >;
  get_Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Partisan_Systems_Args>
  >;
  get_Government_System_Types_Religion_?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Religion_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Government_System_Types_Religion_Args>
  >;
  get_Indian_Administrative_Divisions?: Resolver<
    Maybe<ResolversTypes["_Indian_Administrative_Divisions"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Administrative_DivisionsArgs, "id">
  >;
  get_Indian_District_?: Resolver<
    Maybe<ResolversTypes["_Indian_District_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_District_Args>
  >;
  get_Indian_District_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_District_Region_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_District_Region_Args, "id">
  >;
  get_Indian_Government_Official_Role_?: Resolver<
    Maybe<ResolversTypes["_Indian_Government_Official_Role_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Government_Official_Role_Args>
  >;
  get_Indian_Government_System_?: Resolver<
    Maybe<ResolversTypes["_Indian_Government_System_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Government_System_Args, "id">
  >;
  get_Indian_Legal_Document_?: Resolver<
    Maybe<ResolversTypes["_Indian_Legal_Document_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Legal_Document_Args>
  >;
  get_Indian_Legislative_Divisions?: Resolver<
    Maybe<ResolversTypes["_Indian_Legislative_Divisions"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Legislative_DivisionsArgs, "id">
  >;
  get_Indian_Loksabha_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Args, "id">
  >;
  get_Indian_Loksabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Loksabha_Constituency_Args>
  >;
  get_Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Constituency_Election_Args, "id">
  >;
  get_Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Constituency_Election_Candidate_Args, "id">
  >;
  get_Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Constituency_Election_Result_Args, "id">
  >;
  get_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args, "id">
  >;
  get_Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Constituency_Region_Args, "id">
  >;
  get_Indian_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Loksabha_Election_Args>
  >;
  get_Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Election_Phase_Args, "id">
  >;
  get_Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Election_Result_Args, "id">
  >;
  get_Indian_Loksabha_Member_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Member_Args, "id">
  >;
  get_Indian_Loksabha_Session_?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Session_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Loksabha_Session_Args, "id">
  >;
  get_Indian_Political_Party_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Political_Party_Args>
  >;
  get_Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Political_Party_Loksabha_Election_Args, "id">
  >;
  get_Indian_Political_Party_Member_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Political_Party_Member_Args, "id">
  >;
  get_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args, "id">
  >;
  get_Indian_Politician_?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Politician_Args, "id">
  >;
  get_Indian_Prime_Minister_?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Prime_Minister_Args, "id">
  >;
  get_Indian_State_Union_Territory_?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_State_Union_Territory_Args>
  >;
  get_Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_State_Union_Territory_Region_Args, "id">
  >;
  get_Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Union_Council_Of_Ministers_Args, "id">
  >;
  get_Indian_Union_Government_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Union_Government_Args, "id">
  >;
  get_Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Union_Government_Cabinet_Args, "id">
  >;
  get_Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Union_Government_Cabinet_Minister_Args, "id">
  >;
  get_Indian_Union_Government_Department_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Union_Government_Department_Args>
  >;
  get_Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Union_Government_Minister_Of_State_Args, "id">
  >;
  get_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args, "id">
  >;
  get_Indian_Union_Government_Ministry_?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Union_Government_Ministry_Args>
  >;
  get_Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Indian_Vidhansabha_Constituency_Args>
  >;
  get_Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Indian_Vidhansabha_Constituency_Region_Args, "id">
  >;
  get_Language_?: Resolver<
    Maybe<ResolversTypes["_Language_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Language_Args>
  >;
  get_Language_Script_?: Resolver<
    Maybe<ResolversTypes["_Language_Script_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Language_Script_Args>
  >;
  get_Name_?: Resolver<Maybe<ResolversTypes["_Name_"]>, ParentType, ContextType, Partial<QueryGet_Name_Args>>;
  get_Node_Update_?: Resolver<
    Maybe<ResolversTypes["_Node_Update_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Node_Update_Args, "id">
  >;
  get_Person_?: Resolver<
    Maybe<ResolversTypes["_Person_"]>,
    ParentType,
    ContextType,
    RequireFields<QueryGet_Person_Args, "id">
  >;
  get_Public_Policy_Domain_?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Public_Policy_Domain_Args>
  >;
  get_Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>,
    ParentType,
    ContextType,
    Partial<QueryGet_Public_Policy_Domain_Government_Ministries_Departments_Args>
  >;
  get_Script_?: Resolver<Maybe<ResolversTypes["_Script_"]>, ParentType, ContextType, Partial<QueryGet_Script_Args>>;
  queryAccount?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Account"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQueryAccountArgs>
  >;
  querySession?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Session"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuerySessionArgs>
  >;
  queryUser?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["User"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQueryUserArgs>
  >;
  queryVerificationToken?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["VerificationToken"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQueryVerificationTokenArgs>
  >;
  query_Country_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Country_Args>
  >;
  query_Country_Event_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Country_Event_Args>
  >;
  query_Country_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Country_Government_Args>
  >;
  query_Country_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Country_Region_Args>
  >;
  query_Date_Time_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Date_Time_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Date_Time_Args>
  >;
  query_Geo_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Geo_Args>
  >;
  query_Government_System_Type_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Type_Args>
  >;
  query_Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Authority_Concentration_Args>
  >;
  query_Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Authority_Distribution_Args>
  >;
  query_Government_System_Types_Authority_Source_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Authority_Source_Args>
  >;
  query_Government_System_Types_Authority_Status_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Authority_Status_Args>
  >;
  query_Government_System_Types_Autocratic_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Autocratic_Args>
  >;
  query_Government_System_Types_Democracy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Democracy_Args>
  >;
  query_Government_System_Types_Economic_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Economic_System_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Economic_System_Args>
  >;
  query_Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Head_Of_State_Or_GovernmentArgs>
  >;
  query_Government_System_Types_Monarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Monarchy_Args>
  >;
  query_Government_System_Types_Oligarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Oligarchy_Args>
  >;
  query_Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Partisan_Systems_Args>
  >;
  query_Government_System_Types_Religion_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Religion_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Government_System_Types_Religion_Args>
  >;
  query_Indian_Administrative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Administrative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Administrative_DivisionsArgs>
  >;
  query_Indian_District_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_District_Args>
  >;
  query_Indian_District_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_District_Region_Args>
  >;
  query_Indian_Government_Official_Role_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_Official_Role_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Government_Official_Role_Args>
  >;
  query_Indian_Government_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_System_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Government_System_Args>
  >;
  query_Indian_Legal_Document_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legal_Document_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Legal_Document_Args>
  >;
  query_Indian_Legislative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legislative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Legislative_DivisionsArgs>
  >;
  query_Indian_Loksabha_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Args>
  >;
  query_Indian_Loksabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Constituency_Args>
  >;
  query_Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Constituency_Election_Args>
  >;
  query_Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Constituency_Election_Candidate_Args>
  >;
  query_Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Constituency_Election_Result_Args>
  >;
  query_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args>
  >;
  query_Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Constituency_Region_Args>
  >;
  query_Indian_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Election_Args>
  >;
  query_Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Election_Phase_Args>
  >;
  query_Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Election_Result_Args>
  >;
  query_Indian_Loksabha_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Member_Args>
  >;
  query_Indian_Loksabha_Session_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Session_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Loksabha_Session_Args>
  >;
  query_Indian_Political_Party_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Political_Party_Args>
  >;
  query_Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Political_Party_Loksabha_Election_Args>
  >;
  query_Indian_Political_Party_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Political_Party_Member_Args>
  >;
  query_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args>
  >;
  query_Indian_Politician_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Politician_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Politician_Args>
  >;
  query_Indian_Prime_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Prime_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Prime_Minister_Args>
  >;
  query_Indian_State_Union_Territory_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_State_Union_Territory_Args>
  >;
  query_Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_State_Union_Territory_Region_Args>
  >;
  query_Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Council_Of_Ministers_Args>
  >;
  query_Indian_Union_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Args>
  >;
  query_Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Cabinet_Args>
  >;
  query_Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Cabinet_Minister_Args>
  >;
  query_Indian_Union_Government_Department_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Department_Args>
  >;
  query_Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Minister_Of_State_Args>
  >;
  query_Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args>
  >;
  query_Indian_Union_Government_Ministry_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Union_Government_Ministry_Args>
  >;
  query_Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Vidhansabha_Constituency_Args>
  >;
  query_Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Indian_Vidhansabha_Constituency_Region_Args>
  >;
  query_Language_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Language_Args>
  >;
  query_Language_Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Language_Script_Args>
  >;
  query_Name_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Name_Args>
  >;
  query_Node_Update_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Node_Update_Args>
  >;
  query_Person_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Person_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Person_Args>
  >;
  query_Public_Policy_Domain_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Public_Policy_Domain_Args>
  >;
  query_Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Public_Policy_Domain_Government_Ministries_Departments_Args>
  >;
  query_Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<QueryQuery_Script_Args>
  >;
};

export type SessionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Session"] = ResolversParentTypes["Session"]
> = {
  expires?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes["ID"]>, ParentType, ContextType>;
  sessionToken?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType, Partial<SessionUserArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SessionAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["SessionAggregateResult"] = ResolversParentTypes["SessionAggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  expiresMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  expiresMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  sessionTokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  sessionTokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateAccountPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UpdateAccountPayload"] = ResolversParentTypes["UpdateAccountPayload"]
> = {
  account?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Account"]>>>,
    ParentType,
    ContextType,
    Partial<UpdateAccountPayloadAccountArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateSessionPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UpdateSessionPayload"] = ResolversParentTypes["UpdateSessionPayload"]
> = {
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  session?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Session"]>>>,
    ParentType,
    ContextType,
    Partial<UpdateSessionPayloadSessionArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateUserPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UpdateUserPayload"] = ResolversParentTypes["UpdateUserPayload"]
> = {
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  user?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["User"]>>>,
    ParentType,
    ContextType,
    Partial<UpdateUserPayloadUserArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateVerificationTokenPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UpdateVerificationTokenPayload"] = ResolversParentTypes["UpdateVerificationTokenPayload"]
> = {
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  verificationToken?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["VerificationToken"]>>>,
    ParentType,
    ContextType,
    Partial<UpdateVerificationTokenPayloadVerificationTokenArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Country_Event_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Country_Event_Payload"] = ResolversParentTypes["Update_Country_Event_Payload"]
> = {
  _Country_Event_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Country_Event_Payload_Country_Event_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Country_Government_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Country_Government_Payload"] = ResolversParentTypes["Update_Country_Government_Payload"]
> = {
  _Country_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Country_Government_Payload_Country_Government_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Country_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Country_Payload"] = ResolversParentTypes["Update_Country_Payload"]
> = {
  _Country_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Country_Payload_Country_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Country_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Country_Region_Payload"] = ResolversParentTypes["Update_Country_Region_Payload"]
> = {
  _Country_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Country_Region_Payload_Country_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Date_Time_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Date_Time_Payload"] = ResolversParentTypes["Update_Date_Time_Payload"]
> = {
  _Date_Time_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Date_Time_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Date_Time_Payload_Date_Time_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Geo_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Geo_Payload"] = ResolversParentTypes["Update_Geo_Payload"]
> = {
  _Geo_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Geo_Payload_Geo_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Type_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Type_Payload"] = ResolversParentTypes["Update_Government_System_Type_Payload"]
> = {
  _Government_System_Type_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Type_Payload_Government_System_Type_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Authority_Concentration_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Authority_Concentration_Payload"] = ResolversParentTypes["Update_Government_System_Types_Authority_Concentration_Payload"]
> = {
  _Government_System_Types_Authority_Concentration_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Authority_Concentration_Payload_Government_System_Types_Authority_Concentration_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Authority_Distribution_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Authority_Distribution_Payload"] = ResolversParentTypes["Update_Government_System_Types_Authority_Distribution_Payload"]
> = {
  _Government_System_Types_Authority_Distribution_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Authority_Distribution_Payload_Government_System_Types_Authority_Distribution_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Authority_Source_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Authority_Source_Payload"] = ResolversParentTypes["Update_Government_System_Types_Authority_Source_Payload"]
> = {
  _Government_System_Types_Authority_Source_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Authority_Source_Payload_Government_System_Types_Authority_Source_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Authority_Status_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Authority_Status_Payload"] = ResolversParentTypes["Update_Government_System_Types_Authority_Status_Payload"]
> = {
  _Government_System_Types_Authority_Status_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Authority_Status_Payload_Government_System_Types_Authority_Status_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Autocratic_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Autocratic_Payload"] = ResolversParentTypes["Update_Government_System_Types_Autocratic_Payload"]
> = {
  _Government_System_Types_Autocratic_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Autocratic_Payload_Government_System_Types_Autocratic_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Democracy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Democracy_Payload"] = ResolversParentTypes["Update_Government_System_Types_Democracy_Payload"]
> = {
  _Government_System_Types_Democracy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Democracy_Payload_Government_System_Types_Democracy_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Economic_System_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Economic_System_Payload"] = ResolversParentTypes["Update_Government_System_Types_Economic_System_Payload"]
> = {
  _Government_System_Types_Economic_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Economic_System_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Economic_System_Payload_Government_System_Types_Economic_System_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Head_Of_State_Or_GovernmentPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload"] = ResolversParentTypes["Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload"]
> = {
  _Government_System_Types_Head_Of_State_Or_Government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload_Government_System_Types_Head_Of_State_Or_GovernmentArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Monarchy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Monarchy_Payload"] = ResolversParentTypes["Update_Government_System_Types_Monarchy_Payload"]
> = {
  _Government_System_Types_Monarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Monarchy_Payload_Government_System_Types_Monarchy_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Oligarchy_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Oligarchy_Payload"] = ResolversParentTypes["Update_Government_System_Types_Oligarchy_Payload"]
> = {
  _Government_System_Types_Oligarchy_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Oligarchy_Payload_Government_System_Types_Oligarchy_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Partisan_Systems_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Partisan_Systems_Payload"] = ResolversParentTypes["Update_Government_System_Types_Partisan_Systems_Payload"]
> = {
  _Government_System_Types_Partisan_Systems_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Partisan_Systems_Payload_Government_System_Types_Partisan_Systems_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Government_System_Types_Religion_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Government_System_Types_Religion_Payload"] = ResolversParentTypes["Update_Government_System_Types_Religion_Payload"]
> = {
  _Government_System_Types_Religion_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Religion_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Government_System_Types_Religion_Payload_Government_System_Types_Religion_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Administrative_DivisionsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Administrative_DivisionsPayload"] = ResolversParentTypes["Update_Indian_Administrative_DivisionsPayload"]
> = {
  _Indian_Administrative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Administrative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Administrative_DivisionsPayload_Indian_Administrative_DivisionsArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_District_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_District_Payload"] = ResolversParentTypes["Update_Indian_District_Payload"]
> = {
  _Indian_District_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_District_Payload_Indian_District_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_District_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_District_Region_Payload"] = ResolversParentTypes["Update_Indian_District_Region_Payload"]
> = {
  _Indian_District_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_District_Region_Payload_Indian_District_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Government_Official_Role_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Government_Official_Role_Payload"] = ResolversParentTypes["Update_Indian_Government_Official_Role_Payload"]
> = {
  _Indian_Government_Official_Role_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_Official_Role_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Government_Official_Role_Payload_Indian_Government_Official_Role_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Government_System_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Government_System_Payload"] = ResolversParentTypes["Update_Indian_Government_System_Payload"]
> = {
  _Indian_Government_System_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_System_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Government_System_Payload_Indian_Government_System_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Legal_Document_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Legal_Document_Payload"] = ResolversParentTypes["Update_Indian_Legal_Document_Payload"]
> = {
  _Indian_Legal_Document_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legal_Document_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Legal_Document_Payload_Indian_Legal_Document_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Legislative_DivisionsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Legislative_DivisionsPayload"] = ResolversParentTypes["Update_Indian_Legislative_DivisionsPayload"]
> = {
  _Indian_Legislative_Divisions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legislative_Divisions"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Legislative_DivisionsPayload_Indian_Legislative_DivisionsArgs>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Constituency_Election_Candidate_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Candidate_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Candidate_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Candidate_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Constituency_Election_Candidate_Payload_Indian_Loksabha_Constituency_Election_Candidate_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Constituency_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Constituency_Election_Payload_Indian_Loksabha_Constituency_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Constituency_Election_Result_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Result_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Constituency_Election_Result_Payload"]
> = {
  _Indian_Loksabha_Constituency_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Constituency_Election_Result_Payload_Indian_Loksabha_Constituency_Election_Result_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Constituency_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Constituency_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Constituency_Payload"]
> = {
  _Indian_Loksabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Constituency_Payload_Indian_Loksabha_Constituency_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Constituency_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Constituency_Region_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Constituency_Region_Payload"]
> = {
  _Indian_Loksabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Constituency_Region_Payload_Indian_Loksabha_Constituency_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Election_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Election_Payload"]
> = {
  _Indian_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Election_Payload_Indian_Loksabha_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Election_Phase_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Election_Phase_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Election_Phase_Payload"]
> = {
  _Indian_Loksabha_Election_Phase_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Election_Phase_Payload_Indian_Loksabha_Election_Phase_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Election_Result_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Election_Result_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Election_Result_Payload"]
> = {
  _Indian_Loksabha_Election_Result_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Election_Result_Payload_Indian_Loksabha_Election_Result_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Member_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Member_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Member_Payload"]
> = {
  _Indian_Loksabha_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Member_Payload_Indian_Loksabha_Member_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Payload"]
> = {
  _Indian_Loksabha_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Payload_Indian_Loksabha_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Loksabha_Session_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Loksabha_Session_Payload"] = ResolversParentTypes["Update_Indian_Loksabha_Session_Payload"]
> = {
  _Indian_Loksabha_Session_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Session_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Loksabha_Session_Payload_Indian_Loksabha_Session_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Political_Party_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Political_Party_Loksabha_Election_Payload"] = ResolversParentTypes["Update_Indian_Political_Party_Loksabha_Election_Payload"]
> = {
  _Indian_Political_Party_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Political_Party_Loksabha_Election_Payload_Indian_Political_Party_Loksabha_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Political_Party_Member_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Political_Party_Member_Payload"] = ResolversParentTypes["Update_Indian_Political_Party_Member_Payload"]
> = {
  _Indian_Political_Party_Member_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Political_Party_Member_Payload_Indian_Political_Party_Member_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Political_Party_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Political_Party_Payload"] = ResolversParentTypes["Update_Indian_Political_Party_Payload"]
> = {
  _Indian_Political_Party_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Political_Party_Payload_Indian_Political_Party_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"] = ResolversParentTypes["Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload"]
> = {
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Politician_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Politician_Payload"] = ResolversParentTypes["Update_Indian_Politician_Payload"]
> = {
  _Indian_Politician_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Politician_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Politician_Payload_Indian_Politician_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Prime_Minister_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Prime_Minister_Payload"] = ResolversParentTypes["Update_Indian_Prime_Minister_Payload"]
> = {
  _Indian_Prime_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Prime_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Prime_Minister_Payload_Indian_Prime_Minister_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_State_Union_Territory_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_State_Union_Territory_Payload"] = ResolversParentTypes["Update_Indian_State_Union_Territory_Payload"]
> = {
  _Indian_State_Union_Territory_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_State_Union_Territory_Payload_Indian_State_Union_Territory_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_State_Union_Territory_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_State_Union_Territory_Region_Payload"] = ResolversParentTypes["Update_Indian_State_Union_Territory_Region_Payload"]
> = {
  _Indian_State_Union_Territory_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_State_Union_Territory_Region_Payload_Indian_State_Union_Territory_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Council_Of_Ministers_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Council_Of_Ministers_Payload"] = ResolversParentTypes["Update_Indian_Union_Council_Of_Ministers_Payload"]
> = {
  _Indian_Union_Council_Of_Ministers_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Council_Of_Ministers_Payload_Indian_Union_Council_Of_Ministers_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_Cabinet_Minister_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Cabinet_Minister_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Cabinet_Minister_Payload"]
> = {
  _Indian_Union_Government_Cabinet_Minister_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Cabinet_Minister_Payload_Indian_Union_Government_Cabinet_Minister_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_Cabinet_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Cabinet_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Cabinet_Payload"]
> = {
  _Indian_Union_Government_Cabinet_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Cabinet_Payload_Indian_Union_Government_Cabinet_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_Department_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Department_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Department_Payload"]
> = {
  _Indian_Union_Government_Department_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Department_Payload_Indian_Union_Government_Department_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload"]
> = {
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload_Indian_Union_Government_Minister_Of_State_Independent_Charge_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_Minister_Of_State_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Minister_Of_State_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Minister_Of_State_Payload"]
> = {
  _Indian_Union_Government_Minister_Of_State_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Minister_Of_State_Payload_Indian_Union_Government_Minister_Of_State_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_Ministry_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Ministry_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Ministry_Payload"]
> = {
  _Indian_Union_Government_Ministry_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Ministry_Payload_Indian_Union_Government_Ministry_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Union_Government_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Union_Government_Payload"] = ResolversParentTypes["Update_Indian_Union_Government_Payload"]
> = {
  _Indian_Union_Government_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Union_Government_Payload_Indian_Union_Government_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Vidhansabha_Constituency_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Vidhansabha_Constituency_Payload"] = ResolversParentTypes["Update_Indian_Vidhansabha_Constituency_Payload"]
> = {
  _Indian_Vidhansabha_Constituency_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Vidhansabha_Constituency_Payload_Indian_Vidhansabha_Constituency_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Indian_Vidhansabha_Constituency_Region_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Indian_Vidhansabha_Constituency_Region_Payload"] = ResolversParentTypes["Update_Indian_Vidhansabha_Constituency_Region_Payload"]
> = {
  _Indian_Vidhansabha_Constituency_Region_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Indian_Vidhansabha_Constituency_Region_Payload_Indian_Vidhansabha_Constituency_Region_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Language_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Language_Payload"] = ResolversParentTypes["Update_Language_Payload"]
> = {
  _Language_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Language_Payload_Language_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Language_Script_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Language_Script_Payload"] = ResolversParentTypes["Update_Language_Script_Payload"]
> = {
  _Language_Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Language_Script_Payload_Language_Script_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Name_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Name_Payload"] = ResolversParentTypes["Update_Name_Payload"]
> = {
  _Name_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Name_Payload_Name_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Node_Update_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Node_Update_Payload"] = ResolversParentTypes["Update_Node_Update_Payload"]
> = {
  _Node_Update_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Node_Update_Payload_Node_Update_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Person_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Person_Payload"] = ResolversParentTypes["Update_Person_Payload"]
> = {
  _Person_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Person_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Person_Payload_Person_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Public_Policy_Domain_Government_Ministries_Departments_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Public_Policy_Domain_Government_Ministries_Departments_Payload"] = ResolversParentTypes["Update_Public_Policy_Domain_Government_Ministries_Departments_Payload"]
> = {
  _Public_Policy_Domain_Government_Ministries_Departments_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Public_Policy_Domain_Government_Ministries_Departments_Payload_Public_Policy_Domain_Government_Ministries_Departments_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Public_Policy_Domain_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Public_Policy_Domain_Payload"] = ResolversParentTypes["Update_Public_Policy_Domain_Payload"]
> = {
  _Public_Policy_Domain_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Public_Policy_Domain_Payload_Public_Policy_Domain_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Update_Script_PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Update_Script_Payload"] = ResolversParentTypes["Update_Script_Payload"]
> = {
  _Script_?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<Update_Script_Payload_Script_Args>
  >;
  numUids?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["User"] = ResolversParentTypes["User"]
> = {
  accounts?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Account"]>>>,
    ParentType,
    ContextType,
    Partial<UserAccountsArgs>
  >;
  accountsAggregate?: Resolver<
    Maybe<ResolversTypes["AccountAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<UserAccountsAggregateArgs>
  >;
  email?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  emailVerified?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes["ID"]>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  sessions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["Session"]>>>,
    ParentType,
    ContextType,
    Partial<UserSessionsArgs>
  >;
  sessionsAggregate?: Resolver<
    Maybe<ResolversTypes["SessionAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<UserSessionsAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UserAggregateResult"] = ResolversParentTypes["UserAggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  emailMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  emailMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  emailVerifiedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  emailVerifiedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  imageMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  imageMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  nameMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  nameMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerificationTokenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["VerificationToken"] = ResolversParentTypes["VerificationToken"]
> = {
  expires?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes["ID"]>, ParentType, ContextType>;
  identifier?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerificationTokenAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["VerificationTokenAggregateResult"] = ResolversParentTypes["VerificationTokenAggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  expiresMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  expiresMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  identifierMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  identifierMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  tokenMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  tokenMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_"] = ResolversParentTypes["_Country_"]
> = {
  events?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_EventsArgs>
  >;
  eventsAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_Event_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_EventsAggregateArgs>
  >;
  government?: Resolver<
    Maybe<ResolversTypes["_Country_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Country_GovernmentArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<Array<ResolversTypes["_Name_"]>, ParentType, ContextType, Partial<_Country_NamesArgs>>;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Node_UpdatesAggregateArgs>
  >;
  region?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_RegionArgs>
  >;
  regionAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_RegionAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_AggregateResult"] = ResolversParentTypes["_Country_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Event_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_Event_"] = ResolversParentTypes["_Country_Event_"]
> = {
  country?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Event_CountryArgs>
  >;
  countryAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Event_CountryAggregateArgs>
  >;
  datetime_from?: Resolver<
    ResolversTypes["_Date_Time_"],
    ParentType,
    ContextType,
    Partial<_Country_Event_Datetime_FromArgs>
  >;
  datetime_to?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Country_Event_Datetime_ToArgs>
  >;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  event_type?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Event_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Event_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Event_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Event_Node_UpdatesAggregateArgs>
  >;
  one_time_event?: Resolver<Maybe<ResolversTypes["Boolean"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Event_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_Event_AggregateResult"] = ResolversParentTypes["_Country_Event_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  event_typeMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  event_typeMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Government_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_Government_"] = ResolversParentTypes["_Country_Government_"]
> = {
  active_government_system_type_official?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_"]>,
    ParentType,
    ContextType,
    Partial<_Country_Government_Active_Government_System_Type_OfficialArgs>
  >;
  governs_country?: Resolver<
    Maybe<ResolversTypes["_Country_"]>,
    ParentType,
    ContextType,
    Partial<_Country_Government_Governs_CountryArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  india_government_system_active?: Resolver<
    Maybe<ResolversTypes["_Indian_Government_System_"]>,
    ParentType,
    ContextType,
    Partial<_Country_Government_India_Government_System_ActiveArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<Array<ResolversTypes["_Name_"]>, ParentType, ContextType, Partial<_Country_Government_NamesArgs>>;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Government_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Government_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Government_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Government_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_Government_AggregateResult"] = ResolversParentTypes["_Country_Government_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Region_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_Region_"] = ResolversParentTypes["_Country_Region_"]
> = {
  country?: Resolver<Maybe<ResolversTypes["_Country_"]>, ParentType, ContextType, Partial<_Country_Region_CountryArgs>>;
  disestablished?: Resolver<
    Maybe<ResolversTypes["_Country_Event_"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_DisestablishedArgs>
  >;
  established?: Resolver<
    Maybe<ResolversTypes["_Country_Event_"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_EstablishedArgs>
  >;
  geo_boundary_self_actual?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Boundary_Self_ActualArgs>
  >;
  geo_boundary_self_actualAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Boundary_Self_ActualAggregateArgs>
  >;
  geo_boundary_self_official?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Boundary_Self_OfficialArgs>
  >;
  geo_boundary_self_officialAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Boundary_Self_OfficialAggregateArgs>
  >;
  geo_boundary_world_official?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Boundary_World_OfficialArgs>
  >;
  geo_boundary_world_officialAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Boundary_World_OfficialAggregateArgs>
  >;
  geo_country_divisions_district?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_DistrictArgs>
  >;
  geo_country_divisions_districtAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_DistrictAggregateArgs>
  >;
  geo_country_divisions_loksabha_constituency?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_Loksabha_ConstituencyArgs>
  >;
  geo_country_divisions_loksabha_constituencyAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_Loksabha_ConstituencyAggregateArgs>
  >;
  geo_country_divisions_state_union_territory?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_State_Union_TerritoryArgs>
  >;
  geo_country_divisions_state_union_territoryAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_State_Union_TerritoryAggregateArgs>
  >;
  geo_country_divisions_vidhansabha_constituency?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_Vidhansabha_ConstituencyArgs>
  >;
  geo_country_divisions_vidhansabha_constituencyAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_Vidhansabha_ConstituencyAggregateArgs>
  >;
  geo_country_divisions_zonal_council?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_Zonal_CouncilArgs>
  >;
  geo_country_divisions_zonal_councilAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Geo_Country_Divisions_Zonal_CouncilAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Country_Region_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Country_Region_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Country_Region_AggregateResult"] = ResolversParentTypes["_Country_Region_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Date_Time_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Date_Time_"] = ResolversParentTypes["_Date_Time_"]
> = {
  date_time?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  date_time_precision?: Resolver<Maybe<ResolversTypes["Date_Time_Precision_Category"]>, ParentType, ContextType>;
  from_datetime_country_event?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<_Date_Time_From_Datetime_Country_EventArgs>
  >;
  from_datetime_country_eventAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_Event_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Date_Time_From_Datetime_Country_EventAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Date_Time_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Date_Time_Node_UpdatesAggregateArgs>
  >;
  to_datetime_country_event?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<_Date_Time_To_Datetime_Country_EventArgs>
  >;
  to_datetime_country_eventAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_Event_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Date_Time_To_Datetime_Country_EventAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Date_Time_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Date_Time_AggregateResult"] = ResolversParentTypes["_Date_Time_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  date_timeMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  date_timeMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Geo_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Geo_"] = ResolversParentTypes["_Geo_"]
> = {
  area?: Resolver<Maybe<ResolversTypes["MultiPolygon"]>, ParentType, ContextType>;
  category?: Resolver<Maybe<ResolversTypes["_Location_Or_Region_Category_"]>, ParentType, ContextType>;
  country_boundary_actual?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Country_Boundary_ActualArgs>
  >;
  country_boundary_self_official?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Country_Boundary_Self_OfficialArgs>
  >;
  country_boundary_world_official?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Country_Boundary_World_OfficialArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  india_district_divisions?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_India_District_DivisionsArgs>
  >;
  india_loksabha_constituency_divisions?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_India_Loksabha_Constituency_DivisionsArgs>
  >;
  india_state_union_territory_divisions?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_India_State_Union_Territory_DivisionsArgs>
  >;
  india_vidhansabha_constituency_divisions?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_India_Vidhansabha_Constituency_DivisionsArgs>
  >;
  india_zonal_council_divisions?: Resolver<
    Maybe<ResolversTypes["_Country_Region_"]>,
    ParentType,
    ContextType,
    Partial<_Geo_India_Zonal_Council_DivisionsArgs>
  >;
  indian_districts_boundaries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_Districts_BoundariesArgs>
  >;
  indian_districts_boundariesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_Districts_BoundariesAggregateArgs>
  >;
  indian_loksabha_constituencies_boundaries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_Loksabha_Constituencies_BoundariesArgs>
  >;
  indian_loksabha_constituencies_boundariesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_Loksabha_Constituencies_BoundariesAggregateArgs>
  >;
  indian_states_union_territories_boundaries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_States_Union_Territories_BoundariesArgs>
  >;
  indian_states_union_territories_boundariesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_States_Union_Territories_BoundariesAggregateArgs>
  >;
  indian_vidhansabha_constituencies_boundaries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_Vidhansabha_Constituencies_BoundariesArgs>
  >;
  indian_vidhansabha_constituencies_boundariesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Indian_Vidhansabha_Constituencies_BoundariesAggregateArgs>
  >;
  location?: Resolver<Maybe<ResolversTypes["Point"]>, ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Geo_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Geo_Node_UpdatesAggregateArgs>
  >;
  precision?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Geo_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Geo_AggregateResult"] = ResolversParentTypes["_Geo_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  precisionAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  precisionMax?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  precisionMin?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  precisionSum?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Type_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Type_"] = ResolversParentTypes["_Government_System_Type_"]
> = {
  active_official_system_type_of?: Resolver<
    Maybe<ResolversTypes["_Country_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Active_Official_System_Type_OfArgs>
  >;
  authority_concentration_type?: Resolver<
    Array<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Concentration_TypeArgs>
  >;
  authority_concentration_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Concentration_TypeAggregateArgs>
  >;
  authority_distribution_type?: Resolver<
    ResolversTypes["_Government_System_Types_Authority_Distribution_"],
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Distribution_TypeArgs>
  >;
  authority_source_type?: Resolver<
    Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Source_TypeArgs>
  >;
  authority_source_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Source_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Source_TypeAggregateArgs>
  >;
  authority_status_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Status_TypeArgs>
  >;
  authority_status_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Status_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Authority_Status_TypeAggregateArgs>
  >;
  autocratic_type?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Autocratic_TypeArgs>
  >;
  democracy_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Democracy_TypeArgs>
  >;
  democracy_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Democracy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Democracy_TypeAggregateArgs>
  >;
  description?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  disestablished?: Resolver<
    Maybe<ResolversTypes["_Country_Event_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_DisestablishedArgs>
  >;
  economic_system_type?: Resolver<
    Array<ResolversTypes["_Government_System_Types_Economic_System_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Economic_System_TypeArgs>
  >;
  economic_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Economic_System_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Economic_System_TypeAggregateArgs>
  >;
  established?: Resolver<
    Maybe<ResolversTypes["_Country_Event_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_EstablishedArgs>
  >;
  head_of_state_or_government_system_type?: Resolver<
    ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"],
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Head_Of_State_Or_Government_System_TypeArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  monarchy_type?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Monarchy_TypeArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Node_UpdatesAggregateArgs>
  >;
  oligarchy_type?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Oligarchy_TypeArgs>
  >;
  partisan_system_type?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Partisan_System_TypeArgs>
  >;
  religious_ideology_type?: Resolver<
    ResolversTypes["_Government_System_Types_Religion_"],
    ParentType,
    ContextType,
    Partial<_Government_System_Type_Religious_Ideology_TypeArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Type_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Type_AggregateResult"] = ResolversParentTypes["_Government_System_Type_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Concentration_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Concentration_"] = ResolversParentTypes["_Government_System_Types_Authority_Concentration_"]
> = {
  accountability_towards_people?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  authority_held_by?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Concentration_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Concentration_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Concentration_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Concentration_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Concentration_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Concentration_Node_UpdatesAggregateArgs>
  >;
  power_hierarchy?: Resolver<Maybe<Array<ResolversTypes["String"]>>, ParentType, ContextType>;
  public_access_to_means_of_peaceful_power_transfer?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Concentration_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Concentration_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Authority_Concentration_AggregateResult"]
> = {
  accountability_towards_peopleMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  accountability_towards_peopleMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  authority_held_byMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  authority_held_byMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  public_access_to_means_of_peaceful_power_transferMax?: Resolver<
    Maybe<ResolversTypes["String"]>,
    ParentType,
    ContextType
  >;
  public_access_to_means_of_peaceful_power_transferMin?: Resolver<
    Maybe<ResolversTypes["String"]>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Distribution_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Distribution_"] = ResolversParentTypes["_Government_System_Types_Authority_Distribution_"]
> = {
  central_authority_role?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Distribution_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Distribution_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  law_uniformity?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Distribution_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Distribution_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Distribution_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Distribution_Node_UpdatesAggregateArgs>
  >;
  power_distribution?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  state_sovereignty?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Distribution_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Distribution_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Authority_Distribution_AggregateResult"]
> = {
  central_authority_roleMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  central_authority_roleMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  law_uniformityMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  law_uniformityMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  power_distributionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  power_distributionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  state_sovereigntyMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  state_sovereigntyMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Source_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Source_"] = ResolversParentTypes["_Government_System_Types_Authority_Source_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governance_mechanisms?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Source_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Source_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Source_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Source_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Source_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Source_Node_UpdatesAggregateArgs>
  >;
  power_structure?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  role_of_leadership?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  source_of_legitimacy?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Source_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Source_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Authority_Source_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_mechanismsMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_mechanismsMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  power_structureMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  power_structureMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  role_of_leadershipMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  role_of_leadershipMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  source_of_legitimacyMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  source_of_legitimacyMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Status_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Status_"] = ResolversParentTypes["_Government_System_Types_Authority_Status_"]
> = {
  control_and_authority?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governance_status?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Status_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Status_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  international_recognition?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Status_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Status_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Status_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Authority_Status_Node_UpdatesAggregateArgs>
  >;
  objective_and_focus?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Authority_Status_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Authority_Status_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Authority_Status_AggregateResult"]
> = {
  control_and_authorityMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  control_and_authorityMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_statusMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_statusMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  international_recognitionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  international_recognitionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  objective_and_focusMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  objective_and_focusMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Autocratic_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Autocratic_"] = ResolversParentTypes["_Government_System_Types_Autocratic_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  formation_context?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governance_style?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Autocratic_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Autocratic_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  leadership_origin?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Autocratic_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Autocratic_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Autocratic_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Autocratic_Node_UpdatesAggregateArgs>
  >;
  power_consolidation?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Autocratic_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Autocratic_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Autocratic_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  formation_contextMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  formation_contextMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_styleMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_styleMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  leadership_originMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  leadership_originMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  power_consolidationMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  power_consolidationMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Democracy_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Democracy_"] = ResolversParentTypes["_Government_System_Types_Democracy_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governance_focus?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Democracy_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Democracy_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Democracy_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Democracy_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Democracy_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Democracy_Node_UpdatesAggregateArgs>
  >;
  participation_level?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  selection_method?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  system_stability?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Democracy_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Democracy_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Democracy_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_focusMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_focusMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  participation_levelMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  participation_levelMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  selection_methodMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  selection_methodMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  system_stabilityMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  system_stabilityMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Economic_System_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Economic_System_"] = ResolversParentTypes["_Government_System_Types_Economic_System_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  economic_drivers?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governance_approach?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Economic_System_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Economic_System_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Economic_System_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Economic_System_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Economic_System_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Economic_System_Node_UpdatesAggregateArgs>
  >;
  ownership_and_control?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  societal_structure?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Economic_System_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Economic_System_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Economic_System_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  economic_driversMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  economic_driversMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_approachMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_approachMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  ownership_and_controlMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  ownership_and_controlMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  societal_structureMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  societal_structureMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Head_Of_State_Or_Government"] = ResolversParentTypes["_Government_System_Types_Head_Of_State_Or_Government"]
> = {
  authority_scope?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_integration?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Head_Of_State_Or_GovernmentGovernment_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Head_Of_State_Or_GovernmentGovernment_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  leadership_structure?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Head_Of_State_Or_GovernmentNamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Head_Of_State_Or_GovernmentNamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Head_Of_State_Or_GovernmentNode_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Head_Of_State_Or_GovernmentNode_UpdatesAggregateArgs>
  >;
  power_distribution?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult"] = ResolversParentTypes["_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult"]
> = {
  authority_scopeMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  authority_scopeMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  government_integrationMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  government_integrationMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  leadership_structureMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  leadership_structureMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  power_distributionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  power_distributionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Monarchy_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Monarchy_"] = ResolversParentTypes["_Government_System_Types_Monarchy_"]
> = {
  authority_level?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  constitutional_limitations?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governing_powers_in?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Monarchy_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Monarchy_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Monarchy_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Monarchy_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Monarchy_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Monarchy_Node_UpdatesAggregateArgs>
  >;
  power_source?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  reign_term?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Monarchy_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Monarchy_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Monarchy_AggregateResult"]
> = {
  authority_levelMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  authority_levelMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  constitutional_limitationsMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  constitutional_limitationsMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governing_powers_inMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governing_powers_inMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  power_sourceMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  power_sourceMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  reign_termMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  reign_termMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Oligarchy_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Oligarchy_"] = ResolversParentTypes["_Government_System_Types_Oligarchy_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  governance_focus?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Oligarchy_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Oligarchy_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Oligarchy_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Oligarchy_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Oligarchy_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Oligarchy_Node_UpdatesAggregateArgs>
  >;
  power_basis?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  selection_mechanism?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  stability_and_order?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Oligarchy_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Oligarchy_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Oligarchy_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_focusMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  governance_focusMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  power_basisMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  power_basisMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  selection_mechanismMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  selection_mechanismMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  stability_and_orderMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  stability_and_orderMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Partisan_Systems_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Partisan_Systems_"] = ResolversParentTypes["_Government_System_Types_Partisan_Systems_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_formation?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Partisan_Systems_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Partisan_Systems_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Partisan_Systems_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Partisan_Systems_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Partisan_Systems_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Partisan_Systems_Node_UpdatesAggregateArgs>
  >;
  party_influence?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  political_stability?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  representation?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Partisan_Systems_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Partisan_Systems_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Partisan_Systems_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  government_formationMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  government_formationMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  party_influenceMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  party_influenceMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  political_stabilityMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  political_stabilityMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  representationMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  representationMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Religion_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Religion_"] = ResolversParentTypes["_Government_System_Types_Religion_"]
> = {
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  government_system_type?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Type_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Religion_Government_System_TypeArgs>
  >;
  government_system_typeAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Type_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Religion_Government_System_TypeAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  legal_framework?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Religion_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Religion_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Religion_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Government_System_Types_Religion_Node_UpdatesAggregateArgs>
  >;
  religious_freedom?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  religious_influence?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  state_support?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Government_System_Types_Religion_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Government_System_Types_Religion_AggregateResult"] = ResolversParentTypes["_Government_System_Types_Religion_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  legal_frameworkMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  legal_frameworkMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  religious_freedomMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  religious_freedomMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  religious_influenceMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  religious_influenceMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  state_supportMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  state_supportMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Administrative_DivisionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Administrative_Divisions"] = ResolversParentTypes["_Indian_Administrative_Divisions"]
> = {
  districts?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Administrative_DivisionsDistrictsArgs>
  >;
  districtsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Administrative_DivisionsDistrictsAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  states_union_territories?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Administrative_DivisionsStates_Union_TerritoriesArgs>
  >;
  states_union_territoriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Administrative_DivisionsStates_Union_TerritoriesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Administrative_DivisionsAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Administrative_DivisionsAggregateResult"] = ResolversParentTypes["_Indian_Administrative_DivisionsAggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_District_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_District_"] = ResolversParentTypes["_Indian_District_"]
> = {
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Loksabha_ConstituenciesArgs>
  >;
  loksabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Loksabha_ConstituenciesAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Node_UpdatesAggregateArgs>
  >;
  regions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_RegionsArgs>
  >;
  regionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_RegionsAggregateArgs>
  >;
  states_union_territories?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_States_Union_TerritoriesArgs>
  >;
  states_union_territoriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_States_Union_TerritoriesAggregateArgs>
  >;
  vidhansabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Vidhansabha_ConstituenciesArgs>
  >;
  vidhansabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Vidhansabha_ConstituenciesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_District_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_District_AggregateResult"] = ResolversParentTypes["_Indian_District_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_District_Region_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_District_Region_"] = ResolversParentTypes["_Indian_District_Region_"]
> = {
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  geo_boundary?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Region_Geo_BoundaryArgs>
  >;
  geo_boundaryAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Region_Geo_BoundaryAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Region_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Region_Node_UpdatesAggregateArgs>
  >;
  self?: Resolver<
    Maybe<ResolversTypes["_Indian_District_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_District_Region_SelfArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_District_Region_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_District_Region_AggregateResult"] = ResolversParentTypes["_Indian_District_Region_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Government_Official_Role_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Government_Official_Role_"] = ResolversParentTypes["_Indian_Government_Official_Role_"]
> = {
  description?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_members?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_Official_Role_Loksabha_MembersArgs>
  >;
  loksabha_membersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_Official_Role_Loksabha_MembersAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_Official_Role_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_Official_Role_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_Official_Role_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_Official_Role_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Government_Official_Role_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Government_Official_Role_AggregateResult"] = ResolversParentTypes["_Indian_Government_Official_Role_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Government_System_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Government_System_"] = ResolversParentTypes["_Indian_Government_System_"]
> = {
  administrative_divisions?: Resolver<
    Maybe<ResolversTypes["_Indian_Administrative_Divisions"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Administrative_DivisionsArgs>
  >;
  cabinet_ministers?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Cabinet_MinistersArgs>
  >;
  cabinet_ministersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Cabinet_MinistersAggregateArgs>
  >;
  country?: Resolver<
    Maybe<ResolversTypes["_Country_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_CountryArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_LoksabhaArgs>
  >;
  loksabhaAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_LoksabhaAggregateArgs>
  >;
  loksabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Loksabha_ConstituenciesArgs>
  >;
  loksabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Loksabha_ConstituenciesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Node_UpdatesAggregateArgs>
  >;
  prime_ministers?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Prime_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Prime_MinistersArgs>
  >;
  prime_ministersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Prime_MinistersAggregateArgs>
  >;
  union_governments?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Union_GovernmentsArgs>
  >;
  union_governmentsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Government_System_Union_GovernmentsAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Government_System_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Government_System_AggregateResult"] = ResolversParentTypes["_Indian_Government_System_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Legal_Document_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Legal_Document_"] = ResolversParentTypes["_Indian_Legal_Document_"]
> = {
  description?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  document_type?: Resolver<ResolversTypes["_Indian_Legal_Document_Category_"], ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<Array<ResolversTypes["_Name_"]>, ParentType, ContextType, Partial<_Indian_Legal_Document_NamesArgs>>;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Legal_Document_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Legal_Document_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Legal_Document_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Legal_Document_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Legal_Document_AggregateResult"] = ResolversParentTypes["_Indian_Legal_Document_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Legislative_DivisionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Legislative_Divisions"] = ResolversParentTypes["_Indian_Legislative_Divisions"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Legislative_DivisionsLoksabha_ConstituenciesArgs>
  >;
  loksabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Legislative_DivisionsLoksabha_ConstituenciesAggregateArgs>
  >;
  vidhansabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Legislative_DivisionsVidhansabha_ConstituenciesArgs>
  >;
  vidhansabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Legislative_DivisionsVidhansabha_ConstituenciesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Legislative_DivisionsAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Legislative_DivisionsAggregateResult"] = ResolversParentTypes["_Indian_Legislative_DivisionsAggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_"] = ResolversParentTypes["_Indian_Loksabha_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_CabinetArgs>
  >;
  constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_ConstituenciesArgs>
  >;
  constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_ConstituenciesAggregateArgs>
  >;
  council_of_ministers?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Council_Of_MinistersArgs>
  >;
  elections?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_ElectionsArgs>
  >;
  electionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_ElectionsAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_number?: Resolver<ResolversTypes["Int"], ParentType, ContextType>;
  loksabha_sessions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Session_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Loksabha_SessionsArgs>
  >;
  loksabha_sessionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Session_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Loksabha_SessionsAggregateArgs>
  >;
  members?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_MembersArgs>
  >;
  membersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_MembersAggregateArgs>
  >;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Node_UpdatesAggregateArgs>
  >;
  prime_minister?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Prime_MinisterArgs>
  >;
  term_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Term_EndArgs>
  >;
  term_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Term_StartArgs>
  >;
  union_government?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Union_GovernmentArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  loksabha_numberAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  loksabha_numberMax?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  loksabha_numberMin?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  loksabha_numberSum?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_"] = ResolversParentTypes["_Indian_Loksabha_Constituency_"]
> = {
  constituency_number?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  districts?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_DistrictsArgs>
  >;
  districtsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_DistrictsAggregateArgs>
  >;
  elections?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_ElectionsArgs>
  >;
  electionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_ElectionsAggregateArgs>
  >;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_members?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Loksabha_MembersArgs>
  >;
  loksabha_membersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Loksabha_MembersAggregateArgs>
  >;
  loksabhas?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_LoksabhasArgs>
  >;
  loksabhasAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_LoksabhasAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Node_UpdatesAggregateArgs>
  >;
  regions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_RegionsArgs>
  >;
  regionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_RegionsAggregateArgs>
  >;
  states_union_territories?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_States_Union_TerritoriesArgs>
  >;
  states_union_territoriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_States_Union_TerritoriesAggregateArgs>
  >;
  vidhansabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Vidhansabha_ConstituenciesArgs>
  >;
  vidhansabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Vidhansabha_ConstituenciesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Constituency_AggregateResult"]
> = {
  constituency_numberMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  constituency_numberMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_"]
> = {
  candidates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_CandidatesArgs>
  >;
  candidatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_CandidatesAggregateArgs>
  >;
  constituency?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_ConstituencyArgs>
  >;
  election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_ElectionArgs>
  >;
  election_phase?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Election_PhaseArgs>
  >;
  election_result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Election_ResultArgs>
  >;
  election_winner?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Election_WinnerArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Candidate_"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]
> = {
  candidate?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_CandidateArgs>
  >;
  candidate_result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_Candidate_ResultArgs>
  >;
  constituency_election_result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_Constituency_Election_ResultArgs>
  >;
  election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_ElectionArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_Node_UpdatesAggregateArgs>
  >;
  political_party?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Candidate_Political_PartyArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Candidate_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_"]
> = {
  candidate_result?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Candidate_ResultArgs>
  >;
  candidate_resultAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Candidate_ResultAggregateArgs>
  >;
  candidates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_CandidatesArgs>
  >;
  candidatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_CandidatesAggregateArgs>
  >;
  constituency_election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Constituency_ElectionArgs>
  >;
  election_result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Election_ResultArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Node_UpdatesAggregateArgs>
  >;
  total_voters?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  voter_turnout?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  voter_turnout_percentage?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  winner?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_WinnerArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Result_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  total_votersAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  total_votersMax?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  total_votersMin?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  total_votersSum?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  voter_turnoutAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  voter_turnoutMax?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  voter_turnoutMin?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  voter_turnoutSum?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  voter_turnout_percentageAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  voter_turnout_percentageMax?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  voter_turnout_percentageMin?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  voter_turnout_percentageSum?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_"]
> = {
  candidate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_CandidateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Node_UpdatesAggregateArgs>
  >;
  overall_result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Overall_ResultArgs>
  >;
  votes_count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  votes_percentage?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  votes_countAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  votes_countMax?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  votes_countMin?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  votes_countSum?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  votes_percentageAvg?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  votes_percentageMax?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  votes_percentageMin?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  votes_percentageSum?: Resolver<Maybe<ResolversTypes["Float"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Region_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Region_"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Region_"]
> = {
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  geo_boundary?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Region_Geo_BoundaryArgs>
  >;
  geo_boundaryAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Region_Geo_BoundaryAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Region_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Region_Node_UpdatesAggregateArgs>
  >;
  self?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Constituency_Region_SelfArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Constituency_Region_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Constituency_Region_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Constituency_Region_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Election_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Election_"] = ResolversParentTypes["_Indian_Loksabha_Election_"]
> = {
  completed_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Completed_OnArgs>
  >;
  constituency_election?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Constituency_ElectionArgs>
  >;
  constituency_electionAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Constituency_ElectionAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_LoksabhaArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Node_UpdatesAggregateArgs>
  >;
  participating_political_parties?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Participating_Political_PartiesArgs>
  >;
  participating_political_partiesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Participating_Political_PartiesAggregateArgs>
  >;
  phases?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_PhasesArgs>
  >;
  phasesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Phase_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_PhasesAggregateArgs>
  >;
  pre_poll_coalitions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Pre_Poll_CoalitionsArgs>
  >;
  pre_poll_coalitionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Pre_Poll_CoalitionsAggregateArgs>
  >;
  result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_Result_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_ResultArgs>
  >;
  started_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Started_OnArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Election_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Election_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Election_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Election_Phase_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Election_Phase_"] = ResolversParentTypes["_Indian_Loksabha_Election_Phase_"]
> = {
  constituency_election?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Phase_Constituency_ElectionArgs>
  >;
  constituency_electionAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Phase_Constituency_ElectionAggregateArgs>
  >;
  election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Phase_ElectionArgs>
  >;
  election_date?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Phase_Election_DateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Phase_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Phase_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Election_Phase_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Election_Phase_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Election_Phase_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Election_Result_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Election_Result_"] = ResolversParentTypes["_Indian_Loksabha_Election_Result_"]
> = {
  constituency_election_result?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Result_Constituency_Election_ResultArgs>
  >;
  constituency_election_resultAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Result_Constituency_Election_ResultAggregateArgs>
  >;
  election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Result_ElectionArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Result_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Result_Node_UpdatesAggregateArgs>
  >;
  result_declaration_date?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Election_Result_Result_Declaration_DateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Election_Result_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Election_Result_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Election_Result_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Member_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Member_"] = ResolversParentTypes["_Indian_Loksabha_Member_"]
> = {
  constituency?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_ConstituencyArgs>
  >;
  constituency_election_result?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Result_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Constituency_Election_ResultArgs>
  >;
  election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_ElectionArgs>
  >;
  election_winning_political_party?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Election_Winning_Political_PartyArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_LoksabhaArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Node_UpdatesAggregateArgs>
  >;
  position_held_by?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Position_Held_ByArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Member_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Member_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Member_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Member_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Session_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Session_"] = ResolversParentTypes["_Indian_Loksabha_Session_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Session_LoksabhaArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Session_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Loksabha_Session_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Loksabha_Session_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Loksabha_Session_AggregateResult"] = ResolversParentTypes["_Indian_Loksabha_Session_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_"] = ResolversParentTypes["_Indian_Political_Party_"]
> = {
  disestablished_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Disestablished_OnArgs>
  >;
  established_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Established_OnArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  is_national_party?: Resolver<Maybe<ResolversTypes["Boolean"]>, ParentType, ContextType>;
  loksabha_elections?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_ElectionsArgs>
  >;
  loksabha_electionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_ElectionsAggregateArgs>
  >;
  members?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_MembersArgs>
  >;
  membersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_MembersAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Array<ResolversTypes["_Name_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_AggregateResult"] = ResolversParentTypes["_Indian_Political_Party_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Loksabha_Election_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_Loksabha_Election_"] = ResolversParentTypes["_Indian_Political_Party_Loksabha_Election_"]
> = {
  candidates_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Candidates_ConstituenciesArgs>
  >;
  candidates_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Candidates_ConstituenciesAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Loksabha_ElectionArgs>
  >;
  loksabha_members?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Loksabha_MembersArgs>
  >;
  loksabha_membersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Loksabha_MembersAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Node_UpdatesAggregateArgs>
  >;
  political_party?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Loksabha_Election_Political_PartyArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Loksabha_Election_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_Loksabha_Election_AggregateResult"] = ResolversParentTypes["_Indian_Political_Party_Loksabha_Election_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Member_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_Member_"] = ResolversParentTypes["_Indian_Political_Party_Member_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  member_from?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Member_Member_FromArgs>
  >;
  member_to?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Member_Member_ToArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Member_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Member_Node_UpdatesAggregateArgs>
  >;
  party?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Member_PartyArgs>
  >;
  politician?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Member_PoliticianArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Member_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_Member_AggregateResult"] = ResolversParentTypes["_Indian_Political_Party_Member_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"] = ResolversParentTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_election?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Loksabha_ElectionArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Node_UpdatesAggregateArgs>
  >;
  political_parties?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Political_PartiesArgs>
  >;
  political_partiesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Political_PartiesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult"] = ResolversParentTypes["_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Politician_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Politician_"] = ResolversParentTypes["_Indian_Politician_"]
> = {
  cabinet_minister?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Cabinet_MinisterArgs>
  >;
  cabinet_ministerAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Cabinet_MinisterAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_elections_contested?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Loksabha_Elections_ContestedArgs>
  >;
  loksabha_elections_contestedAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_Election_Candidate_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Loksabha_Elections_ContestedAggregateArgs>
  >;
  loksabha_member?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Loksabha_MemberArgs>
  >;
  loksabha_memberAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Loksabha_MemberAggregateArgs>
  >;
  minister_of_state?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Minister_Of_StateArgs>
  >;
  minister_of_stateAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Minister_Of_StateAggregateArgs>
  >;
  minister_of_state_independent_charge?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Minister_Of_State_Independent_ChargeArgs>
  >;
  minister_of_state_independent_chargeAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Minister_Of_State_Independent_ChargeAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Node_UpdatesAggregateArgs>
  >;
  person?: Resolver<Maybe<ResolversTypes["_Person_"]>, ParentType, ContextType, Partial<_Indian_Politician_PersonArgs>>;
  political_party_memberships?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_Member_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Political_Party_MembershipsArgs>
  >;
  political_party_membershipsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_Member_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Political_Party_MembershipsAggregateArgs>
  >;
  prime_minister?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Prime_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Prime_MinisterArgs>
  >;
  prime_ministerAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Politician_Prime_MinisterAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Politician_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Politician_AggregateResult"] = ResolversParentTypes["_Indian_Politician_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Prime_Minister_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Prime_Minister_"] = ResolversParentTypes["_Indian_Prime_Minister_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_CabinetArgs>
  >;
  council_of_ministers?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_Council_Of_MinistersArgs>
  >;
  government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_GovernmentArgs>
  >;
  governmentAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_GovernmentAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_LoksabhaArgs>
  >;
  ministries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_MinistriesArgs>
  >;
  ministriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_MinistriesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_Node_UpdatesAggregateArgs>
  >;
  position_held_by?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_Position_Held_ByArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Prime_Minister_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Prime_Minister_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Prime_Minister_AggregateResult"] = ResolversParentTypes["_Indian_Prime_Minister_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_State_Union_Territory_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_State_Union_Territory_"] = ResolversParentTypes["_Indian_State_Union_Territory_"]
> = {
  category?: Resolver<Maybe<ResolversTypes["_Indian_State_Or_Union_Territory_Category_"]>, ParentType, ContextType>;
  districts?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_DistrictsArgs>
  >;
  districtsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_DistrictsAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Loksabha_ConstituenciesArgs>
  >;
  loksabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Loksabha_ConstituenciesAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Node_UpdatesAggregateArgs>
  >;
  regions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_RegionsArgs>
  >;
  regionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_RegionsAggregateArgs>
  >;
  vidhansabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Vidhansabha_ConstituenciesArgs>
  >;
  vidhansabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Vidhansabha_ConstituenciesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_State_Union_Territory_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_State_Union_Territory_AggregateResult"] = ResolversParentTypes["_Indian_State_Union_Territory_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_State_Union_Territory_Region_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_State_Union_Territory_Region_"] = ResolversParentTypes["_Indian_State_Union_Territory_Region_"]
> = {
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  geo_boundary?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Region_Geo_BoundaryArgs>
  >;
  geo_boundaryAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Region_Geo_BoundaryAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Region_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Region_Node_UpdatesAggregateArgs>
  >;
  self?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_State_Union_Territory_Region_SelfArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_State_Union_Territory_Region_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_State_Union_Territory_Region_AggregateResult"] = ResolversParentTypes["_Indian_State_Union_Territory_Region_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Council_Of_Ministers_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Council_Of_Ministers_"] = ResolversParentTypes["_Indian_Union_Council_Of_Ministers_"]
> = {
  council_member_ministers?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_Council_Member_MinistersArgs>
  >;
  government?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_GovernmentArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_LoksabhaArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_Node_UpdatesAggregateArgs>
  >;
  prime_minister?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_Prime_MinisterArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Council_Of_Ministers_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Council_Of_Ministers_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Council_Of_Ministers_AggregateResult"] = ResolversParentTypes["_Indian_Union_Council_Of_Ministers_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_"] = ResolversParentTypes["_Indian_Union_Government_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_CabinetArgs>
  >;
  council_of_ministers?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Council_Of_MinistersArgs>
  >;
  departments?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_DepartmentsArgs>
  >;
  departmentsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_DepartmentsAggregateArgs>
  >;
  disestablished_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Disestablished_OnArgs>
  >;
  established_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Established_OnArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_LoksabhaArgs>
  >;
  ministries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_MinistriesArgs>
  >;
  ministriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_MinistriesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Node_UpdatesAggregateArgs>
  >;
  prime_minister?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Prime_MinisterArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Cabinet_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Cabinet_"] = ResolversParentTypes["_Indian_Union_Government_Cabinet_"]
> = {
  cabinet_ministers?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Cabinet_MinistersArgs>
  >;
  cabinet_ministersAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Cabinet_MinistersAggregateArgs>
  >;
  government?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_GovernmentArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_LoksabhaArgs>
  >;
  minister_of_state?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Of_StateArgs>
  >;
  minister_of_stateAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Of_StateAggregateArgs>
  >;
  minister_of_state_independent_charge?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Of_State_Independent_ChargeArgs>
  >;
  minister_of_state_independent_chargeAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Of_State_Independent_ChargeAggregateArgs>
  >;
  ministries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_MinistriesArgs>
  >;
  ministriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_MinistriesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Node_UpdatesAggregateArgs>
  >;
  prime_minister?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Prime_MinisterArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Cabinet_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Cabinet_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_Cabinet_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Cabinet_Minister_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Cabinet_Minister_"] = ResolversParentTypes["_Indian_Union_Government_Cabinet_Minister_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_CabinetArgs>
  >;
  council_of_ministers?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Council_Of_Ministers_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Council_Of_MinistersArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  ministry?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_MinistryArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Node_UpdatesAggregateArgs>
  >;
  position_held_by?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Position_Held_ByArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Cabinet_Minister_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Cabinet_Minister_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Department_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Department_"] = ResolversParentTypes["_Indian_Union_Government_Department_"]
> = {
  child_departments?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Child_DepartmentsArgs>
  >;
  child_departmentsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Child_DepartmentsAggregateArgs>
  >;
  disestablished_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Disestablished_OnArgs>
  >;
  established_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Established_OnArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  ministry?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_MinistryArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Array<ResolversTypes["_Name_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Node_UpdatesAggregateArgs>
  >;
  parent_department?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Parent_DepartmentArgs>
  >;
  parent_departmentAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Parent_DepartmentAggregateArgs>
  >;
  policy_domain_departments_list?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Policy_Domain_Departments_ListArgs>
  >;
  policy_domain_departments_listAggregate?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Policy_Domain_Departments_ListAggregateArgs>
  >;
  policy_domains?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Policy_DomainsArgs>
  >;
  policy_domainsAggregate?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Policy_DomainsAggregateArgs>
  >;
  union_government?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Department_Union_GovernmentArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Department_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Department_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_Department_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Minister_Of_State_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_"] = ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_CabinetArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  ministry?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_MinistryArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Node_UpdatesAggregateArgs>
  >;
  position_held_by?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Position_Held_ByArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Minister_Of_State_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"] = ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_CabinetArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  ministry?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_MinistryArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Node_UpdatesAggregateArgs>
  >;
  position_held_by?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Position_Held_ByArgs>
  >;
  tenure_end?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Tenure_EndArgs>
  >;
  tenure_start?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Minister_Of_State_Independent_Charge_Tenure_StartArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Ministry_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Ministry_"] = ResolversParentTypes["_Indian_Union_Government_Ministry_"]
> = {
  cabinet?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_CabinetArgs>
  >;
  departments?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_DepartmentsArgs>
  >;
  departmentsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_DepartmentsAggregateArgs>
  >;
  disestablished_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Disestablished_OnArgs>
  >;
  established_on?: Resolver<
    Maybe<ResolversTypes["_Date_Time_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Established_OnArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  minister?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_MinisterArgs>
  >;
  ministerAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Cabinet_Minister_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_MinisterAggregateArgs>
  >;
  minister_of_state?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Minister_Of_StateArgs>
  >;
  minister_of_stateAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Minister_Of_StateAggregateArgs>
  >;
  minister_of_state_independent_charge?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Minister_Of_State_Independent_ChargeArgs>
  >;
  minister_of_state_independent_chargeAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Minister_Of_State_Independent_ChargeAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Array<ResolversTypes["_Name_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Node_UpdatesAggregateArgs>
  >;
  policy_domain_ministries_list?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Policy_Domain_Ministries_ListArgs>
  >;
  policy_domain_ministries_listAggregate?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Policy_Domain_Ministries_ListAggregateArgs>
  >;
  policy_domains?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Policy_DomainsArgs>
  >;
  policy_domainsAggregate?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Policy_DomainsAggregateArgs>
  >;
  prime_minister?: Resolver<
    Maybe<ResolversTypes["_Indian_Prime_Minister_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Prime_MinisterArgs>
  >;
  union_government?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Union_Government_Ministry_Union_GovernmentArgs>
  >;
  wikidata_qid?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_page?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Union_Government_Ministry_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Union_Government_Ministry_AggregateResult"] = ResolversParentTypes["_Indian_Union_Government_Ministry_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  wikidata_qidMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikidata_qidMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Vidhansabha_Constituency_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Vidhansabha_Constituency_"] = ResolversParentTypes["_Indian_Vidhansabha_Constituency_"]
> = {
  constituency_number?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  districts?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_DistrictsArgs>
  >;
  districtsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_DistrictsAggregateArgs>
  >;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  loksabha_constituencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Loksabha_ConstituenciesArgs>
  >;
  loksabha_constituenciesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Loksabha_ConstituenciesAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Node_UpdatesAggregateArgs>
  >;
  regions?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_RegionsArgs>
  >;
  regionsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_Region_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_RegionsAggregateArgs>
  >;
  states_union_territories?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_States_Union_TerritoriesArgs>
  >;
  states_union_territoriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_States_Union_TerritoriesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Vidhansabha_Constituency_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Vidhansabha_Constituency_AggregateResult"] = ResolversParentTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]
> = {
  constituency_numberMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  constituency_numberMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Vidhansabha_Constituency_Region_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Vidhansabha_Constituency_Region_"] = ResolversParentTypes["_Indian_Vidhansabha_Constituency_Region_"]
> = {
  disestablished?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  established?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  geo_boundary?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Geo_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Region_Geo_BoundaryArgs>
  >;
  geo_boundaryAggregate?: Resolver<
    Maybe<ResolversTypes["_Geo_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Region_Geo_BoundaryAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Region_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Region_Node_UpdatesAggregateArgs>
  >;
  self?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>,
    ParentType,
    ContextType,
    Partial<_Indian_Vidhansabha_Constituency_Region_SelfArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Indian_Vidhansabha_Constituency_Region_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Indian_Vidhansabha_Constituency_Region_AggregateResult"] = ResolversParentTypes["_Indian_Vidhansabha_Constituency_Region_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  disestablishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  disestablishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  establishedMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Language_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Language_"] = ResolversParentTypes["_Language_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_en?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Language_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Language_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Language_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Language_Node_UpdatesAggregateArgs>
  >;
  scripts?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<_Language_ScriptsArgs>
  >;
  scriptsAggregate?: Resolver<
    Maybe<ResolversTypes["_Script_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Language_ScriptsAggregateArgs>
  >;
  wikidata_qid?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_page?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Language_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Language_AggregateResult"] = ResolversParentTypes["_Language_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_enMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_enMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  wikidata_qidMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikidata_qidMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Language_Script_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Language_Script_"] = ResolversParentTypes["_Language_Script_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  language?: Resolver<ResolversTypes["_Language_"], ParentType, ContextType, Partial<_Language_Script_LanguageArgs>>;
  name_en?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Language_Script_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Language_Script_Node_UpdatesAggregateArgs>
  >;
  script?: Resolver<ResolversTypes["_Script_"], ParentType, ContextType, Partial<_Language_Script_ScriptArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Language_Script_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Language_Script_AggregateResult"] = ResolversParentTypes["_Language_Script_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_enMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_enMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Name_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Name_"] = ResolversParentTypes["_Name_"]
> = {
  case_sensitive?: Resolver<Maybe<ResolversTypes["Boolean"]>, ParentType, ContextType>;
  country?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_CountryArgs>
  >;
  countryAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_CountryAggregateArgs>
  >;
  country_event?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Event_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Country_EventArgs>
  >;
  country_eventAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_Event_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Country_EventAggregateArgs>
  >;
  country_government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Country_Government_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Country_GovernmentArgs>
  >;
  country_governmentAggregate?: Resolver<
    Maybe<ResolversTypes["_Country_Government_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Country_GovernmentAggregateArgs>
  >;
  government_system_type_authority_concentration?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_ConcentrationArgs>
  >;
  government_system_type_authority_concentrationAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Concentration_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_ConcentrationAggregateArgs>
  >;
  government_system_type_authority_distribution?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_DistributionArgs>
  >;
  government_system_type_authority_distributionAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Distribution_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_DistributionAggregateArgs>
  >;
  government_system_type_authority_source?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Source_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_SourceArgs>
  >;
  government_system_type_authority_sourceAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Source_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_SourceAggregateArgs>
  >;
  government_system_type_authority_status?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Authority_Status_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_StatusArgs>
  >;
  government_system_type_authority_statusAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Authority_Status_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Authority_StatusAggregateArgs>
  >;
  government_system_type_autocratic?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Autocratic_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_AutocraticArgs>
  >;
  government_system_type_autocraticAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Autocratic_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_AutocraticAggregateArgs>
  >;
  government_system_type_democracy?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Democracy_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_DemocracyArgs>
  >;
  government_system_type_democracyAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Democracy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_DemocracyAggregateArgs>
  >;
  government_system_type_economic_system?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Economic_System_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Economic_SystemArgs>
  >;
  government_system_type_economic_systemAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Economic_System_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Economic_SystemAggregateArgs>
  >;
  government_system_type_head_of_state_or_government?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_Government"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Head_Of_State_Or_GovernmentArgs>
  >;
  government_system_type_head_of_state_or_governmentAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Head_Of_State_Or_GovernmentAggregateArgs>
  >;
  government_system_type_monarchy?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Monarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_MonarchyArgs>
  >;
  government_system_type_monarchyAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Monarchy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_MonarchyAggregateArgs>
  >;
  government_system_type_oligarchy?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Oligarchy_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_OligarchyArgs>
  >;
  government_system_type_oligarchyAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Oligarchy_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_OligarchyAggregateArgs>
  >;
  government_system_type_partisan_systems?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Partisan_SystemsArgs>
  >;
  government_system_type_partisan_systemsAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Partisan_Systems_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_Partisan_SystemsAggregateArgs>
  >;
  government_system_type_religion?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Government_System_Types_Religion_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_ReligionArgs>
  >;
  government_system_type_religionAggregate?: Resolver<
    Maybe<ResolversTypes["_Government_System_Types_Religion_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Government_System_Type_ReligionAggregateArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  indian_district?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_District_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_DistrictArgs>
  >;
  indian_districtAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_District_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_DistrictAggregateArgs>
  >;
  indian_government_official_role?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Government_Official_Role_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Government_Official_RoleArgs>
  >;
  indian_government_official_roleAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Government_Official_Role_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Government_Official_RoleAggregateArgs>
  >;
  indian_legal_document?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Legal_Document_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Legal_DocumentArgs>
  >;
  indian_legal_documentAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Legal_Document_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Legal_DocumentAggregateArgs>
  >;
  indian_loksabha_constituency?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Loksabha_ConstituencyArgs>
  >;
  indian_loksabha_constituencyAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Loksabha_ConstituencyAggregateArgs>
  >;
  indian_loksabha_election?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_Election_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Loksabha_ElectionArgs>
  >;
  indian_loksabha_electionAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_Election_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Loksabha_ElectionAggregateArgs>
  >;
  indian_political_party?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Political_Party_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Political_PartyArgs>
  >;
  indian_political_partyAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Political_Party_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Political_PartyAggregateArgs>
  >;
  indian_state_union_territory?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_State_Union_Territory_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_State_Union_TerritoryArgs>
  >;
  indian_state_union_territoryAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_State_Union_Territory_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_State_Union_TerritoryAggregateArgs>
  >;
  indian_union_government_department?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Union_Government_DepartmentArgs>
  >;
  indian_union_government_departmentAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Union_Government_DepartmentAggregateArgs>
  >;
  indian_union_government_ministry?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Union_Government_MinistryArgs>
  >;
  indian_union_government_ministryAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Union_Government_MinistryAggregateArgs>
  >;
  indian_union_parliament_loksabha?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Loksabha_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Union_Parliament_LoksabhaArgs>
  >;
  indian_union_parliament_loksabhaAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Loksabha_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Union_Parliament_LoksabhaAggregateArgs>
  >;
  indian_vidhansabha_constituency?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Vidhansabha_ConstituencyArgs>
  >;
  indian_vidhansabha_constituencyAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Vidhansabha_Constituency_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Indian_Vidhansabha_ConstituencyAggregateArgs>
  >;
  language?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_LanguageArgs>
  >;
  languageAggregate?: Resolver<
    Maybe<ResolversTypes["_Language_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_LanguageAggregateArgs>
  >;
  language_script?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Language_ScriptArgs>
  >;
  language_scriptAggregate?: Resolver<
    Maybe<ResolversTypes["_Language_Script_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Language_ScriptAggregateArgs>
  >;
  name?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Node_UpdatesAggregateArgs>
  >;
  person?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Person_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_PersonArgs>
  >;
  personAggregate?: Resolver<
    Maybe<ResolversTypes["_Person_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_PersonAggregateArgs>
  >;
  public_policy_domain?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Public_Policy_Domain_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_Public_Policy_DomainArgs>
  >;
  public_policy_domainAggregate?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_Public_Policy_DomainAggregateArgs>
  >;
  script?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Script_"]>>>,
    ParentType,
    ContextType,
    Partial<_Name_ScriptArgs>
  >;
  scriptAggregate?: Resolver<
    Maybe<ResolversTypes["_Script_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Name_ScriptAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Name_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Name_AggregateResult"] = ResolversParentTypes["_Name_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  nameMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  nameMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Node_Update_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Node_Update_"] = ResolversParentTypes["_Node_Update_"]
> = {
  comment?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  updated_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Node_Update_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Node_Update_AggregateResult"] = ResolversParentTypes["_Node_Update_AggregateResult"]
> = {
  commentMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  commentMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  updated_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  updated_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Person_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Person_"] = ResolversParentTypes["_Person_"]
> = {
  born?: Resolver<Maybe<ResolversTypes["_Date_Time_"]>, ParentType, ContextType, Partial<_Person_BornArgs>>;
  died?: Resolver<Maybe<ResolversTypes["_Date_Time_"]>, ParentType, ContextType, Partial<_Person_DiedArgs>>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  indian_politician?: Resolver<
    Maybe<ResolversTypes["_Indian_Politician_"]>,
    ParentType,
    ContextType,
    Partial<_Person_Indian_PoliticianArgs>
  >;
  names?: Resolver<Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>, ParentType, ContextType, Partial<_Person_NamesArgs>>;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Person_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Person_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Person_Node_UpdatesAggregateArgs>
  >;
  wikidata_qid?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_page?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Person_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Person_AggregateResult"] = ResolversParentTypes["_Person_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  wikidata_qidMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikidata_qidMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Public_Policy_Domain_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Public_Policy_Domain_"] = ResolversParentTypes["_Public_Policy_Domain_"]
> = {
  description?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  government_ministries_departments?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_DepartmentsArgs>
  >;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_NamesArgs>
  >;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Node_UpdatesAggregateArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Public_Policy_Domain_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Public_Policy_Domain_AggregateResult"] = ResolversParentTypes["_Public_Policy_Domain_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  descriptionMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  descriptionMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Public_Policy_Domain_Government_Ministries_Departments_"] = ResolversParentTypes["_Public_Policy_Domain_Government_Ministries_Departments_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  indian_union_government_departments?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Department_"]>>>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_DepartmentsArgs>
  >;
  indian_union_government_departmentsAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Department_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_DepartmentsAggregateArgs>
  >;
  indian_union_government_ministries?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Indian_Union_Government_Ministry_"]>>>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_MinistriesArgs>
  >;
  indian_union_government_ministriesAggregate?: Resolver<
    Maybe<ResolversTypes["_Indian_Union_Government_Ministry_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Indian_Union_Government_MinistriesAggregateArgs>
  >;
  name_id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Node_UpdatesAggregateArgs>
  >;
  public_policy_domain?: Resolver<
    Maybe<ResolversTypes["_Public_Policy_Domain_"]>,
    ParentType,
    ContextType,
    Partial<_Public_Policy_Domain_Government_Ministries_Departments_Public_Policy_DomainArgs>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Public_Policy_Domain_Government_Ministries_Departments_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult"] = ResolversParentTypes["_Public_Policy_Domain_Government_Ministries_Departments_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_idMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_idMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Script_Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Script_"] = ResolversParentTypes["_Script_"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  languages?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Language_"]>>>,
    ParentType,
    ContextType,
    Partial<_Script_LanguagesArgs>
  >;
  languagesAggregate?: Resolver<
    Maybe<ResolversTypes["_Language_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Script_LanguagesAggregateArgs>
  >;
  name_en?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  names?: Resolver<Maybe<Array<Maybe<ResolversTypes["_Name_"]>>>, ParentType, ContextType, Partial<_Script_NamesArgs>>;
  namesAggregate?: Resolver<
    Maybe<ResolversTypes["_Name_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Script_NamesAggregateArgs>
  >;
  node_created_on?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_updates?: Resolver<
    Maybe<Array<Maybe<ResolversTypes["_Node_Update_"]>>>,
    ParentType,
    ContextType,
    Partial<_Script_Node_UpdatesArgs>
  >;
  node_updatesAggregate?: Resolver<
    Maybe<ResolversTypes["_Node_Update_AggregateResult"]>,
    ParentType,
    ContextType,
    Partial<_Script_Node_UpdatesAggregateArgs>
  >;
  wikidata_qid?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_page?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type _Script_AggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["_Script_AggregateResult"] = ResolversParentTypes["_Script_AggregateResult"]
> = {
  count?: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
  name_enMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  name_enMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  node_created_onMax?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  node_created_onMin?: Resolver<Maybe<ResolversTypes["DateTime"]>, ParentType, ContextType>;
  wikidata_qidMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikidata_qidMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMax?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  wikipedia_pageMin?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Account?: AccountResolvers<ContextType>;
  AccountAggregateResult?: AccountAggregateResultResolvers<ContextType>;
  AddAccountPayload?: AddAccountPayloadResolvers<ContextType>;
  AddSessionPayload?: AddSessionPayloadResolvers<ContextType>;
  AddUserPayload?: AddUserPayloadResolvers<ContextType>;
  AddVerificationTokenPayload?: AddVerificationTokenPayloadResolvers<ContextType>;
  Add_Country_Event_Payload?: Add_Country_Event_PayloadResolvers<ContextType>;
  Add_Country_Government_Payload?: Add_Country_Government_PayloadResolvers<ContextType>;
  Add_Country_Payload?: Add_Country_PayloadResolvers<ContextType>;
  Add_Country_Region_Payload?: Add_Country_Region_PayloadResolvers<ContextType>;
  Add_Date_Time_Payload?: Add_Date_Time_PayloadResolvers<ContextType>;
  Add_Geo_Payload?: Add_Geo_PayloadResolvers<ContextType>;
  Add_Government_System_Type_Payload?: Add_Government_System_Type_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Authority_Concentration_Payload?: Add_Government_System_Types_Authority_Concentration_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Authority_Distribution_Payload?: Add_Government_System_Types_Authority_Distribution_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Authority_Source_Payload?: Add_Government_System_Types_Authority_Source_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Authority_Status_Payload?: Add_Government_System_Types_Authority_Status_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Autocratic_Payload?: Add_Government_System_Types_Autocratic_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Democracy_Payload?: Add_Government_System_Types_Democracy_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Economic_System_Payload?: Add_Government_System_Types_Economic_System_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Head_Of_State_Or_GovernmentPayload?: Add_Government_System_Types_Head_Of_State_Or_GovernmentPayloadResolvers<ContextType>;
  Add_Government_System_Types_Monarchy_Payload?: Add_Government_System_Types_Monarchy_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Oligarchy_Payload?: Add_Government_System_Types_Oligarchy_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Partisan_Systems_Payload?: Add_Government_System_Types_Partisan_Systems_PayloadResolvers<ContextType>;
  Add_Government_System_Types_Religion_Payload?: Add_Government_System_Types_Religion_PayloadResolvers<ContextType>;
  Add_Indian_Administrative_DivisionsPayload?: Add_Indian_Administrative_DivisionsPayloadResolvers<ContextType>;
  Add_Indian_District_Payload?: Add_Indian_District_PayloadResolvers<ContextType>;
  Add_Indian_District_Region_Payload?: Add_Indian_District_Region_PayloadResolvers<ContextType>;
  Add_Indian_Government_Official_Role_Payload?: Add_Indian_Government_Official_Role_PayloadResolvers<ContextType>;
  Add_Indian_Government_System_Payload?: Add_Indian_Government_System_PayloadResolvers<ContextType>;
  Add_Indian_Legal_Document_Payload?: Add_Indian_Legal_Document_PayloadResolvers<ContextType>;
  Add_Indian_Legislative_DivisionsPayload?: Add_Indian_Legislative_DivisionsPayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Constituency_Election_Candidate_Payload?: Add_Indian_Loksabha_Constituency_Election_Candidate_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Constituency_Election_Payload?: Add_Indian_Loksabha_Constituency_Election_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload?: Add_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Constituency_Election_Result_Payload?: Add_Indian_Loksabha_Constituency_Election_Result_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Constituency_Payload?: Add_Indian_Loksabha_Constituency_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Constituency_Region_Payload?: Add_Indian_Loksabha_Constituency_Region_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Election_Payload?: Add_Indian_Loksabha_Election_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Election_Phase_Payload?: Add_Indian_Loksabha_Election_Phase_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Election_Result_Payload?: Add_Indian_Loksabha_Election_Result_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Member_Payload?: Add_Indian_Loksabha_Member_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Payload?: Add_Indian_Loksabha_PayloadResolvers<ContextType>;
  Add_Indian_Loksabha_Session_Payload?: Add_Indian_Loksabha_Session_PayloadResolvers<ContextType>;
  Add_Indian_Political_Party_Loksabha_Election_Payload?: Add_Indian_Political_Party_Loksabha_Election_PayloadResolvers<ContextType>;
  Add_Indian_Political_Party_Member_Payload?: Add_Indian_Political_Party_Member_PayloadResolvers<ContextType>;
  Add_Indian_Political_Party_Payload?: Add_Indian_Political_Party_PayloadResolvers<ContextType>;
  Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload?: Add_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_PayloadResolvers<ContextType>;
  Add_Indian_Politician_Payload?: Add_Indian_Politician_PayloadResolvers<ContextType>;
  Add_Indian_Prime_Minister_Payload?: Add_Indian_Prime_Minister_PayloadResolvers<ContextType>;
  Add_Indian_State_Union_Territory_Payload?: Add_Indian_State_Union_Territory_PayloadResolvers<ContextType>;
  Add_Indian_State_Union_Territory_Region_Payload?: Add_Indian_State_Union_Territory_Region_PayloadResolvers<ContextType>;
  Add_Indian_Union_Council_Of_Ministers_Payload?: Add_Indian_Union_Council_Of_Ministers_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Cabinet_Minister_Payload?: Add_Indian_Union_Government_Cabinet_Minister_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Cabinet_Payload?: Add_Indian_Union_Government_Cabinet_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Department_Payload?: Add_Indian_Union_Government_Department_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload?: Add_Indian_Union_Government_Minister_Of_State_Independent_Charge_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Minister_Of_State_Payload?: Add_Indian_Union_Government_Minister_Of_State_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Ministry_Payload?: Add_Indian_Union_Government_Ministry_PayloadResolvers<ContextType>;
  Add_Indian_Union_Government_Payload?: Add_Indian_Union_Government_PayloadResolvers<ContextType>;
  Add_Indian_Vidhansabha_Constituency_Payload?: Add_Indian_Vidhansabha_Constituency_PayloadResolvers<ContextType>;
  Add_Indian_Vidhansabha_Constituency_Region_Payload?: Add_Indian_Vidhansabha_Constituency_Region_PayloadResolvers<ContextType>;
  Add_Language_Payload?: Add_Language_PayloadResolvers<ContextType>;
  Add_Language_Script_Payload?: Add_Language_Script_PayloadResolvers<ContextType>;
  Add_Name_Payload?: Add_Name_PayloadResolvers<ContextType>;
  Add_Node_Update_Payload?: Add_Node_Update_PayloadResolvers<ContextType>;
  Add_Person_Payload?: Add_Person_PayloadResolvers<ContextType>;
  Add_Public_Policy_Domain_Government_Ministries_Departments_Payload?: Add_Public_Policy_Domain_Government_Ministries_Departments_PayloadResolvers<ContextType>;
  Add_Public_Policy_Domain_Payload?: Add_Public_Policy_Domain_PayloadResolvers<ContextType>;
  Add_Script_Payload?: Add_Script_PayloadResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  DeleteAccountPayload?: DeleteAccountPayloadResolvers<ContextType>;
  DeleteSessionPayload?: DeleteSessionPayloadResolvers<ContextType>;
  DeleteUserPayload?: DeleteUserPayloadResolvers<ContextType>;
  DeleteVerificationTokenPayload?: DeleteVerificationTokenPayloadResolvers<ContextType>;
  Delete_Country_Event_Payload?: Delete_Country_Event_PayloadResolvers<ContextType>;
  Delete_Country_Government_Payload?: Delete_Country_Government_PayloadResolvers<ContextType>;
  Delete_Country_Payload?: Delete_Country_PayloadResolvers<ContextType>;
  Delete_Country_Region_Payload?: Delete_Country_Region_PayloadResolvers<ContextType>;
  Delete_Date_Time_Payload?: Delete_Date_Time_PayloadResolvers<ContextType>;
  Delete_Geo_Payload?: Delete_Geo_PayloadResolvers<ContextType>;
  Delete_Government_System_Type_Payload?: Delete_Government_System_Type_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Authority_Concentration_Payload?: Delete_Government_System_Types_Authority_Concentration_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Authority_Distribution_Payload?: Delete_Government_System_Types_Authority_Distribution_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Authority_Source_Payload?: Delete_Government_System_Types_Authority_Source_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Authority_Status_Payload?: Delete_Government_System_Types_Authority_Status_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Autocratic_Payload?: Delete_Government_System_Types_Autocratic_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Democracy_Payload?: Delete_Government_System_Types_Democracy_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Economic_System_Payload?: Delete_Government_System_Types_Economic_System_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayload?: Delete_Government_System_Types_Head_Of_State_Or_GovernmentPayloadResolvers<ContextType>;
  Delete_Government_System_Types_Monarchy_Payload?: Delete_Government_System_Types_Monarchy_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Oligarchy_Payload?: Delete_Government_System_Types_Oligarchy_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Partisan_Systems_Payload?: Delete_Government_System_Types_Partisan_Systems_PayloadResolvers<ContextType>;
  Delete_Government_System_Types_Religion_Payload?: Delete_Government_System_Types_Religion_PayloadResolvers<ContextType>;
  Delete_Indian_Administrative_DivisionsPayload?: Delete_Indian_Administrative_DivisionsPayloadResolvers<ContextType>;
  Delete_Indian_District_Payload?: Delete_Indian_District_PayloadResolvers<ContextType>;
  Delete_Indian_District_Region_Payload?: Delete_Indian_District_Region_PayloadResolvers<ContextType>;
  Delete_Indian_Government_Official_Role_Payload?: Delete_Indian_Government_Official_Role_PayloadResolvers<ContextType>;
  Delete_Indian_Government_System_Payload?: Delete_Indian_Government_System_PayloadResolvers<ContextType>;
  Delete_Indian_Legal_Document_Payload?: Delete_Indian_Legal_Document_PayloadResolvers<ContextType>;
  Delete_Indian_Legislative_DivisionsPayload?: Delete_Indian_Legislative_DivisionsPayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Constituency_Election_Candidate_Payload?: Delete_Indian_Loksabha_Constituency_Election_Candidate_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Constituency_Election_Payload?: Delete_Indian_Loksabha_Constituency_Election_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload?: Delete_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Constituency_Election_Result_Payload?: Delete_Indian_Loksabha_Constituency_Election_Result_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Constituency_Payload?: Delete_Indian_Loksabha_Constituency_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Constituency_Region_Payload?: Delete_Indian_Loksabha_Constituency_Region_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Election_Payload?: Delete_Indian_Loksabha_Election_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Election_Phase_Payload?: Delete_Indian_Loksabha_Election_Phase_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Election_Result_Payload?: Delete_Indian_Loksabha_Election_Result_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Member_Payload?: Delete_Indian_Loksabha_Member_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Payload?: Delete_Indian_Loksabha_PayloadResolvers<ContextType>;
  Delete_Indian_Loksabha_Session_Payload?: Delete_Indian_Loksabha_Session_PayloadResolvers<ContextType>;
  Delete_Indian_Political_Party_Loksabha_Election_Payload?: Delete_Indian_Political_Party_Loksabha_Election_PayloadResolvers<ContextType>;
  Delete_Indian_Political_Party_Member_Payload?: Delete_Indian_Political_Party_Member_PayloadResolvers<ContextType>;
  Delete_Indian_Political_Party_Payload?: Delete_Indian_Political_Party_PayloadResolvers<ContextType>;
  Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload?: Delete_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_PayloadResolvers<ContextType>;
  Delete_Indian_Politician_Payload?: Delete_Indian_Politician_PayloadResolvers<ContextType>;
  Delete_Indian_Prime_Minister_Payload?: Delete_Indian_Prime_Minister_PayloadResolvers<ContextType>;
  Delete_Indian_State_Union_Territory_Payload?: Delete_Indian_State_Union_Territory_PayloadResolvers<ContextType>;
  Delete_Indian_State_Union_Territory_Region_Payload?: Delete_Indian_State_Union_Territory_Region_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Council_Of_Ministers_Payload?: Delete_Indian_Union_Council_Of_Ministers_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Cabinet_Minister_Payload?: Delete_Indian_Union_Government_Cabinet_Minister_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Cabinet_Payload?: Delete_Indian_Union_Government_Cabinet_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Department_Payload?: Delete_Indian_Union_Government_Department_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload?: Delete_Indian_Union_Government_Minister_Of_State_Independent_Charge_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Minister_Of_State_Payload?: Delete_Indian_Union_Government_Minister_Of_State_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Ministry_Payload?: Delete_Indian_Union_Government_Ministry_PayloadResolvers<ContextType>;
  Delete_Indian_Union_Government_Payload?: Delete_Indian_Union_Government_PayloadResolvers<ContextType>;
  Delete_Indian_Vidhansabha_Constituency_Payload?: Delete_Indian_Vidhansabha_Constituency_PayloadResolvers<ContextType>;
  Delete_Indian_Vidhansabha_Constituency_Region_Payload?: Delete_Indian_Vidhansabha_Constituency_Region_PayloadResolvers<ContextType>;
  Delete_Language_Payload?: Delete_Language_PayloadResolvers<ContextType>;
  Delete_Language_Script_Payload?: Delete_Language_Script_PayloadResolvers<ContextType>;
  Delete_Name_Payload?: Delete_Name_PayloadResolvers<ContextType>;
  Delete_Node_Update_Payload?: Delete_Node_Update_PayloadResolvers<ContextType>;
  Delete_Person_Payload?: Delete_Person_PayloadResolvers<ContextType>;
  Delete_Public_Policy_Domain_Government_Ministries_Departments_Payload?: Delete_Public_Policy_Domain_Government_Ministries_Departments_PayloadResolvers<ContextType>;
  Delete_Public_Policy_Domain_Payload?: Delete_Public_Policy_Domain_PayloadResolvers<ContextType>;
  Delete_Script_Payload?: Delete_Script_PayloadResolvers<ContextType>;
  Int64?: GraphQLScalarType;
  MultiPolygon?: MultiPolygonResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Point?: PointResolvers<ContextType>;
  PointList?: PointListResolvers<ContextType>;
  Polygon?: PolygonResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Session?: SessionResolvers<ContextType>;
  SessionAggregateResult?: SessionAggregateResultResolvers<ContextType>;
  UpdateAccountPayload?: UpdateAccountPayloadResolvers<ContextType>;
  UpdateSessionPayload?: UpdateSessionPayloadResolvers<ContextType>;
  UpdateUserPayload?: UpdateUserPayloadResolvers<ContextType>;
  UpdateVerificationTokenPayload?: UpdateVerificationTokenPayloadResolvers<ContextType>;
  Update_Country_Event_Payload?: Update_Country_Event_PayloadResolvers<ContextType>;
  Update_Country_Government_Payload?: Update_Country_Government_PayloadResolvers<ContextType>;
  Update_Country_Payload?: Update_Country_PayloadResolvers<ContextType>;
  Update_Country_Region_Payload?: Update_Country_Region_PayloadResolvers<ContextType>;
  Update_Date_Time_Payload?: Update_Date_Time_PayloadResolvers<ContextType>;
  Update_Geo_Payload?: Update_Geo_PayloadResolvers<ContextType>;
  Update_Government_System_Type_Payload?: Update_Government_System_Type_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Authority_Concentration_Payload?: Update_Government_System_Types_Authority_Concentration_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Authority_Distribution_Payload?: Update_Government_System_Types_Authority_Distribution_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Authority_Source_Payload?: Update_Government_System_Types_Authority_Source_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Authority_Status_Payload?: Update_Government_System_Types_Authority_Status_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Autocratic_Payload?: Update_Government_System_Types_Autocratic_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Democracy_Payload?: Update_Government_System_Types_Democracy_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Economic_System_Payload?: Update_Government_System_Types_Economic_System_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Head_Of_State_Or_GovernmentPayload?: Update_Government_System_Types_Head_Of_State_Or_GovernmentPayloadResolvers<ContextType>;
  Update_Government_System_Types_Monarchy_Payload?: Update_Government_System_Types_Monarchy_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Oligarchy_Payload?: Update_Government_System_Types_Oligarchy_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Partisan_Systems_Payload?: Update_Government_System_Types_Partisan_Systems_PayloadResolvers<ContextType>;
  Update_Government_System_Types_Religion_Payload?: Update_Government_System_Types_Religion_PayloadResolvers<ContextType>;
  Update_Indian_Administrative_DivisionsPayload?: Update_Indian_Administrative_DivisionsPayloadResolvers<ContextType>;
  Update_Indian_District_Payload?: Update_Indian_District_PayloadResolvers<ContextType>;
  Update_Indian_District_Region_Payload?: Update_Indian_District_Region_PayloadResolvers<ContextType>;
  Update_Indian_Government_Official_Role_Payload?: Update_Indian_Government_Official_Role_PayloadResolvers<ContextType>;
  Update_Indian_Government_System_Payload?: Update_Indian_Government_System_PayloadResolvers<ContextType>;
  Update_Indian_Legal_Document_Payload?: Update_Indian_Legal_Document_PayloadResolvers<ContextType>;
  Update_Indian_Legislative_DivisionsPayload?: Update_Indian_Legislative_DivisionsPayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Constituency_Election_Candidate_Payload?: Update_Indian_Loksabha_Constituency_Election_Candidate_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Constituency_Election_Payload?: Update_Indian_Loksabha_Constituency_Election_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Payload?: Update_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Constituency_Election_Result_Payload?: Update_Indian_Loksabha_Constituency_Election_Result_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Constituency_Payload?: Update_Indian_Loksabha_Constituency_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Constituency_Region_Payload?: Update_Indian_Loksabha_Constituency_Region_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Election_Payload?: Update_Indian_Loksabha_Election_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Election_Phase_Payload?: Update_Indian_Loksabha_Election_Phase_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Election_Result_Payload?: Update_Indian_Loksabha_Election_Result_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Member_Payload?: Update_Indian_Loksabha_Member_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Payload?: Update_Indian_Loksabha_PayloadResolvers<ContextType>;
  Update_Indian_Loksabha_Session_Payload?: Update_Indian_Loksabha_Session_PayloadResolvers<ContextType>;
  Update_Indian_Political_Party_Loksabha_Election_Payload?: Update_Indian_Political_Party_Loksabha_Election_PayloadResolvers<ContextType>;
  Update_Indian_Political_Party_Member_Payload?: Update_Indian_Political_Party_Member_PayloadResolvers<ContextType>;
  Update_Indian_Political_Party_Payload?: Update_Indian_Political_Party_PayloadResolvers<ContextType>;
  Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Payload?: Update_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_PayloadResolvers<ContextType>;
  Update_Indian_Politician_Payload?: Update_Indian_Politician_PayloadResolvers<ContextType>;
  Update_Indian_Prime_Minister_Payload?: Update_Indian_Prime_Minister_PayloadResolvers<ContextType>;
  Update_Indian_State_Union_Territory_Payload?: Update_Indian_State_Union_Territory_PayloadResolvers<ContextType>;
  Update_Indian_State_Union_Territory_Region_Payload?: Update_Indian_State_Union_Territory_Region_PayloadResolvers<ContextType>;
  Update_Indian_Union_Council_Of_Ministers_Payload?: Update_Indian_Union_Council_Of_Ministers_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Cabinet_Minister_Payload?: Update_Indian_Union_Government_Cabinet_Minister_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Cabinet_Payload?: Update_Indian_Union_Government_Cabinet_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Department_Payload?: Update_Indian_Union_Government_Department_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_Payload?: Update_Indian_Union_Government_Minister_Of_State_Independent_Charge_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Minister_Of_State_Payload?: Update_Indian_Union_Government_Minister_Of_State_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Ministry_Payload?: Update_Indian_Union_Government_Ministry_PayloadResolvers<ContextType>;
  Update_Indian_Union_Government_Payload?: Update_Indian_Union_Government_PayloadResolvers<ContextType>;
  Update_Indian_Vidhansabha_Constituency_Payload?: Update_Indian_Vidhansabha_Constituency_PayloadResolvers<ContextType>;
  Update_Indian_Vidhansabha_Constituency_Region_Payload?: Update_Indian_Vidhansabha_Constituency_Region_PayloadResolvers<ContextType>;
  Update_Language_Payload?: Update_Language_PayloadResolvers<ContextType>;
  Update_Language_Script_Payload?: Update_Language_Script_PayloadResolvers<ContextType>;
  Update_Name_Payload?: Update_Name_PayloadResolvers<ContextType>;
  Update_Node_Update_Payload?: Update_Node_Update_PayloadResolvers<ContextType>;
  Update_Person_Payload?: Update_Person_PayloadResolvers<ContextType>;
  Update_Public_Policy_Domain_Government_Ministries_Departments_Payload?: Update_Public_Policy_Domain_Government_Ministries_Departments_PayloadResolvers<ContextType>;
  Update_Public_Policy_Domain_Payload?: Update_Public_Policy_Domain_PayloadResolvers<ContextType>;
  Update_Script_Payload?: Update_Script_PayloadResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserAggregateResult?: UserAggregateResultResolvers<ContextType>;
  VerificationToken?: VerificationTokenResolvers<ContextType>;
  VerificationTokenAggregateResult?: VerificationTokenAggregateResultResolvers<ContextType>;
  _Country_?: _Country_Resolvers<ContextType>;
  _Country_AggregateResult?: _Country_AggregateResultResolvers<ContextType>;
  _Country_Event_?: _Country_Event_Resolvers<ContextType>;
  _Country_Event_AggregateResult?: _Country_Event_AggregateResultResolvers<ContextType>;
  _Country_Government_?: _Country_Government_Resolvers<ContextType>;
  _Country_Government_AggregateResult?: _Country_Government_AggregateResultResolvers<ContextType>;
  _Country_Region_?: _Country_Region_Resolvers<ContextType>;
  _Country_Region_AggregateResult?: _Country_Region_AggregateResultResolvers<ContextType>;
  _Date_Time_?: _Date_Time_Resolvers<ContextType>;
  _Date_Time_AggregateResult?: _Date_Time_AggregateResultResolvers<ContextType>;
  _Geo_?: _Geo_Resolvers<ContextType>;
  _Geo_AggregateResult?: _Geo_AggregateResultResolvers<ContextType>;
  _Government_System_Type_?: _Government_System_Type_Resolvers<ContextType>;
  _Government_System_Type_AggregateResult?: _Government_System_Type_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Authority_Concentration_?: _Government_System_Types_Authority_Concentration_Resolvers<ContextType>;
  _Government_System_Types_Authority_Concentration_AggregateResult?: _Government_System_Types_Authority_Concentration_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Authority_Distribution_?: _Government_System_Types_Authority_Distribution_Resolvers<ContextType>;
  _Government_System_Types_Authority_Distribution_AggregateResult?: _Government_System_Types_Authority_Distribution_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Authority_Source_?: _Government_System_Types_Authority_Source_Resolvers<ContextType>;
  _Government_System_Types_Authority_Source_AggregateResult?: _Government_System_Types_Authority_Source_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Authority_Status_?: _Government_System_Types_Authority_Status_Resolvers<ContextType>;
  _Government_System_Types_Authority_Status_AggregateResult?: _Government_System_Types_Authority_Status_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Autocratic_?: _Government_System_Types_Autocratic_Resolvers<ContextType>;
  _Government_System_Types_Autocratic_AggregateResult?: _Government_System_Types_Autocratic_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Democracy_?: _Government_System_Types_Democracy_Resolvers<ContextType>;
  _Government_System_Types_Democracy_AggregateResult?: _Government_System_Types_Democracy_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Economic_System_?: _Government_System_Types_Economic_System_Resolvers<ContextType>;
  _Government_System_Types_Economic_System_AggregateResult?: _Government_System_Types_Economic_System_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Head_Of_State_Or_Government?: _Government_System_Types_Head_Of_State_Or_GovernmentResolvers<ContextType>;
  _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResult?: _Government_System_Types_Head_Of_State_Or_GovernmentAggregateResultResolvers<ContextType>;
  _Government_System_Types_Monarchy_?: _Government_System_Types_Monarchy_Resolvers<ContextType>;
  _Government_System_Types_Monarchy_AggregateResult?: _Government_System_Types_Monarchy_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Oligarchy_?: _Government_System_Types_Oligarchy_Resolvers<ContextType>;
  _Government_System_Types_Oligarchy_AggregateResult?: _Government_System_Types_Oligarchy_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Partisan_Systems_?: _Government_System_Types_Partisan_Systems_Resolvers<ContextType>;
  _Government_System_Types_Partisan_Systems_AggregateResult?: _Government_System_Types_Partisan_Systems_AggregateResultResolvers<ContextType>;
  _Government_System_Types_Religion_?: _Government_System_Types_Religion_Resolvers<ContextType>;
  _Government_System_Types_Religion_AggregateResult?: _Government_System_Types_Religion_AggregateResultResolvers<ContextType>;
  _Indian_Administrative_Divisions?: _Indian_Administrative_DivisionsResolvers<ContextType>;
  _Indian_Administrative_DivisionsAggregateResult?: _Indian_Administrative_DivisionsAggregateResultResolvers<ContextType>;
  _Indian_District_?: _Indian_District_Resolvers<ContextType>;
  _Indian_District_AggregateResult?: _Indian_District_AggregateResultResolvers<ContextType>;
  _Indian_District_Region_?: _Indian_District_Region_Resolvers<ContextType>;
  _Indian_District_Region_AggregateResult?: _Indian_District_Region_AggregateResultResolvers<ContextType>;
  _Indian_Government_Official_Role_?: _Indian_Government_Official_Role_Resolvers<ContextType>;
  _Indian_Government_Official_Role_AggregateResult?: _Indian_Government_Official_Role_AggregateResultResolvers<ContextType>;
  _Indian_Government_System_?: _Indian_Government_System_Resolvers<ContextType>;
  _Indian_Government_System_AggregateResult?: _Indian_Government_System_AggregateResultResolvers<ContextType>;
  _Indian_Legal_Document_?: _Indian_Legal_Document_Resolvers<ContextType>;
  _Indian_Legal_Document_AggregateResult?: _Indian_Legal_Document_AggregateResultResolvers<ContextType>;
  _Indian_Legislative_Divisions?: _Indian_Legislative_DivisionsResolvers<ContextType>;
  _Indian_Legislative_DivisionsAggregateResult?: _Indian_Legislative_DivisionsAggregateResultResolvers<ContextType>;
  _Indian_Loksabha_?: _Indian_Loksabha_Resolvers<ContextType>;
  _Indian_Loksabha_AggregateResult?: _Indian_Loksabha_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Constituency_?: _Indian_Loksabha_Constituency_Resolvers<ContextType>;
  _Indian_Loksabha_Constituency_AggregateResult?: _Indian_Loksabha_Constituency_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_?: _Indian_Loksabha_Constituency_Election_Resolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_AggregateResult?: _Indian_Loksabha_Constituency_Election_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_Candidate_?: _Indian_Loksabha_Constituency_Election_Candidate_Resolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_Candidate_AggregateResult?: _Indian_Loksabha_Constituency_Election_Candidate_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_Result_?: _Indian_Loksabha_Constituency_Election_Result_Resolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_Result_AggregateResult?: _Indian_Loksabha_Constituency_Election_Result_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_?: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_Resolvers<ContextType>;
  _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResult?: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Constituency_Region_?: _Indian_Loksabha_Constituency_Region_Resolvers<ContextType>;
  _Indian_Loksabha_Constituency_Region_AggregateResult?: _Indian_Loksabha_Constituency_Region_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Election_?: _Indian_Loksabha_Election_Resolvers<ContextType>;
  _Indian_Loksabha_Election_AggregateResult?: _Indian_Loksabha_Election_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Election_Phase_?: _Indian_Loksabha_Election_Phase_Resolvers<ContextType>;
  _Indian_Loksabha_Election_Phase_AggregateResult?: _Indian_Loksabha_Election_Phase_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Election_Result_?: _Indian_Loksabha_Election_Result_Resolvers<ContextType>;
  _Indian_Loksabha_Election_Result_AggregateResult?: _Indian_Loksabha_Election_Result_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Member_?: _Indian_Loksabha_Member_Resolvers<ContextType>;
  _Indian_Loksabha_Member_AggregateResult?: _Indian_Loksabha_Member_AggregateResultResolvers<ContextType>;
  _Indian_Loksabha_Session_?: _Indian_Loksabha_Session_Resolvers<ContextType>;
  _Indian_Loksabha_Session_AggregateResult?: _Indian_Loksabha_Session_AggregateResultResolvers<ContextType>;
  _Indian_Political_Party_?: _Indian_Political_Party_Resolvers<ContextType>;
  _Indian_Political_Party_AggregateResult?: _Indian_Political_Party_AggregateResultResolvers<ContextType>;
  _Indian_Political_Party_Loksabha_Election_?: _Indian_Political_Party_Loksabha_Election_Resolvers<ContextType>;
  _Indian_Political_Party_Loksabha_Election_AggregateResult?: _Indian_Political_Party_Loksabha_Election_AggregateResultResolvers<ContextType>;
  _Indian_Political_Party_Member_?: _Indian_Political_Party_Member_Resolvers<ContextType>;
  _Indian_Political_Party_Member_AggregateResult?: _Indian_Political_Party_Member_AggregateResultResolvers<ContextType>;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_?: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_Resolvers<ContextType>;
  _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResult?: _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_AggregateResultResolvers<ContextType>;
  _Indian_Politician_?: _Indian_Politician_Resolvers<ContextType>;
  _Indian_Politician_AggregateResult?: _Indian_Politician_AggregateResultResolvers<ContextType>;
  _Indian_Prime_Minister_?: _Indian_Prime_Minister_Resolvers<ContextType>;
  _Indian_Prime_Minister_AggregateResult?: _Indian_Prime_Minister_AggregateResultResolvers<ContextType>;
  _Indian_State_Union_Territory_?: _Indian_State_Union_Territory_Resolvers<ContextType>;
  _Indian_State_Union_Territory_AggregateResult?: _Indian_State_Union_Territory_AggregateResultResolvers<ContextType>;
  _Indian_State_Union_Territory_Region_?: _Indian_State_Union_Territory_Region_Resolvers<ContextType>;
  _Indian_State_Union_Territory_Region_AggregateResult?: _Indian_State_Union_Territory_Region_AggregateResultResolvers<ContextType>;
  _Indian_Union_Council_Of_Ministers_?: _Indian_Union_Council_Of_Ministers_Resolvers<ContextType>;
  _Indian_Union_Council_Of_Ministers_AggregateResult?: _Indian_Union_Council_Of_Ministers_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_?: _Indian_Union_Government_Resolvers<ContextType>;
  _Indian_Union_Government_AggregateResult?: _Indian_Union_Government_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_Cabinet_?: _Indian_Union_Government_Cabinet_Resolvers<ContextType>;
  _Indian_Union_Government_Cabinet_AggregateResult?: _Indian_Union_Government_Cabinet_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_Cabinet_Minister_?: _Indian_Union_Government_Cabinet_Minister_Resolvers<ContextType>;
  _Indian_Union_Government_Cabinet_Minister_AggregateResult?: _Indian_Union_Government_Cabinet_Minister_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_Department_?: _Indian_Union_Government_Department_Resolvers<ContextType>;
  _Indian_Union_Government_Department_AggregateResult?: _Indian_Union_Government_Department_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_Minister_Of_State_?: _Indian_Union_Government_Minister_Of_State_Resolvers<ContextType>;
  _Indian_Union_Government_Minister_Of_State_AggregateResult?: _Indian_Union_Government_Minister_Of_State_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_?: _Indian_Union_Government_Minister_Of_State_Independent_Charge_Resolvers<ContextType>;
  _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResult?: _Indian_Union_Government_Minister_Of_State_Independent_Charge_AggregateResultResolvers<ContextType>;
  _Indian_Union_Government_Ministry_?: _Indian_Union_Government_Ministry_Resolvers<ContextType>;
  _Indian_Union_Government_Ministry_AggregateResult?: _Indian_Union_Government_Ministry_AggregateResultResolvers<ContextType>;
  _Indian_Vidhansabha_Constituency_?: _Indian_Vidhansabha_Constituency_Resolvers<ContextType>;
  _Indian_Vidhansabha_Constituency_AggregateResult?: _Indian_Vidhansabha_Constituency_AggregateResultResolvers<ContextType>;
  _Indian_Vidhansabha_Constituency_Region_?: _Indian_Vidhansabha_Constituency_Region_Resolvers<ContextType>;
  _Indian_Vidhansabha_Constituency_Region_AggregateResult?: _Indian_Vidhansabha_Constituency_Region_AggregateResultResolvers<ContextType>;
  _Language_?: _Language_Resolvers<ContextType>;
  _Language_AggregateResult?: _Language_AggregateResultResolvers<ContextType>;
  _Language_Script_?: _Language_Script_Resolvers<ContextType>;
  _Language_Script_AggregateResult?: _Language_Script_AggregateResultResolvers<ContextType>;
  _Name_?: _Name_Resolvers<ContextType>;
  _Name_AggregateResult?: _Name_AggregateResultResolvers<ContextType>;
  _Node_Update_?: _Node_Update_Resolvers<ContextType>;
  _Node_Update_AggregateResult?: _Node_Update_AggregateResultResolvers<ContextType>;
  _Person_?: _Person_Resolvers<ContextType>;
  _Person_AggregateResult?: _Person_AggregateResultResolvers<ContextType>;
  _Public_Policy_Domain_?: _Public_Policy_Domain_Resolvers<ContextType>;
  _Public_Policy_Domain_AggregateResult?: _Public_Policy_Domain_AggregateResultResolvers<ContextType>;
  _Public_Policy_Domain_Government_Ministries_Departments_?: _Public_Policy_Domain_Government_Ministries_Departments_Resolvers<ContextType>;
  _Public_Policy_Domain_Government_Ministries_Departments_AggregateResult?: _Public_Policy_Domain_Government_Ministries_Departments_AggregateResultResolvers<ContextType>;
  _Script_?: _Script_Resolvers<ContextType>;
  _Script_AggregateResult?: _Script_AggregateResultResolvers<ContextType>;
};

export type DirectiveResolvers<ContextType = any> = {
  auth?: AuthDirectiveResolver<any, any, ContextType>;
  cacheControl?: CacheControlDirectiveResolver<any, any, ContextType>;
  cascade?: CascadeDirectiveResolver<any, any, ContextType>;
  custom?: CustomDirectiveResolver<any, any, ContextType>;
  default?: DefaultDirectiveResolver<any, any, ContextType>;
  dgraph?: DgraphDirectiveResolver<any, any, ContextType>;
  embedding?: EmbeddingDirectiveResolver<any, any, ContextType>;
  generate?: GenerateDirectiveResolver<any, any, ContextType>;
  hasInverse?: HasInverseDirectiveResolver<any, any, ContextType>;
  id?: IdDirectiveResolver<any, any, ContextType>;
  lambda?: LambdaDirectiveResolver<any, any, ContextType>;
  lambdaOnMutate?: LambdaOnMutateDirectiveResolver<any, any, ContextType>;
  remote?: RemoteDirectiveResolver<any, any, ContextType>;
  remoteResponse?: RemoteResponseDirectiveResolver<any, any, ContextType>;
  search?: SearchDirectiveResolver<any, any, ContextType>;
  secret?: SecretDirectiveResolver<any, any, ContextType>;
  withSubscription?: WithSubscriptionDirectiveResolver<any, any, ContextType>;
};
