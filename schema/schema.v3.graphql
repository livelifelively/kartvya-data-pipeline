# USER AUTHENTICATION
# values in camelcase are due to @auth/core adapter type definition

type Account {
  id: ID

  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}

type Session {
  id: ID

  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}

type User {
  id: ID

  name: String
  email: String @id
  emailVerified: DateTime
  image: String
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
  # citizen_profile: _Citizen_Profile_
}

type VerificationToken {
  id: ID

  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}

# type _Citizen_Profile_ {
#   id: ID

#   user: User @hasInverse(field: "citizen_profile")

#   # followed administrative region entities
#   country: [_Administrative_Entity_]
#   state: [_Administrative_Entity_]
#   zonal_council: [_Administrative_Entity_]
#   district: [_Administrative_Entity_]
#   loksabha_constituency: [_Administrative_Entity_]
#   vidhansabha_constituency: [_Administrative_Entity_]

#   # policy subjects
#   # #TODO
# }

type _Admin_Comments_ {
  id: ID!
  text: String
  created_on: DateTime
}

# language and scripts
# text, especially names can be in multiple languages and scripts
type _Language_ {
  id: ID!

  name_en: String! @id
  names: [_Name_] @hasInverse(field: "language")
  scripts: [_Script_]

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Script_ {
  id: ID!

  name_en: String! @id
  names: [_Name_] @hasInverse(field: "script")
  languages: [_Language_] @hasInverse(field: "scripts")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# instance of language + script combination.
type _Language_Script_ {
  id: ID!

  name_en: String! @id
  language: _Language_!
  script: _Script_!

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# the "WHO" of 5W1H #ENTRY_NODE
# #ENTRY_NODE
# name of all entities in the knowledge graph.
# an entry point for all.
# one name can be shared by multiple entities.
type _Name_ {
  id: ID!

  name: String! @id @search(by: [hash, term, fulltext])
  # language-script combination in which name is saved
  language_script: _Language_Script_

  # if name is of language or a script
  language: [_Language_]
  script: [_Script_]

  # indian_legal_document: [_Indian_Legal_Document_]
  country: [_Country_]
  # in_zonal_council: [_IN_Zonal_Council_]

  country_event: [_Country_Event_]
  country_government: [_Country_Government_]
  government_system_type_economic_system: [_Government_System_Types_Economic_System_]
  government_system_type_religion: [_Government_System_Types_Religion_]
  government_system_type_head_of_government: [_Government_System_Types_Head_Of_Government_]
  government_system_type_head_of_state: [_Government_System_Types_Head_Of_State_]
  government_system_type_partisan_systems: [_Government_System_Types_Partisan_Systems_]
  government_system_type_democracy: [_Government_System_Types_Democracy_]
  government_system_type_oligarchy: [_Government_System_Types_Oligarchy_]
  government_system_type_autocratic: [_Government_System_Types_Autocratic_]
  government_system_type_monarchy: [_Government_System_Types_Monarchy_]
  government_system_type_authority_distribution: [_Government_System_Types_Authority_Distribution_]
  government_system_type_authority_concentration: [_Government_System_Types_Authority_Concentration_]
  government_system_type_authority_source: [_Government_System_Types_Authority_Source_]
  government_system_type_authority_status: [_Government_System_Types_Authority_Status_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

enum _Location_Or_Region_Category_ {
  Location
  Region
}

enum _Geo_Precision_ {
  # e.g. countries in world map on low res map image
  Extra_Low
  Low
  Medium
  High
  Very_High
  Near_Real_World
}

# the "WHERE" of 5W1H
# #ENTRY_NODE
# tile by tile geo information and how its related to political regions
type _Geo_ {
  id: ID!
  # CHANGE: not to include category, if has location,
  category: _Location_Or_Region_Category_ @search(by: [exact])

  # if the category is location
  location: Point @search

  # if the category is region
  area: MultiPolygon @search

  precision: Int @search

  country_boundary_actual: _Country_Region_
  country_boundary_official: _Country_Region_
  country_boundary_world_official: _Country_Region_

  in_zonal_council_boundary: _Country_Region_
  in_state_boundary: _Country_Region_
  in_union_territory_boundary: _Country_Region_
  in_district_boundary: _Country_Region_
  in_vidhansabha_constituency_boundary: _Country_Region_
  in_loksabha_constituency_boundary: _Country_Region_

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

enum Date_Time_Precision_Category {
  Year
  Month
  Day
  Hour
  Minute
  Second
}

type _Date_Time_ {
  id: ID!

  date_time: DateTime @search(by: [hour])
  date_time_precision: Date_Time_Precision_Category @search(by: [exact])

  from_datetime_country_event: [_Country_Event_]
  # end date for ranged events
  to_datetime_country_event: [_Country_Event_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# the "WHAT" of 5W1H.
# will have to have multiple node types for the events.
#
type _Country_Event_ {
  id: ID!

  # if involves multiple countrys
  country: [_Country_]

  # specific to this event. should be able to identify the event and country.
  # would be best if the value can be unique, though not setting that as a condition as of now.
  names: [_Name_] @hasInverse(field: "country_event")
  description: String! @search(by: [exact, fulltext, term])

  # broad categories. "term criteria": can be applicable to any country.
  # "Declared Independence", "Civil War", "Independence Day", "Declared as Republic", "Declared War", "Hoasted Olympic", "Launched a Sattelite"
  # cannot be an enum (at least at this point) since can have too many values,
  # unless we reach a point where we have a sure number which may not change much.
  event_type: String! @search(by: [exact, fulltext, term])

  # time range event or one time
  one_time_event: Boolean

  datetime_from: _Date_Time_! @hasInverse(field: "from_datetime_country_event")
  datetime_to: _Date_Time_ @hasInverse(field: "to_datetime_country_event")

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Country_ {
  id: ID!
  name_id: String! @id

  names: [_Name_!]! @hasInverse(field: "country")

  region: [_Country_Region_]

  # legal: [_Country_Legal_]

  government: _Country_Government_

  events: [_Country_Event_] @hasInverse(field: "country")

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# political regions associated with and within a country
type _Country_Region_ {
  id: ID!

  country: _Country_ @hasInverse(field: "region")

  # date on which the region changed
  # e.g. sikkim added to India
  # version: DateTime @search

  established: _Country_Event_
  disestablished: _Country_Event_

  # how the country region related to other region types
  # capital: [_Countryal_Capital_City_]
  # zonal_council: [_IN_Zonal_Council_Region_] @hasInverse(field: "country")
  # state: [_IN_State_Region_] @hasInverse(field: "country")
  # union_territory: [_IN_Union_Territory_Region_] @hasInverse(field: "country")

  # array because, there can be multiple version with varying precision.
  # low precision for maps, high precicion for search and computation
  geo_boundary_self_actual: [_Geo_]

  # boundaries recognized by the national authorities
  # e.g. PoK is part of India as per Indian government, although its not under GOI administration
  geo_boundary_self_official: [_Geo_]
  # a country may accept or reject borders of certain countries based on its foriegn policy
  # this is the world map as per the country
  geo_boundary_world_official: [_Geo_]

  geo_political_country_zonal_council: [_Geo_]
  geo_political_country_state_union_territory: [_Geo_]
  geo_political_country_district: [_Geo_]
  geo_political_country_loksabha_constituency: [_Geo_]
  geo_political_country_vidhansabha_constituency: [_Geo_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Country_Government_ {
  id: ID!
  name_id: String! @id

  # Government of India, भारत सरकार
  names: [_Name_!]! @hasInverse(field: "country_government")

  governs_country: _Country_ @hasInverse(field: "government")

  government_system: [_Government_System_] @hasInverse(field: "government")

  # world country governments
  # to add country specific data to each one
  # one country can have had variety of government systems in the past
  # individual type can help adapt to the country specific needs
  # e.g. India had in the past, a dominion government, provisional government, british-colony government, east indian company government
  india: [_Indian_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_ {
  id: ID!

  name_id: String! @id
  description: String
  government: _Country_Government_

  # Sovereign | Provisional (Exile, Transition)
  authority_status_type: [_Government_System_Types_Authority_Status_] @hasInverse(field: "government_instance")

  # Lineage | People | Religion | Military | Revolution | Resources
  # where does the authority reside? monarchy - in the family or individual, republic - in the people
  authority_source_type: [_Government_System_Types_Authority_Source_]! @hasInverse(field: "government_instance")

  # Autocracy | Oligarchy | Democracy | Anarchy
  # where is authority concentrated?
  # Autocracy - individual or polity;
  # Oligarchy - small number of people - wealth, education, nobility, family ties - religious, corporate or military control;
  # Theocracy
  # Democracy - represented/elected individuals;
  # Anarchy - no concentration of authority; smaller multiple authority concentrations
  authority_concentration_type: [_Government_System_Types_Authority_Concentration_!]!
    @hasInverse(field: "government_instance")

  # Confederation | Unitary | Federation | Strong_Center_Federation
  authority_distribution_type: _Government_System_Types_Authority_Distribution_!
    @hasInverse(field: "government_instance")

  # if authority origin is monarchy
  # Absolute_Monarchy | Constitutional_Monarchy | Crowned_Republic | Elective_Monarchy
  monarchy_type: _Government_System_Types_Monarchy_ @hasInverse(field: "government_instance")

  # if authority concentrated as autocracy
  # Civilian_Dictatorship (Absolute_Monarchy, Dictatorship) | Military_Dictatorship | Hybrid_Dictatorship (mix of civil-military elites)
  autocratic_type: _Government_System_Types_Autocratic_ @hasInverse(field: "government_instance")

  # Aristocracy | Geniocracy | Kraterocracy | Kritarchy | Meritocracy | Noocracy | Plutocracy | Particracy | Stratocracy | Synarchism
  # Technocracy | Theocracy | Timocracy
  oligarchy_type: _Government_System_Types_Oligarchy_ @hasInverse(field: "government_instance")

  # If democracy which type(s) of democracy?
  # Sortition | Census_Democracy | Direct_Democracy | Electocracy | Ergatocracy | Herrenvolk_Democracy
  # Liquid_Democracy | Representative_Democracy | Social_Democracy | Soviet_Democracy | Electoral_Autocracy (representative democracy, indirect democracy)
  # Digital_Democracy |  Cellular_Democracy | Totalitarian_Democracy | Illiberal_Democracy | Liberal_Democracy
  democracy_type: _Government_System_Types_Democracy_ @hasInverse(field: "government_instance")

  # Dominant_Party_System | Two_Party_System | Multi_Party_System | Non_Partisan_System
  partisan_system_type: _Government_System_Types_Partisan_Systems_ @hasInverse(field: "government_instance")

  # Title as head of the state
  # Directorail | Presidential | Monarchy | Parliamentary | Semi-Presidential
  head_of_state_type: _Government_System_Types_Head_Of_State_! @hasInverse(field: "government_instance")

  # Executive authority - Day to day functioning of the government
  # Directorail | Presidential | Monarchy | Parliamentary | Semi-Presidential
  head_of_government_type: _Government_System_Types_Head_Of_Government_! @hasInverse(field: "government_instance")

  # State_With_Religion | Religious_State (e.g. Islamic_State, Buddhist_State, Christian_State, Jewish_State) | Secular_State | Atheist_State | Undeclared
  religious_ideology_type: _Government_System_Types_Religion_! @hasInverse(field: "government_instance")

  # Feudalism | Capitalism | Colonialism | Communism | Despotism | Distributism | Feudalism | Minarchism
  # Socialism | Totalitarianism |
  economic_system_type: [_Government_System_Types_Economic_System_!]! @hasInverse(field: "government_instance")

  established: _Country_Event_
  disestablished: _Country_Event_

  # change_type: Major | Minor | Patch
  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# WHY HAVE MULTIPLE TYPES?
# we followed the flow of authority model
# where authority originates from a point and then on & on is eventually executed/evaluated/feedback
# there is a structure to it.
# there are some standard types for each step. e.g. authority_status can be stable, provisional, in-exile, emergency-powers-enabled
# these are standard values, there can be some custom vale for authority_status
# like externally-defended-internal-civil-unrest, where there is internal instability, but no external actors can intervene
# or like war-torn e.g. ukraine, where the government system is intact, but there are regions where government is not working.
type _Government_System_Types_Authority_Status_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_status")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Authority_Source_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_source")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Authority_Concentration_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_concentration")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Authority_Distribution_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_distribution")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Monarchy_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_monarchy")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Autocratic_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_autocratic")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Oligarchy_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_oligarchy")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Democracy_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_democracy")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Partisan_Systems_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_partisan_systems")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Head_Of_State_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_head_of_state")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Head_Of_Government_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_head_of_government")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Religion_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_religion")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Economic_System_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_economic_system")
  description: String!
  characterstics: [String]
  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

enum _Indian_Legal_Document_Category_ {
  Constitution
  Bill
  Act
  Notification
  Rules
  Regulation
  Order
}

type _Indian_Legal_Document_ {
  id: ID!

  # english title that can be searched
  name_id: String! @id @search(by: [hash, term, fulltext])

  # title in multiple languages
  names: [_Name_!]! @hasInverse(field: "indian_legal_document")

  description: String
  document_type: _Indian_Legal_Document_Category_! @search(by: [exact])

  is_notified: Boolean!

  active_version: _Indian_Legal_Document_Version_
  versions: [_Indian_Legal_Document_Version_]

  structural_elements: [_Indian_Legal_Document_Structural_Element_]
  amendments: [_Indian_Legal_Document_Amendment_]

  enactment_date: DateTime @search
  enforcement_date: DateTime @search
}

enum _Indian_Legal_Document_Structural_Element_Category_ {
  Article
  Section
  Preamble
}

type _Indian_Legal_Document_Structural_Element_ {
  id: ID!

  # which legal document it is part of
  legal_document: _Indian_Legal_Document_! @hasInverse(field: "structural_elements")
  # type of element
  element_type: _Indian_Legal_Document_Structural_Element_Category_! @search(by: [exact])

  # if section/article has a number or roman number or alpha-numeric value in the original document
  identifier: String @search

  part: String @search(by: [exact])
  chapter: String @search(by: [exact])
  schedule: String @search(by: [exact])

  # title of the document
  title: String @search(by: [term, fulltext])
  is_active: Boolean @search
  text_unformatted: [String!] @search(by: [term, fulltext])
  text_formatted: [String!] @search(by: [term, fulltext])

  # if the structural element is from an amendment
  amendment: _Indian_Legal_Document_Amendment_

  # all versions this structural element is part of
  part_of_versions: [_Indian_Legal_Document_Version_]
  # ommited_in_versions: [_Indian_Legal_Document_Version_]

  # date on which this element was added to the knowledge graph
  created_on: DateTime
}

type _Indian_Legal_Document_Version_ {
  id: ID!

  version: DateTime @search

  is_active_version_of: _Indian_Legal_Document_ @hasInverse(field: "active_version")
  legal_document: _Indian_Legal_Document_! @hasInverse(field: "versions")

  structural_elements: [_Indian_Legal_Document_Structural_Element_!]! @hasInverse(field: "part_of_versions")

  # if amendment is null, means original document
  previous_version: _Indian_Legal_Document_Version_ @hasInverse(field: "next_version")
  next_version: _Indian_Legal_Document_Version_ @hasInverse(field: "previous_version")

  amendment: _Indian_Legal_Document_Amendment_
}

type _Indian_Legal_Document_Amendment_ {
  id: ID!

  legal_document: _Indian_Legal_Document_! @hasInverse(field: "amendments")

  resulting_version: _Indian_Legal_Document_Version_ @hasInverse(field: "amendment")

  # structural elements introduced by this ammendment
  structural_elements: [_Indian_Legal_Document_Structural_Element_] @hasInverse(field: "amendment")

  amendment_date: DateTime!
  description: String

  change_description: String
}

# [
#   {
#     name: "Liberal_Democracy"
#     description: "A liberal democracy is a representative democracy with rule of law, protection for individual liberties and rights, and limitations on the power of the elected representatives."
#   },
#   {
#     name: "Illiberal_Democracy",
#     description: "An illiberal democracy is a representative democracy with weak or no limits on the power of the elected representatives to rule as they please."
#   },
#   {
#     name: "Parliamentary_Democracy",
#     description: "A democratic system of government where the legislative branch (the parliament) appoints the executive branch (typically a cabinet), which is headed by a prime minister who is considered the head of government."
#   },
#   {
#     name: "Presidential_Democracy",
#     description: "A democratic system of government where the head of government is also head of state (typically a president) and leads an executive branch that is separate from the legislative branch."
#   },
#   {
#     name: "Dominant_Party_System",
#     description: "A dominant-party system, or one-party dominant system, is a political occurrence in which a single political party continuously dominates election results over running opposition groups or parties.[1] Any ruling party staying in power for more than one consecutive term may be considered a dominant party.",
#     admin_comments: [
#       "I don't think this is a system, but rather a state, at least based on the examples given in context of India (BJP rule, Congress rule till 1989, Trinmool Congress rule in Bengal etc.)"
#     ]
#   },
#   {
#     name: "Two_Party_System"
#     description: "Two-party system is a system where only two parties or alliances, typically placed either side of the center, have a realistic chance of winning a majority of votes. Other parties are very minor or solely regional.",
#   },
#   {
#     name: "Multi_Party_System ",
#     description: "A system in which multiple political parties have the capacity to gain control of government offices, separately or in coalition."
#   },
#   {
#     name: "Non_Partisan_System",
#     description: "Non-partisan system is a system in which universal and periodic elections (by secret ballot) take place without reference to political parties."
#   },
#   {
#     name: "Totalitarian_Democracy",
#     description: "Totalitarian democracy is a dictatorship based on the mass enthusiasm generated by a perfectionist ideology. The conflict between the state and the individual should not exist in a totalitarian democracy, and in the event of such a conflict, the state has the moral duty to coerce the individual to obey. This idea that there is one true way for a society to be organized and a government should get there at all costs stands in contrast to liberal democracy which trusts the process of democracy to, through trial and error, help a society improve without there being only one correct way to self-govern"
#   },
#   {
#     name: "Cellular_Democracy",
#     description: "Cellular democracy was developed by Georgist libertarian economist Fred E. Foldvary, uses a multi-level bottom-up structure based on either small neighborhood governmental districts or contractual communities."
#   },
#   {
#     name: "Republic",
#     description: "A republic (Latin: res publica) is a form of government in which the country is considered a "public matter", not the private concern or property of the rulers. The primary positions of power within a republic are not inherited, but are attained through elections expressing the consent of the governed."
#   },
#   {
#     name: "Monarchy",
#     description: "A monarchy is a form of government in which a group, generally a family representing a dynasty, embodies the country's national identity and its head, the monarch, exercises the role of sovereignty. The actual power of the monarch may vary from purely symbolic (crowned republic), to partial and restricted (constitutional monarchy), to completely autocratic (absolute monarchy). Traditionally the monarch's post is inherited and lasts until death or abdication. In contrast, elective monarchies require the monarch to be elected. Both types have further variations as there are widely divergent structures and traditions defining monarchy."
#   },
#   {
#     name: "",
#     description: ""
#   },
#   {
#     name: "",
#     description: ""
#   }
# ]
