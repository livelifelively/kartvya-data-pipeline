# USER AUTHENTICATION
# values in camelcase are due to @auth/core adapter type definition

type Account {
  id: ID

  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}

type Session {
  id: ID

  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}

type User {
  id: ID

  name: String
  email: String @id
  emailVerified: DateTime
  image: String
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
}

type VerificationToken {
  id: ID

  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}

type _Admin_Comments_ {
  id: ID!
  text: String
  created_on: DateTime
}

# language and scripts
# text, especially names can be in multiple languages and scripts
type _Language_ {
  id: ID!

  name_en: String! @id
  names: [_Name_] @hasInverse(field: "language")
  scripts: [_Script_]

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])
}

type _Script_ {
  id: ID!

  name_en: String! @id
  names: [_Name_] @hasInverse(field: "script")
  languages: [_Language_] @hasInverse(field: "scripts")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])
}

# instance of language + script combination.
type _Language_Script_ {
  id: ID!

  name_en: String! @id
  language: _Language_!
  script: _Script_!
}

# the "WHO" of 5W1H #ENTRY_NODE
# #ENTRY_NODE
# name of all entities in the knowledge graph.
# an entry point for all.
# one name can be shared by multiple entities.
type _Name_ {
  id: ID!

  name: String! @id @search(by: [hash, term, fulltext])
  language_script: _Language_Script_

  language: [_Language_]
  script: [_Script_]

  # indian_legal_document: [_Indian_Legal_Document_]
  country: [_Country_]
  # in_zonal_council: [_IN_Zonal_Council_]

  country_event: [_Country_Event_]
  country_government: [_Country_Government_]
  government_system_type_economic_system: [_Government_System_Types_Economic_System_]
  government_system_type_religion: [_Government_System_Types_Religion_]
  government_system_type_head_of_state_or_government: [_Government_System_Types_Head_Of_State_Or_Government]
  government_system_type_partisan_systems: [_Government_System_Types_Partisan_Systems_]
  government_system_type_democracy: [_Government_System_Types_Democracy_]
  government_system_type_oligarchy: [_Government_System_Types_Oligarchy_]
  government_system_type_autocratic: [_Government_System_Types_Autocratic_]
  government_system_type_monarchy: [_Government_System_Types_Monarchy_]
  government_system_type_authority_distribution: [_Government_System_Types_Authority_Distribution_]
  government_system_type_authority_concentration: [_Government_System_Types_Authority_Concentration_]
  government_system_type_authority_source: [_Government_System_Types_Authority_Source_]
  government_system_type_authority_status: [_Government_System_Types_Authority_Status_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

enum _Location_Or_Region_Category_ {
  Location
  Region
}

enum _Geo_Precision_ {
  # e.g. countries in world map on low res map image
  Extra_Low
  Low
  Medium
  High
  Very_High
  Near_Real_World
}

# the "WHERE" of 5W1H
# #ENTRY_NODE
# tile by tile geo information and how its related to political regions
type _Geo_ {
  id: ID!
  # CHANGE: not to include category, if has location,
  category: _Location_Or_Region_Category_ @search(by: [exact])

  # if the category is location
  location: Point @search

  # if the category is region
  area: MultiPolygon @search

  precision: Int @search

  country_boundary_actual: _Country_Region_
  country_boundary_official: _Country_Region_
  country_boundary_world_official: _Country_Region_

  in_zonal_council_boundary: _Country_Region_
  in_state_boundary: _Country_Region_
  in_union_territory_boundary: _Country_Region_
  in_district_boundary: _Country_Region_
  in_vidhansabha_constituency_boundary: _Country_Region_
  in_loksabha_constituency_boundary: _Country_Region_
}

enum Date_Time_Precision_Category {
  Year
  Month
  Day
  Hour
  Minute
  Second
}

type _Date_Time_ {
  id: ID!

  date_time: DateTime @search(by: [hour])
  date_time_precision: Date_Time_Precision_Category @search(by: [exact])

  from_datetime_country_event: [_Country_Event_]
  # end date for ranged events
  to_datetime_country_event: [_Country_Event_]
}

# the "WHAT" of 5W1H.
# will have to have multiple node types for the events.
#
type _Country_Event_ {
  id: ID!

  # if involves multiple countrys
  country: [_Country_]

  # specific to this event. should be able to identify the event and country.
  # would be best if the value can be unique, though not setting that as a condition as of now.
  names: [_Name_] @hasInverse(field: "country_event")
  description: String! @search(by: [exact, fulltext, term])

  # broad categories. "term criteria": can be applicable to any country.
  # "Declared Independence", "Civil War", "Independence Day", "Declared as Republic", "Declared War", "Hoasted Olympic", "Launched a Sattelite"
  # cannot be an enum (at least at this point) since can have too many values,
  # unless we reach a point where we have a sure number which may not change much.
  event_type: String! @search(by: [exact, fulltext, term])

  # time range event or one time
  one_time_event: Boolean

  datetime_from: _Date_Time_! @hasInverse(field: "from_datetime_country_event")
  datetime_to: _Date_Time_ @hasInverse(field: "to_datetime_country_event")

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Country_ {
  id: ID!
  name_id: String! @id

  names: [_Name_!]! @hasInverse(field: "country")

  region: [_Country_Region_]

  # legal: [_Country_Legal_]

  government: _Country_Government_

  events: [_Country_Event_] @hasInverse(field: "country")

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# political regions associated with and within a country
type _Country_Region_ {
  id: ID!

  country: _Country_ @hasInverse(field: "region")

  # date on which the region changed
  # e.g. sikkim added to India
  # version: DateTime @search

  established: _Country_Event_
  disestablished: _Country_Event_

  # how the country region related to other region types
  # capital: [_Countryal_Capital_City_]
  # zonal_council: [_IN_Zonal_Council_Region_] @hasInverse(field: "country")
  # state: [_IN_State_Region_] @hasInverse(field: "country")
  # union_territory: [_IN_Union_Territory_Region_] @hasInverse(field: "country")

  # array because, there can be multiple version with varying precision.
  # low precision for maps, high precicion for search and computation
  geo_boundary_self_actual: [_Geo_]

  # boundaries recognized by the national authorities
  # e.g. PoK is part of India as per Indian government, although its not under GOI administration
  geo_boundary_self_official: [_Geo_]
  # a country may accept or reject borders of certain countries based on its foriegn policy
  # this is the world map as per the country
  geo_boundary_world_official: [_Geo_]

  geo_political_country_zonal_council: [_Geo_]
  geo_political_country_state_union_territory: [_Geo_]
  geo_political_country_district: [_Geo_]
  geo_political_country_loksabha_constituency: [_Geo_]
  geo_political_country_vidhansabha_constituency: [_Geo_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Country_Government_ {
  id: ID!
  name_id: String! @id

  # Government of India, भारत सरकार
  names: [_Name_!]! @hasInverse(field: "country_government")

  governs_country: _Country_ @hasInverse(field: "government")

  government_system: [_Government_System_] @hasInverse(field: "government")

  # world country governments
  # to add country specific data to each one
  # one country can have had variety of government systems in the past
  # individual type can help adapt to the country specific needs
  # e.g. India had in the past, a dominion government, provisional government, british-colony government, east indian company government
  # india: [_Indian_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_ {
  id: ID!

  name_id: String! @id
  description: String
  government: _Country_Government_

  # what is the current status of the authority
  authority_status_type: [_Government_System_Types_Authority_Status_] @hasInverse(field: "government_instance")

  # where does the authority reside? monarchy - in the family or individual, republic - in the people
  authority_source_type: [_Government_System_Types_Authority_Source_]! @hasInverse(field: "government_instance")

  # where is authority concentrated?
  authority_concentration_type: [_Government_System_Types_Authority_Concentration_!]!
    @hasInverse(field: "government_instance")

  # how is authority distributed?
  authority_distribution_type: _Government_System_Types_Authority_Distribution_!
    @hasInverse(field: "government_instance")

  # if authority origin is heriditary i.e. monarchy
  monarchy_type: _Government_System_Types_Monarchy_ @hasInverse(field: "government_instance")

  # if authority concentrated as autocracy
  autocratic_type: _Government_System_Types_Autocratic_ @hasInverse(field: "government_instance")

  # if authority concentrated as oligarchy
  oligarchy_type: _Government_System_Types_Oligarchy_ @hasInverse(field: "government_instance")

  # If authority is concentrated in elected representatives
  democracy_type: _Government_System_Types_Democracy_ @hasInverse(field: "government_instance")

  # if democracy, how many parties are capable of authority
  partisan_system_type: _Government_System_Types_Partisan_Systems_ @hasInverse(field: "government_instance")

  # system of selecting head of the state
  head_of_state_type: _Government_System_Types_Head_Of_State_Or_Government!
    @hasInverse(field: "government_instance_head_of_state")

  # system of selecting head of the government or executive. day to day functioning of government
  head_of_government_type: _Government_System_Types_Head_Of_State_Or_Government!
    @hasInverse(field: "government_instance_head_of_government")

  # how is the state related to religion
  religious_ideology_type: _Government_System_Types_Religion_! @hasInverse(field: "government_instance")

  # how does the state control the resources flow
  economic_system_type: [_Government_System_Types_Economic_System_!]! @hasInverse(field: "government_instance")

  established: _Country_Event_
  disestablished: _Country_Event_

  # change_type: Major | Minor | Patch
  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

# WHY HAVE MULTIPLE TYPES?
# we followed the flow of authority model
# where authority originates from a point and then on & on is eventually executed/evaluated/feedback
# there is a structure to it.
# there are some standard types for each step. e.g. authority_status can be stable, provisional, in-exile, emergency-powers-enabled
# these are standard values, there can be some custom vale for authority_status
# like externally-defended-internal-civil-unrest, where there is internal instability, but no external actors can intervene
# or like war-torn e.g. ukraine, where the government system is intact, but there are regions where government is not working.
type _Government_System_Types_Authority_Status_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_status")
  description: String!

  governance_status: String!
  control_and_authority: String!
  objective_and_focus: String!
  international_recognition: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Authority_Source_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_source")
  description: String!

  source_of_legitimacy: String!
  power_structure: String!
  governance_mechanisms: String!
  role_of_leadership: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Authority_Concentration_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_concentration")
  description: String!

  authority_held_by: String!
  accountability_towards_people: String!
  power_hierarchy: [String!]
  public_access_to_means_of_peaceful_power_transfer: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Authority_Distribution_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_authority_distribution")
  description: String!

  state_sovereignty: String!
  power_distribution: String!
  law_uniformity: String!
  central_authority_role: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Monarchy_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_monarchy")
  description: String!

  authority_level: String!
  constitutional_limitations: String!
  governing_powers_in: String!
  power_source: String!
  reign_term: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Autocratic_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_autocratic")
  description: String!

  leadership_origin: String!
  power_consolidation: String!
  formation_context: String!
  governance_style: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Oligarchy_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_oligarchy")
  description: String!

  power_basis: String!
  selection_mechanism: String!
  governance_focus: String!
  stability_and_order: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Democracy_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_democracy")
  description: String!

  selection_method: String!
  governance_focus: String!
  participation_level: String!
  system_stability: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Partisan_Systems_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_partisan_systems")
  description: String!

  party_influence: String!
  government_formation: String!
  political_stability: String!
  representation: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Head_Of_State_Or_Government {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_head_of_state_or_government")
  description: String!

  leadership_structure: String!
  power_distribution: String!
  authority_scope: String!
  government_integration: String!

  government_instance_head_of_state: [_Government_System_]
  government_instance_head_of_government: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Religion_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_religion")
  description: String!

  religious_influence: String!
  religious_freedom: String!
  state_support: String!
  legal_framework: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}

type _Government_System_Types_Economic_System_ {
  id: ID!
  name_id: String! @id

  names: [_Name_] @hasInverse(field: "government_system_type_economic_system")
  description: String!

  ownership_and_control: String!
  societal_structure: String!
  economic_drivers: String!
  governance_approach: String!

  government_instance: [_Government_System_]

  created_on: DateTime
  updated_on: DateTime
  admin_comments: [_Admin_Comments_]
}
